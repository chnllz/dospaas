<template>
  <div>
    <a-row :gutter="10">
      <a-col span="20">
        <a-input :placeholder="$t('搜索')"></a-input>
      </a-col>
      <a-col span="4">
        <a-button icon="plus" @click="handleAddPage"></a-button>
      </a-col>
    </a-row>
    <div class="page-tree">
      <a-tree draggable :tree-data="pageTreeStructure" show-icon :selectable="false" @drop="onDrop">
        <template slot="editAndDelete">
          <a-icon type="delete" style="padding-right: 4px" />
          <a-icon type="edit" />
        </template>
      </a-tree>
    </div>
    <a-modal :visible="visible" :title="$t('自定义页面')" @cancel="visible = false" @ok="handleOk">
      <a-form>
        <a-form-item :label="$t('名称')" :labelCol="{ span: 4 }" :wrapperCol="{ span: 15 }">
          <a-input
            v-decorator="['name', { initialValue: name, rules: [{ required: true, message: $t('请输入名称') }] }]"
          ></a-input>
        </a-form-item>
      </a-form>
    </a-modal>
  </div>
</template>

<script>
export default {
  data () {
    return {
      type: '',
      visible: false,
      title: '',
      pageTreeStructure: [{
        title: '首页',
        key: '首页',
        slots: {
          icon: 'editAndDelete'
        },
        children: [{
          title: '子节点',
          key: '子节点',
          slots: {
            icon: 'editAndDelete'
          }
        }]
      }, {
        title: '我的',
        key: '我的',
        slots: {
          icon: 'editAndDelete'
        }
      }],
      name: ''
    }
  },
  methods: {
    handleAddPage () {
      this.visible = true
    },
    handleAddPageType (type) {
      this.type = type
      if (type === 'dataForm') {
        this.visible = true
        this.title = this.$t('数据窗口页面')
      } else if (type === 'viewForm') {
        this.visible = true
        this.title = this.$t('表单视图页面')
      }
    },
    handleOk () {
      this.visible = false
      if (this.type === 'dataForm') {
        this.pageTreeStructure.push({
          title: '数据窗口页面',
          key: '数据窗口页面'
        })
      } else if (this.type === 'viewForm') {
        this.pageTreeStructure.push({
          title: '表单视图页面',
          key: '表单视图页面'
        })
      }
    },
    onDrop (info) {
      console.log(info)
      const dropKey = info.node.eventKey
      const dragKey = info.dragNode.eventKey
      const dropPos = info.node.pos.split('-')
      const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1])
      const loop = (data, key, callback) => {
        data.forEach((item, index, arr) => {
          if (item.key === key) {
            return callback(item, index, arr)
          }
          if (item.children) {
            return loop(item.children, key, callback)
          }
        })
      }
      const data = this.pageTreeStructure

      // Find dragObject
      let dragObj
      loop(data, dragKey, (item, index, arr) => {
        arr.splice(index, 1)
        dragObj = item
      })
      if (!info.dropToGap) {
        // Drop on the content
        loop(data, dropKey, item => {
          item.children = item.children || []
          // where to insert 示例添加到尾部，可以是随意位置
          item.children.push(dragObj)
        })
      } else if (
        (info.node.children || []).length > 0 && // Has children
        info.node.expanded && // Is expanded
        dropPosition === 1 // On the bottom gap
      ) {
        loop(data, dropKey, item => {
          item.children = item.children || []
          // where to insert 示例添加到尾部，可以是随意位置
          item.children.unshift(dragObj)
        })
      } else {
        let ar
        let i
        loop(data, dropKey, (item, index, arr) => {
          ar = arr
          i = index
        })
        if (dropPosition === -1) {
          ar.splice(i, 0, dragObj)
        } else {
          ar.splice(i + 1, 0, dragObj)
        }
      }
      this.pageTreeStructure = data
    }
  }
}
</script>

<style lang="less" scoped>
.page-tree /deep/ .ant-tree-iconEle {
  width: 30px;
}
.ant-tree-title {
  margin-left: 6px;
}
</style>
