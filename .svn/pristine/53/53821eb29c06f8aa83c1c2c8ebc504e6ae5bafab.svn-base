<template>
  <a-form :form="form">
    <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol">
      <span slot="label">
        {{ $t('允许输入长度') }}
        <a-tooltip>
          <a-icon type="question-circle" />
          <div slot="title">
            <div>{{ $t('1、最小输入长度不得小于1，为空表示不限制最小输入长度。') }}</div>
            <div>{{ $t('2、最大输入长度不能小于最小输入长度，为空表示不限制最大输入长度。') }}</div>
          </div>
        </a-tooltip>
      </span>
      <a-row>
        <a-col :span="4">
          <a-form-item>
            <a-input-number
              v-decorator="['setting[attribute][minLength]', { initialValue: data.attribute.minLength || '' }]"
              style="width: 100%"
              :min="1"
              @change="
                (e) => {
                  minLength = e
                }
              "
            />
          </a-form-item>
        </a-col>
        <a-col :span="1" style="text-align: center">{{ $t('至') }}</a-col>
        <a-col :span="4">
          <a-form-item>
            <a-input-number
              v-decorator="['setting[attribute][maxLength]', { initialValue: data.attribute.maxLength || '' }]"
              style="width: 100%"
              :min="minLength"
            />
          </a-form-item>
        </a-col>
      </a-row>
    </a-form-item>
    <a-form-item :label="$t('正则校验')" :labelCol="labelCol" :wrapperCol="wrapperCol">
      <a-input v-decorator="['setting[attribute][regex]', { initialValue: data.attribute.regex || '' }]">
        <a-select
          slot="addonAfter"
          v-decorator="[
            'setting[attribute][textRegexTypeInputEl]',
            { initialValue: data.attribute.textRegexTypeInputEl || '' }
          ]"
          style="width: 120px"
          @change="(value) => (data.attribute.regex = value)"
        >
          <a-select-option v-for="regex in regexs" :key="regex.value" :value="regex.value">
            {{ regex.text }}
          </a-select-option>
        </a-select>
      </a-input>
    </a-form-item>
    <a-form-item :label="$t('输入提示')" :labelCol="labelCol" :wrapperCol="wrapperCol">
      <a-input v-decorator="['setting[attribute][emptyText]', { initialValue: data.attribute.emptyText || '' }]" />
    </a-form-item>
    <a-form-item :label="$t('前缀')" :labelCol="labelCol" :wrapperCol="wrapperCol">
      <div class="center">
        <a-radio-group
          name="radioGroup"
          :default-value="data.form.prefixType ? data.form.prefixType : 'none'"
          @change="getPrefixType"
        >
          <a-radio value="none">{{ $t('无') }}</a-radio>
          <a-radio value="word">{{ $t('文字') }}</a-radio>
          <a-radio value="icon">{{ $t('图标') }}</a-radio>
        </a-radio-group>
        <a-input
          v-if="iconFlag === 'word'"
          v-decorator="[
            'setting[form][prefixVal]',
            { initialValue: data.form.prefixVal || '', rules: [{ required: true, message: $t('请输入文字') }] }
          ]"
          size="small"
          style="width: 50px"
          :maxLength="1"
        ></a-input>
        <template v-else-if="iconFlag === 'icon'">
          <a-button size="small" @click="handleMenuIcon">
            <a-badge v-if="prefixIcon" status="success" :text="$t('设置')" />
            <a-badge v-else status="default" :text="$t('设置')" />
          </a-button>
          <a-icon
            v-if="prefixIcon && prefixIcon.indexOf('fa-') === -1"
            :type="prefixIcon"
            theme="filled"
            style="font-size: 16px; margin-left: 10px"
          />
          <font-awesome-icon
            v-else-if="prefixIcon && !prefixIcon.indexOf('fa-') === -1"
            :icon="prefixIcon"
            class="font-awesome-icon"
          />
        </template>
        <a-input
          v-if="iconFlag === 'icon'"
          v-show="false"
          v-decorator="[
            'setting[form][prefixIcon]',
            {
              initialValue: data.form.prefixIcon ? data.form.prefixIcon : '',
              rules: [{ required: true, message: $t('请选择图标') }]
            }
          ]"
          size="small"
          style="width: 50px"
        ></a-input>
      </div>
    </a-form-item>
    <a-form-item :label="$t('后置图标')" :labelCol="labelCol" :wrapperCol="wrapperCol">
      <a-checkbox-group :defaultValue="setting.form.suffixIcon || []" @change="handleLatter">
        <a-checkbox value="message">
          {{ $t('短信') }}
          <a-button size="small" @click="codeEditor('message')">
            <a-badge v-if="suffixAttributeClick.message" status="success" :text="$t('设置')" />
            <a-badge v-else status="default" :text="$t('设置')" />
          </a-button>
        </a-checkbox>
        <a-checkbox value="telephone">
          {{ $t('电话') }}
          <a-button size="small" @click="codeEditor('telephone')">
            <a-badge v-if="suffixAttributeClick.telephone" status="success" :text="$t('设置')" />
            <a-badge v-else status="default" :text="$t('设置')" />
          </a-button>
        </a-checkbox>
        <a-checkbox value="custom">{{ $t('自定义') }}</a-checkbox>
      </a-checkbox-group>
      <a-button size="small" @click="codeEditor('custom')">
        <a-badge v-if="attributeFlag" status="success" :text="$t('设置')" />
        <a-badge v-else status="default" :text="$t('设置')" />
      </a-button>
    </a-form-item>
    <a-form-item :label="$t('文本框类型')" :labelCol="labelCol" :wrapperCol="wrapperCol">
      <a-radio-group v-decorator="['setting[form][inputType]', { initialValue: data.form.inputType || 'text' }]">
        <a-radio value="text">{{ $t('文本框') }}</a-radio>
        <a-radio value="password">{{ $t('密码框') }}</a-radio>
      </a-radio-group>
    </a-form-item>
    <menu-icon :key="refreshKey" ref="menuIcon" @ok="getIcon"></menu-icon>
    <code-editor ref="codeEditor" @func="getCode" />
  </a-form>
</template>

<script>
export default {
  i18n: window.lang('admin'),
  components: {
    MenuIcon: () => import('@/components/SelectIcon'),
    CodeEditor: () => import('@/views/admin/CodeEditor')
  },
  props: {
    setting: {
      type: Object,
      default: () => { }
    }
  },
  data () {
    return {
      refreshKey: 0,
      labelCol: { span: 4 },
      wrapperCol: { span: 20 },
      form: this.$form.createForm(this),
      minLength: null,
      data: {},
      regexs: [
        { value: '', text: this.$t('自定义') },
        { value: '/^([+-]?)\\d*\\.?\\d+$/', text: this.$t('数字') },
        { value: '/^-?[1-9]\\d*$/', text: this.$t('整数') },
        { value: '/^[A-Za-z]+$/', text: this.$t('字母') },
        { value: '/^\\w+$/', text: this.$t('字母+数字') },
        { value: '/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/', text: 'E-mail' },
        { value: '/^[1-9]*[1-9][0-9]*$/', text: 'QQ' },
        { value: '/^(http://)|(https://)/', text: this.$t('超级链接') },
        { value: '/^(1)[0-9]{10}$/', text: this.$t('手机号码') },
        { value: '/^[0-9-]{6,13}$/', text: this.$t('电话号码') },
        { value: '/^[0-9]{6}$/', text: this.$t('邮政编码') }
      ],
      iconFlag: '',
      prefixVal: '',
      prefixIcon: '',
      attributeFlag: false,
      suffixAttributeClick: {}// 按钮后置图标自定义click事件
    }
  },
  watch: {
    setting: {
      handler (newVal) {
        this.data = JSON.parse(JSON.stringify(newVal))
        this.data.form = this.data.form && !(this.data.form instanceof Array) ? this.data.form : {}
        this.iconFlag = this.data.form.prefixType
        this.prefixVal = this.data.form.prefixVal
        this.prefixIcon = this.data.form.prefixIcon
        this.attributeFlag = !!this.data.form.suffixVal
        if (!this.data.form.suffixAttributeClick || this.data.form.suffixAttributeClick instanceof Array) {
          this.suffixAttributeClick = {}
        } else {
          this.suffixAttributeClick = this.data.form.suffixAttributeClick
        }
      },
      immediate: true
    }
  },
  methods: {
    // 获取前缀
    getPrefixType (e) {
      const val = e.target.value
      this.data.form.prefixType = val
      this.iconFlag = val
      this.prefixIcon = ''
    },
    // 显示图标库
    handleMenuIcon () {
      this.refreshKey = this.refreshKey ? 0 : 1
      this.$nextTick(() => {
        this.$refs.menuIcon.show()
      })
    },
    // 获取图标
    getIcon (value) {
      this.prefixIcon = value
      this.form.setFieldsValue({
        'setting[form][prefixIcon]': value
      })
      this.data.form.prefixIcon = value
    },

    // 后置图标
    handleLatter (val) {
      this.data.form.suffixIcon = val
    },
    // 打开设置附加属性
    codeEditor (type) {
      if (type) {
        this.codeType = type
        this.$refs.codeEditor.show({
          value: this.suffixAttributeClick[type] || ''
        })
      } else {
        this.$refs.codeEditor.show({
          value: this.data.form.suffixVal || ''
        })
      }
    },
    // 获取附加属性
    getCode (value) {
      if (this.codeType) {
        this.$set(this.suffixAttributeClick, this.codeType, value)
      } else {
        this.data.form.suffixVal = value
        this.attributeFlag = true
      }
    },
    handleSubmit () {
      let val = {}
      const { validateFields } = this.form
      validateFields((errors, values) => {
        if (!errors) {
          values.setting.form.prefixType = this.iconFlag
          values.setting.form.suffixIcon = this.data.form.suffixIcon
          values.setting.form.suffixVal = this.data.form.suffixVal
          values.setting.form.suffixAttributeClick = this.suffixAttributeClick
          val = values
        }
      })
      return val
    }
  }
}
</script>
<style lang="less" scoped>
.center {
  height: 41px;
  padding: 0 0 2px;
  display: flex;
  align-items: center;
}
</style>
