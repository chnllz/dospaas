<template>
  <!-- 标签页布局 -->
  <a-tabs
    v-if="record.type === 'tabs'"
    :default-active-key="0"
    :tabBarGutter="Number(record.options.tabBarGutter)"
    :type="record.options.type"
    :size="record.options.size"
    :tabPosition="record.options.tabPosition"
    :style="{
      'margin-top': record.topMargin + 'px',
      'margin-right': record.rightMargin + 'px',
      'margin-bottom': record.downMargin + 'px',
      'margin-left': record.leftMargin + 'px'
    }"
  >
    <a-tab-pane
      v-for="(tabItem, index) in record.columns.filter((item) => {
        if (item.label === '流程日志' || item.label === '催办日志') {
          if (parentParams.caseId) {
            return item
          } else {
            return false
          }
        } else if (item.filterStatus) {
          return false
        } else {
          return item
        }
      })"
      :key="index"
      :style="{ height: record.height ? record.height + 'px' : '100%' }"
      :tab="$t(tabItem.label)"
    >
      <buildBlocks
        v-for="(item, keys) in tabItem.list"
        v-show="tabItem.label !== '知识库'"
        ref="nestedComponents"
        :key="item.key"
        :disabled="disabled"
        :dynamicData="dynamicData"
        :record.sync="tabItem.list[keys]"
        :indexs="keys"
        :viewThis="viewThis"
        :formConfig="formConfig"
        :tableName="tableName"
        :templateObj="templateObj"
        :formdata="formdata"
        :handleWayData="handleWayData"
        :params="params"
        :formThis="formThis"
        :linkData="linkData"
        :parentParams="parentParams"
        :fieldRule="fieldRule"
        :config="config"
        :templateOther="templateOther"
        @give="giveData"
        @changeTem="changeTem"
        @templateRule="templateRule"
        @recoveryRule="recoveryRule"
        @sendEvent="sendEvent"
        @wayRule="wayRule"
        @resetTem="resetTem"
        @sentLinkData="sentLinkData"
        @getRuleAlias="getRuleAlias"
        @cardAdd="
          (data, index) => {
            tabItem.list.splice(index + 1, 0, data)
          }
        "
        @cardDel="
          (index) => {
            tabItem.list.splice(index, 1)
          }
        "
      />
      <div v-if="tabItem.label === '知识库'">
        <knowledge ref="knowledge" />
      </div>
    </a-tab-pane>
  </a-tabs>
  <!-- 栅格布局 -->
  <a-row
    v-else-if="record.type === 'grid'"
    style="display: flex; flex-flow: row wrap"
    :gutter="Number(record.options.gutter)"
  >
    <a-col
      v-for="(colItem, index) in record.columns"
      v-show="
        colItem.list.length > 0 && colItem.list.some((listItem) => !['hidden', 'disabled'].includes(listItem.fieldRule))
      "
      :key="index"
      :class="parentParams.popscreenType && colItem.list.every((item) => item.type !== 'field') ? 'temStyle' : ''"
      :span="colItem.span || 0"
    >
      <buildBlocks
        v-for="(item, keys) in colItem.list"
        ref="nestedComponents"
        :key="item.key"
        :disabled="disabled"
        :dynamicData="dynamicData"
        :viewThis="viewThis"
        :record.sync="colItem.list[keys]"
        :indexs="keys"
        :formConfig="formConfig"
        :tableName="tableName"
        :templateObj="templateObj"
        :formdata="formdata"
        :handleWayData="handleWayData"
        :params="params"
        :formThis="formThis"
        :linkData="linkData"
        :parentParams="parentParams"
        :fieldRule="fieldRule"
        :config="config"
        :templateOther="templateOther"
        @give="giveData"
        @changeTem="changeTem"
        @templateRule="templateRule"
        @recoveryRule="recoveryRule"
        @sendEvent="sendEvent"
        @wayRule="wayRule"
        @resetTem="resetTem"
        @sentLinkData="sentLinkData"
        @getRuleAlias="getRuleAlias"
        @cardAdd="
          (data, index) => {
            colItem.list.splice(index + 1, 0, data)
          }
        "
        @cardDel="
          (index) => {
            colItem.list.splice(index, 1)
          }
        "
      />
    </a-col>
  </a-row>
  <!-- 卡片布局 -->
  <a-card
    v-else-if="record.type === 'card'"
    v-show="record.list.length && !record.filterStatus"
    size="small"
    :bordered="record.bordered === '1' || !record.bordered"
    :style="{
      'margin-top': record.topMargin + 'px',
      'margin-right': record.rightMargin + 'px',
      'margin-bottom': record.downMargin + 'px',
      'margin-left': record.leftMargin + 'px'
    }"
  >
    <a-row v-if="record.label" slot="title" type="flex" align="middle">
      <a-col :span="19">
        <span v-if="record.addShow === '1' && parentParams.popscreenType">
          <a-space>
            <a href="javascript:;" @click="chioseFill">{{ $t(record.label) + ' (' + record.index + ')' }}</a>
            <a-icon v-if="record.key === viewThis.cardKey" type="check-circle" theme="filled" style="color: #52c41a" />
          </a-space>
        </span>
        <span v-else>{{ $t(record.label) }}</span>
      </a-col>
      <a-col :span="5" style="text-align: right">
        <a-space>
          <a-button
            v-if="record.key && JSON.stringify(record.key).indexOf('card') === -1"
            size="small"
            type="danger"
            @click="delCard"
          >
            {{ $t('删除') }}
          </a-button>
          <a-button
            v-if="record.addShow === '1' && parentParams.popscreenType"
            size="small"
            type="primary"
            @click="cardAddChange"
          >
            {{ $t('添加') }}
          </a-button>
        </a-space>
      </a-col>
    </a-row>
    <buildBlocks
      v-for="(item, keys) in record.list"
      :key="item.key"
      :disabled="disabled"
      :dynamicData="dynamicData"
      :viewThis="viewThis"
      :record.sync="record.list[keys]"
      :indexs="keys"
      :formConfig="formConfig"
      :tableName="tableName"
      :templateObj="templateObj"
      :formdata="formdata"
      :handleWayData="handleWayData"
      :params="params"
      :formThis="formThis"
      :linkData="linkData"
      :parentParams="parentParams"
      :fieldRule="fieldRule"
      :config="config"
      :templateOther="templateOther"
      @give="giveData"
      @changeTem="changeTem"
      @templateRule="templateRule"
      @recoveryRule="recoveryRule"
      @sendEvent="sendEvent"
      @wayRule="wayRule"
      @resetTem="resetTem"
      @sentLinkData="sentLinkData"
      @getRuleAlias="getRuleAlias"
      @cardAdd="
        (data, index) => {
          record.list.splice(index + 1, 0, data)
        }
      "
      @cardDel="
        (index) => {
          record.list.splice(index, 1)
        }
      "
    />
  </a-card>
  <!-- 表格布局 -->
  <table
    v-else-if="record.type === 'table'"
    class="kk-table-9136076486841527"
    :class="{
      bright: record.options.bright,
      small: record.options.small,
      bordered: record.options.bordered
    }"
    :style="{
      'margin-top': record.topMargin + 'px',
      'margin-right': record.rightMargin + 'px',
      'margin-bottom': record.downMargin + 'px',
      'margin-left': record.leftMargin + 'px'
    }"
  >
    <tr v-for="(trItem, trIndex) in record.trs" :key="trIndex">
      <td
        v-for="(tdItem, tdIndex) in trItem.tds"
        v-show="Number(tdItem.colspan) && Number(tdItem.rowspan)"
        :key="tdIndex"
        class="table-td"
        :colspan="Number(tdItem.colspan)"
        :rowspan="Number(tdItem.rowspan)"
      >
        <buildBlocks
          v-for="(item, keys) in tdItem.list"
          ref="nestedComponents"
          :key="item.key"
          :disabled="disabled"
          :dynamicData="dynamicData"
          :viewThis="viewThis"
          :record.sync="tdItem.list[keys]"
          :indexs="keys"
          :formConfig="formConfig"
          :tableName="tableName"
          :handleWayData="handleWayData"
          :templateObj="templateObj"
          :formdata="formdata"
          :params="params"
          :formThis="formThis"
          :linkData="linkData"
          :parentParams="parentParams"
          :fieldRule="fieldRule"
          :config="config"
          :templateOther="templateOther"
          @give="giveData"
          @changeTem="changeTem"
          @templateRule="templateRule"
          @recoveryRule="recoveryRule"
          @sendEvent="sendEvent"
          @wayRule="wayRule"
          @resetTem="resetTem"
          @sentLinkData="sentLinkData"
          @getRuleAlias="getRuleAlias"
          @cardAdd="
            (data, index) => {
              tdItem.list.splice(index + 1, 0, data)
            }
          "
          @cardDel="
            (index) => {
              tdItem.list.splice(index, 1)
            }
          "
        />
      </td>
    </tr>
  </table>
  <div v-else :style="record.type === 'subform' ? { height: '100%' } : {}">
    <!-- 单行文本 -->
    <a-form-item
      v-if="record.field && record.field.formType === 'text' && record.fieldRule !== 'disabled'"
      v-show="record.fieldRule !== 'hidden'"
      :labelCol="
        record.labelShow === '0'
          ? { style: `width: 0px; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
          : labelCol
      "
      :wrapperCol="
        record.labelShow === '0'
          ? { style: `width: 100%; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
          : wrapperCol
      "
    >
      <span
        slot="label"
        :style="viewThis.copyAlias.includes(record.field.alias) ? { cursor: 'pointer' } : ''"
        @click="viewThis.copyAlias.includes(record.field.alias) ? copyForm(record.field.alias) : ''"
      >
        <a-tooltip v-if="record.field.setting.attribute.help" placement="top">
          <template slot="title">
            <span>{{ $t(record.field.setting.attribute.help) }}</span>
          </template>
          <a-icon type="question-circle" />
        </a-tooltip>
        <span :title="record.changeTitle ? record.changeTitle : record.field.name">
          {{ $t(record.changeTitle ? record.changeTitle : record.field.name) }}
        </span>
      </span>
      <template
        v-if="
          record.fieldRule === 'readonly' &&
          record.field.value &&
          record.field.setting.autofill &&
          record.field.setting.autofill.source &&
          record.field.setting.autofill.source.length > 0
        "
      >
        <a-button type="link" style="padding: 0" @click="getLinkList(record)">
          {{ record.field.value }}
        </a-button>
      </template>
      <div v-else>
        <div style="display: flex; justify-content: center; align-items: center; margin-top: 4px">
          <a-input
            v-if="record.field.setting.form.inputType !== 'password'"
            v-decorator="[
              'record' +
                (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
                (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
              {
                initialValue: record.field.value,
                rules: [
                  {
                    required: record.field.setting.attribute.required && record.fieldRule !== 'hidden',
                    message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                  },
                  {
                    validator: (rule, value, callback) => {
                      const info = record.field.setting
                      if (!value) {
                        callback()
                        return
                      }
                      if (
                        info.attribute.maxLength &&
                        info.attribute.minLength &&
                        (value.length > info.attribute.maxLength || value.length < info.attribute.minLength)
                      ) {
                        callback(
                          $t('{0}允许长度：{1}~{2}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.minLength,
                            2: info.attribute.maxLength
                          })
                        )
                      }
                      if (
                        info.attribute.minLength &&
                        !info.attribute.maxLength &&
                        value.length < info.attribute.minLength
                      ) {
                        callback(
                          $t('{0}最小长度为{1}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.minLength
                          })
                        )
                      }
                      if (
                        info.attribute.maxLength &&
                        !info.attribute.minLength &&
                        value.length > info.attribute.maxLength
                      ) {
                        callback(
                          $t('{0}最大长度为{1}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.maxLength
                          })
                        )
                      }
                      if (!(record.fieldRule === 'readonly' || record.fieldRule === 'hidden') && info.attribute.regex) {
                        const regex = info.attribute.regex.slice(1, info.attribute.regex.length - 1)
                        const reg = new RegExp(regex)
                        if (!reg.test(value)) {
                          callback($t('请按照正确的格式输入'))
                        }
                      }
                      if (record.validationType === 'regular') {
                        const reg = new RegExp(record.validity.regular)
                        if (!reg.test(value)) {
                          callback(record.validity.errorMsg)
                        }
                      }
                      callback()
                    }
                  }
                ]
              }
            ]"
            allowClear
            :disabled="record.fieldRule === 'readonly'"
            :placeholder="$t(record.field.setting.attribute.emptyText)"
            @change="
              (value) => {
                onChange(record, record.field.formType, value)
              }
            "
            @pressEnter="
              (e) => {
                handleEvent('pressEnter', record.field.alias, e)
              }
            "
            @focus="
              (e) => {
                handleEvent('focus', record.field.alias, e)
              }
            "
          >
            <template slot="prefix">
              <span v-if="record.field.setting.form.prefixType === 'word'">
                {{ record.field.setting.form.prefixVal }}
              </span>
              <a-icon
                v-else-if="record.field.setting.form.prefixType === 'icon'"
                :type="record.field.setting.form.prefixIcon.type"
                :theme="record.field.setting.form.prefixIcon.theme"
              />
            </template>
          </a-input>
          <a-input-password
            v-else
            v-decorator="[
              'record' +
                (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
                (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
              {
                initialValue: record.field.value,
                rules: [
                  {
                    required: record.field.setting.attribute.required && record.fieldRule !== 'hidden',
                    message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                  },
                  {
                    validator: (rule, value, callback) => {
                      const info = record.field.setting
                      if (!value) {
                        callback()
                        return
                      }
                      if (
                        info.attribute.maxLength &&
                        info.attribute.minLength &&
                        (value.length > info.attribute.maxLength || value.length < info.attribute.minLength)
                      ) {
                        callback(
                          $t('{0}允许长度：{1}~{2}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.minLength,
                            2: info.attribute.maxLength
                          })
                        )
                      }
                      if (
                        info.attribute.minLength &&
                        !info.attribute.maxLength &&
                        value.length < info.attribute.minLength
                      ) {
                        callback(
                          $t('{0}最小长度为{1}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.minLength
                          })
                        )
                      }
                      if (
                        info.attribute.maxLength &&
                        !info.attribute.minLength &&
                        value.length > info.attribute.maxLength
                      ) {
                        callback(
                          $t('{0}最大长度为{1}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.maxLength
                          })
                        )
                      }
                      if (info.attribute.regex) {
                        const regex = info.attribute.regex.slice(1, info.attribute.regex.length - 1)
                        const reg = new RegExp(regex)
                        if (!reg.test(value)) {
                          callback($t('请按照正确的格式输入'))
                        }
                      }
                      callback()
                    }
                  }
                ]
              }
            ]"
            style="flex: 1"
            :allowClear="record.field.setting.form.clearIcon === '1'"
            :disabled="record.fieldRule === 'readonly'"
            :placeholder="$t(record.field.setting.attribute.emptyText)"
            @change="
              (value) => {
                onChange(record, record.field.formType, value)
              }
            "
            @pressEnter="
              (e) => {
                handleEvent('pressEnter', record.field.alias, e)
              }
            "
            @focus="
              (e) => {
                handleEvent('focus', record.field.alias, e)
              }
            "
          >
            <template slot="prefix">
              <span v-if="record.field.setting.form.prefixType === 'word'">
                {{ record.field.setting.form.prefixVal }}
              </span>
              <a-icon
                v-else-if="record.field.setting.form.prefixType === 'icon'"
                :type="record.field.setting.form.prefixIcon.type"
                :theme="record.field.setting.form.prefixIcon.theme"
              />
            </template>
          </a-input-password>
          <template v-if="record.field.setting.form.suffixIcon && record.field.setting.form.suffixIcon.length > 0">
            <a-button
              v-if="record.field.setting.form.suffixIcon.indexOf('message') !== -1"
              icon="mail"
              style="margin-left: -1px"
              @click="
                () => {
                  if (record.field.setting.form.suffixAttributeClick) {
                    buttonEvent(record.field.setting.form.suffixAttributeClick.message)
                  }
                }
              "
            ></a-button>
            <a-button
              v-if="record.field.setting.form.suffixIcon.indexOf('telephone') !== -1"
              icon="phone"
              style="margin-left: -1px"
              @click="
                () => {
                  if (record.field.setting.form.suffixAttributeClick) {
                    buttonEvent(record.field.setting.form.suffixAttributeClick.telephone)
                  }
                }
              "
            ></a-button>
            <template v-if="record.field.setting.form.suffixIcon.indexOf('custom') !== -1" style="margin-left: -1px">
              <component :is="record.field.setting.form.suffixAttributeClick.custom"></component>
            </template>
          </template>
        </div>
      </div>
    </a-form-item>
    <!-- 地址选择 -->
    <a-form-item
      v-if="record.field && record.field.formType === 'address' && record.fieldRule !== 'disabled'"
      v-show="record.fieldRule !== 'hidden'"
      :labelCol="
        record.labelShow === '0'
          ? { style: `width: 0px; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
          : labelCol
      "
      :wrapperCol="
        record.labelShow === '0'
          ? { style: `width: 100%; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
          : wrapperCol
      "
    >
      <span slot="label">
        <a-tooltip v-if="record.field && record.field.setting.attribute.help" placement="top">
          <template slot="title">
            <span>{{ $t(record.field.setting.attribute.help) }}</span>
          </template>
          <a-icon type="question-circle" />
        </a-tooltip>
        <span :title="record.changeTitle ? record.changeTitle : record.field.name">
          {{ $t(record.changeTitle ? record.changeTitle : record.field.name) }}
        </span>
      </span>
      <a-input
        v-show="false"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']') +
            '[address]',
          {
            initialValue: record.field.value ? record.field.value.value : '',
            rules: [
              {
                required: record.field.setting.attribute.required && record.fieldRule !== 'hidden',
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.field.name })
              },
              {
                validator:
                  record.field.setting.attribute.required &&
                  record.field.setting.form.reqSeries &&
                  record.fieldRule !== 'hidden'
                    ? checkRequired
                    : ''
              }
            ]
          }
        ]"
      />
      <a-input-group compact>
        <address-select
          :ref="'record' + '[' + record.field.alias + ']'"
          :alias="
            'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']') +
            '[address]'
          "
          :series="record.field.setting.form.showSeries"
          :value="record.field.option"
          :fieldRule="record.fieldRule"
          :style="{ width: record.field.setting.form.detailsShow === '1' ? '50%' : '100%' }"
          @send="getAddress"
        />
        <a-form-item
          v-if="record.field.setting.form.detailsShow === '1'"
          :style="{ width: record.field.setting.form.detailsShow === '1' ? '50%' : '0%' }"
        >
          <a-input
            v-decorator="[
              'record' +
                (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
                (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']') +
                '[details]',
              {
                initialValue: record.field.addressDetails,
                rules: [
                  {
                    required: record.field.setting.attribute.required && record.fieldRule !== 'hidden',
                    message: $t('{0}详细地址不能为空', {
                      0: record.changeTitle ? record.changeTitle : record.field.name
                    })
                  }
                ]
              }
            ]"
            :placeholder="record.fieldRule === 'readonly' ? '' : $t('请输入详细地址')"
            :disabled="record.fieldRule === 'readonly'"
          />
        </a-form-item>
      </a-input-group>
    </a-form-item>
    <!-- 子表 -->
    <a-form-item
      v-else-if="record.field && record.field.formType === 'subform' && record.fieldRule !== 'disabled'"
      style="margin-bottom: 5px !important"
    >
      <span slot="label">
        <a-tooltip v-if="record.field.setting.attribute.help" placement="top">
          <template slot="title">
            <span>{{ $t(record.field.setting.attribute.help) }}</span>
          </template>

          <a-icon type="question-circle" />
        </a-tooltip>
        <span :title="record.changeTitle ? record.changeTitle : record.field.name">
          {{ $t(record.changeTitle ? record.changeTitle : record.field.name) }}
        </span>
      </span>
      <div v-show="record.fieldRule !== 'hidden'">
        <user-table-subform-list
          ref="subformList"
          :params="{ tplviewid: record.field.setting.form.dataView }"
          :linkValue="record.field.linkValue"
          :fieldData="record.field.subFields"
          :dataList="record.field.value ? record.field.value : []"
          :subformItem="record"
          :changeValue="record.field.changeValue || []"
          :title="record.changeTitle ? record.changeTitle : record.field.name"
          :viewThis="viewThis"
          @change="
            (value) => {
              handleEvent('change', record.field.alias, value)
            }
          "
        ></user-table-subform-list>
      </div>
    </a-form-item>
    <a-form-item
      v-if="
        record.field &&
        record.field.formType !== 'subform' &&
        record.field.formType !== 'address' &&
        record.field.formType !== 'image' &&
        record.field.formType !== 'file' &&
        record.field.formType !== 'text' &&
        record.type !== 'portrait' &&
        record.fieldRule !== 'disabled'
      "
      v-show="record.fieldRule !== 'hidden'"
      :labelCol="
        record.labelShow === '0'
          ? { style: `width: 0px; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
          : labelCol
      "
      :wrapperCol="
        record.labelShow === '0'
          ? { style: `width: 100%; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
          : wrapperCol
      "
      :style="
        record.fieldRule !== 'hidden' && record.field.formType === 'organization'
          ? { display: 'flex', 'align-items': 'center' }
          : {}
      "
      :required="record.fieldRule !== 'hidden' && record.field.setting.attribute.required"
    >
      <span
        slot="label"
        :style="viewThis.copyAlias.includes(record.field.alias) ? { cursor: 'pointer' } : ''"
        @click="viewThis.copyAlias.includes(record.field.alias) ? copyForm(record.field.alias) : ''"
      >
        <a-tooltip v-if="record.field.setting.attribute.help" placement="top">
          <template slot="title">
            <span>{{ $t(record.field.setting.attribute.help) }}</span>
          </template>
          <a-icon type="question-circle" />
        </a-tooltip>
        <span :title="record.changeTitle ? record.changeTitle : record.field.name">
          {{ $t(record.changeTitle ? record.changeTitle : record.field.name) }}
        </span>
      </span>
      <!-- 多行文本 -->
      <a-textarea
        v-if="record.field.formType === 'textarea'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            initialValue: record.field.value,
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              },
              {
                validator: (rule, value, callback) => {
                  const info = record.field.setting
                  if (!value) {
                    callback()
                    return
                  }
                  if (
                    info.attribute.maxLength &&
                    info.attribute.minLength &&
                    (value.length > info.attribute.maxLength || value.length < info.attribute.minLength)
                  ) {
                    callback(
                      $t('{0}允许长度：{1}~{2}', {
                        0: record.changeTitle ? record.changeTitle : record.name,
                        1: info.attribute.minLength,
                        2: info.attribute.maxLength
                      })
                    )
                  }
                  if (
                    info.attribute.minLength &&
                    !info.attribute.maxLength &&
                    value.length < info.attribute.minLength
                  ) {
                    callback(
                      $t('{0}最小长度为{1}', {
                        0: record.changeTitle ? record.changeTitle : record.name,
                        1: info.attribute.minLength
                      })
                    )
                  }
                  if (
                    info.attribute.maxLength &&
                    !info.attribute.minLength &&
                    value.length > info.attribute.maxLength
                  ) {
                    callback(
                      $t('{0}最大长度为{1}', {
                        0: record.changeTitle ? record.changeTitle : record.name,
                        1: info.attribute.maxLength
                      })
                    )
                  }
                  callback()
                }
              }
            ]
          }
        ]"
        style="margin-bottom: 2px"
        :allowClear="record.field.setting.form.clearIcon === '1'"
        :disabled="record.fieldRule === 'readonly'"
        :placeholder="$t(record.field.setting.attribute.emptyText)"
        :autoSize="{
          minRows: record.field.setting.attribute.minRows || 1,
          maxRows: record.field.setting.attribute.maxRows || record.field.setting.attribute.minRows
        }"
        @change="
          (value) => {
            onChange(record, record.field.formType, value)
          }
        "
        @pressEnter="
          (e) => {
            handleEvent('pressEnter', record.field.alias, e)
          }
        "
        @blur="
          (e) => {
            handleEvent('blur', record.field.alias, e)
          }
        "
        @focus="
          (e) => {
            handleEvent('focus', record.field.alias, e)
          }
        "
      ></a-textarea>
      <!-- 日期 -->
      <a-date-picker
        v-else-if="record.field.formType === 'datetime' && record.field.fieldType == 'DATETIME'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              },
              {
                validator: (rule, value, callback) => {
                  const info = record.field.setting
                  if (!value) {
                    callback()
                    return
                  }
                  let minValue = ''
                  let maxValue = ''
                  if (info.form.minType === 'field') {
                    const alias = info.form.minValue
                    minValue = viewThis.form.getFieldValue('record' + '[' + alias + ']')
                    minValue = minValue ? moment(minValue) : ''
                  } else if (info.form.minType === 'now') {
                    minValue = moment()
                  } else {
                    minValue = info.form.minValue
                  }
                  if (info.form.maxType === 'field') {
                    const alias = info.form.maxValue
                    maxValue = viewThis.form.getFieldValue('record' + '[' + alias + ']')
                    maxValue = maxValue ? moment(maxValue) : ''
                  } else if (info.form.maxType === 'now') {
                    maxValue = moment()
                  } else {
                    maxValue = info.form.maxValue
                  }
                  if (minValue && moment(value + 3000).isBefore(minValue)) {
                    callback(
                      $t('{0}最小日期时间值为{1}', {
                        0: record.changeTitle ? record.changeTitle : record.name,
                        1: moment(minValue).format('YYYY-MM-DD HH:mm:ss')
                      })
                    )
                  } else if (moment(maxValue).isBefore(value) && maxValue) {
                    callback(
                      $t('{0}最大日期时间值为{1}', {
                        0: record.changeTitle ? record.changeTitle : record.name,
                        1: moment(maxValue).format('YYYY-MM-DD HH:mm:ss')
                      })
                    )
                  } else {
                    callback()
                  }
                }
              }
            ],
            initialValue: record.field.value ? moment(record.field.value, 'YYYY-MM-DD HH:mm:ss') : null
          }
        ]"
        :disabled="record.fieldRule === 'readonly'"
        :placeholder="record.fieldRule === 'readonly' ? '' : $t('请选择日期时间')"
        format="YYYY-MM-DD HH:mm:ss"
        show-time
        :disabled-date="
          (current) => {
            return disabledDate(current, record)
          }
        "
        :disabled-time="
          (current) => {
            return disabledTime(current, record)
          }
        "
        style="width: 100%"
        @change="
          (value1, value2) => {
            onChange(record, record.field.formType, value1, value2)
          }
        "
        @openChange="
          (status) => {
            handleEvent('openChange', record.field.alias, status)
          }
        "
        @blur="
          (e) => {
            handleEvent('blur', record.field.alias, e)
          }
        "
        @focus="
          (e) => {
            handleEvent('focus', record.field.alias, e)
          }
        "
        @calendarChange="
          (dates, dateStrings) => {
            handleEvent('calendarChange', record.field.alias, dates, dateStrings)
          }
        "
      />
      <a-date-picker
        v-else-if="record.field.formType === 'datetime' && record.field.fieldType == 'DATE'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              }
            ],
            initialValue: record.field.value ? moment(record.field.value, 'YYYY-MM-DD') : null
          }
        ]"
        :disabled="record.fieldRule === 'readonly'"
        :placeholder="record.fieldRule === 'readonly' ? '' : $t('请选择日期')"
        format="YYYY-MM-DD"
        :disabled-date="
          (current) => {
            return disabledDate(current, record)
          }
        "
        style="width: 100%"
        @change="
          (value1, value2) => {
            onChange(record, record.field.formType, value1, value2)
          }
        "
        @openChange="
          (status) => {
            handleEvent('focus', record.field.alias, status)
          }
        "
        @panelChange="
          (value, mode) => {
            handleEvent('focus', record.field.alias, value, mode)
          }
        "
        @blur="
          (e) => {
            handleEvent('blur', record.field.alias, e)
          }
        "
        @focus="
          (e) => {
            handleEvent('focus', record.field.alias, e)
          }
        "
        @ok="
          () => {
            handleEvent('focus', record.field.alias)
          }
        "
        @calendarChange="
          (dates, dateStrings) => {
            handleEvent('calendarChange', record.field.alias, dates, dateStrings)
          }
        "
      />
      <a-time-picker
        v-else-if="record.field.formType === 'datetime' && record.field.fieldType == 'TIME'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              },
              {
                validator: (rule, value, callback) => {
                  const val = moment(value).format('LTS')
                  if (!value) {
                    callback()
                    return
                  }
                  const info = record.field.setting
                  let minValue = ''
                  let maxValue = ''
                  if (info.form.minType === 'field') {
                    const alias = info.form.minValue
                    minValue = viewThis.form.getFieldValue('record' + '[' + alias + ']')
                    minValue = minValue ? moment(minValue).format('LTS') : ''
                  } else if (info.form.minType === 'now') {
                    minValue = moment().format('LTS')
                  } else {
                    minValue = info.form.minValue
                  }
                  if (info.form.maxType === 'field') {
                    const alias = info.form.maxValue
                    maxValue = viewThis.form.getFieldValue('record' + '[' + alias + ']')
                    maxValue = maxValue ? moment(maxValue).format('LTS') : ''
                  } else if (info.form.maxType === 'now') {
                    maxValue = moment().format('LTS')
                  } else {
                    maxValue = info.form.maxValue
                  }
                  if (minValue && handleCompare(val, minValue) === -1) {
                    callback(
                      $t('{0}最小时间值为{1}', {
                        0: record.changeTitle ? record.changeTitle : record.name,
                        1: minValue
                      })
                    )
                  } else if (maxValue && handleCompare(val, maxValue) === 1) {
                    callback(
                      $t('{0}最大时间值为{1}', {
                        0: record.changeTitle ? record.changeTitle : record.name,
                        1: maxValue
                      })
                    )
                  } else {
                    callback()
                  }
                }
              }
            ],
            initialValue: record.field.value ? moment(record.field.value, 'HH:mm:ss') : null
          }
        ]"
        :disabled="record.fieldRule === 'readonly'"
        :placeholder="record.fieldRule === 'readonly' ? '' : $t('请选择时间')"
        :disabledHours="
          (hour, minutes) => {
            return disabledTimePicker(hour, minutes, record, 'hour')
          }
        "
        :disabledMinutes="
          (hour, minutes) => {
            return disabledTimePicker(hour, minutes, record, 'minutes')
          }
        "
        :disabledSeconds="
          (hour, minutes) => {
            return disabledTimePicker(hour, minutes, record, 'seconds')
          }
        "
        format="HH:mm:ss"
        style="width: 100%"
        @change="
          (value1, value2) => {
            onChange(record, record.field.formType, value1, value2)
            record.field.value = value2
          }
        "
        @openChange="
          (status) => {
            handleEvent('focus', record.field.alias, status)
          }
        "
        @panelChange="
          (value, mode) => {
            handleEvent('focus', record.field.alias, value, mode)
          }
        "
        @blur="
          (e) => {
            handleEvent('blur', record.field.alias, e)
          }
        "
        @focus="
          (e) => {
            handleEvent('focus', record.field.alias, e)
          }
        "
        @ok="
          () => {
            handleEvent('ok', record.field.alias)
          }
        "
        @calendarChange="
          (dates, dateStrings) => {
            handleEvent('calendarChange', record.field.alias, dates, dateStrings)
          }
        "
      />
      <!-- 下拉框 -->
      <template v-else-if="record.field.formType === 'combobox'">
        <a-select
          v-decorator="[
            'record' +
              (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
              (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
            {
              initialValue: record.field.value ? record.field.value : undefined,
              rules: [
                {
                  required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                  message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                }
              ]
            }
          ]"
          :disabled="record.fieldRule === 'readonly'"
          :mode="record.field.setting.attribute.mode"
          :placeholder="
            record.field.setting.attribute.emptyText
              ? $t(record.field.setting.attribute.emptyText)
              : record.fieldRule === 'readonly'
              ? ''
              : $t('请选择')
          "
          :allowClear="true"
          show-search
          :show-arrow="
            record.field.setting.attribute.dataSource !== 'otherTable' &&
            record.field.setting.form.loadMode !== 'dynamic' &&
            record.fieldRule !== 'readonly'
          "
          :not-found-content="null"
          option-filter-prop="children"
          @change="
            (value) => {
              onChange(record, record.field.formType, value)
            }
          "
          @blur="
            (e) => {
              handleEvent('blur', record.field.alias, e)
            }
          "
          @focus="
            (e) => {
              handleEvent('focus', record.field.alias, e)
            }
          "
          @deselect="
            (e) => {
              handleEvent('deselect', record.field.alias, e)
            }
          "
          @inputKeydown="
            (e) => {
              handleEvent('inputKeydown', record.field.alias, e)
            }
          "
          @mouseenter="
            (e) => {
              handleEvent('mouseenter', record.field.alias, e)
            }
          "
          @mouseleave="
            (e) => {
              handleEvent('mouseleave', record.field.alias, e)
            }
          "
          @popupScroll="
            (e) => {
              handleEvent('popupScroll', record.field.alias, e)
            }
          "
          @search="
            (value) => {
              getOption(record, value), handleEvent('search', record.field.alias, value)
            }
          "
          @select="
            (value, option) => {
              handleEvent('select', record.field.alias, value, option)
            }
          "
          @dropdownVisibleChange="
            (open) => {
              handleEvent('dropdownVisibleChange', record.field.alias, open)
            }
          "
        >
          <template>
            <a-select-option
              v-for="(myitem, myindex) in record.field.option"
              :key="myindex"
              :value="myitem.value"
              @click="viewThis.num++"
            >
              {{ $t(myitem.label) }}
            </a-select-option>
          </template>
        </a-select>
      </template>
      <!-- 单选框 -->
      <a-radio-group
        v-else-if="record.field.formType === 'radio'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            initialValue: record.field.value,
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              }
            ]
          }
        ]"
        button-style="solid"
        :disabled="record.fieldRule === 'readonly'"
        @change="
          (value) => {
            onChange(record, record.field.formType, value)
          }
        "
        @blur="
          (e) => {
            handleEvent('blur', record.field.alias, e)
          }
        "
        @focus="
          (e) => {
            handleEvent('focus', record.field.alias, e)
          }
        "
      >
        <template v-if="record.field.setting.attribute.style !== 'btn'">
          <a-radio
            v-for="(myitem, myindex) in record.field.option"
            :key="myindex"
            :value="myitem.value"
            :style="{
              width:
                record.field.setting.attribute.optionType === 'line'
                  ? '100%'
                  : record.field.setting.attribute.optionWidth + 'px',
              'text-overflow': 'ellipsis',
              'white-space': 'normal'
            }"
          >
            {{ $t(myitem.label) }}
          </a-radio>
        </template>
        <template v-else>
          <a-radio-button
            v-for="(myitem, myindex) in record.field.option"
            :key="myindex"
            :value="myitem.value"
            :style="{
              width:
                record.field.setting.attribute.optionType === 'line'
                  ? '100%'
                  : record.field.setting.attribute.optionWidth + 'px'
            }"
          >
            {{ $t(myitem.label) }}
          </a-radio-button>
        </template>
      </a-radio-group>
      <!-- 复选框 -->
      <template v-else-if="record.field.formType === 'checkbox'">
        <div
          v-if="record.field.setting.attribute.checkAll === '1'"
          :style="{ borderBottom: '1px solid #E9E9E9', marginBottom: '2px' }"
        >
          <a-checkbox
            :indeterminate="record.indeterminate"
            :disabled="record.fieldRule === 'readonly'"
            :checked="record.checkAll"
            @change="
              (e) => {
                onCheckAll(e, record)
              }
            "
          >
            {{ $t('全选') }}
          </a-checkbox>
        </div>
        <a-checkbox-group
          v-decorator="[
            'record' +
              (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
              (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
            {
              initialValue: record.field.value,
              rules: [
                {
                  required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                  message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                },
                {
                  validator: (rule, value, callback) => {
                    if (record.fieldRule !== 'hidden') {
                      const min = record.field.setting.attribute.minCheckedLength
                      const max = record.field.setting.attribute.maxCheckedLength
                      const minString = $t('请选择至少{0}个选项', { 0: min })
                      const maxString = $t('请选择不超过{0}个选项', { 0: max })
                      if (min && value.length < min) {
                        callback(minString)
                      }
                      if (max && value.length > max) {
                        callback(maxString)
                      }
                    } else {
                      callback()
                    }
                    callback()
                  }
                }
              ]
            }
          ]"
          :disabled="record.fieldRule === 'readonly'"
          @click="handleCheckbox(record.field.formType)"
          @change="
            (value) => {
              onCheck(value, record)
              onChange(record, record.field.formType, value)
            }
          "
          @blur="
            (e) => {
              handleEvent('blur', record.field.alias, e)
            }
          "
          @focus="
            (e) => {
              handleEvent('focus', record.field.alias, e)
            }
          "
        >
          <template>
            <a-checkbox
              v-for="(myitem, myindex) in record.field.option"
              :key="myindex"
              :style="{
                width:
                  record.field.setting.attribute.optionType === 'line'
                    ? '100%'
                    : record.field.setting.attribute.optionWidth + 'px'
              }"
              :disabled="
                viewThis.form &&
                viewThis.form.getFieldsValue()['record'] &&
                viewThis.form.getFieldsValue()['record'][record.field.alias] &&
                viewThis.form.getFieldsValue()['record'][record.field.alias].length >=
                  record.field.setting.attribute.maxCheckedLength &&
                !viewThis.form.getFieldsValue()['record'][record.field.alias].includes(myitem.value)
              "
              :value="myitem.value"
            >
              {{ $t(myitem.label) }}
            </a-checkbox>
          </template>
        </a-checkbox-group>
      </template>
      <!-- 数字 -->
      <a-input-number
        v-else-if="record.field.formType === 'number'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            initialValue: record.field.value,
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              }
            ]
          }
        ]"
        :disabled="record.fieldRule === 'readonly'"
        :formatter="
          (value) => `${record.field.setting.form.prefixVal || ''}${value}${record.field.setting.form.suffixVal || ''}`
        "
        :parser="
          (value) => {
            let latter = record.field.setting.form.suffixVal ? record.field.setting.form.suffixVal.split('') : []
            const lastLatter = latter[latter.length - 1]
            latter.pop()
            const firstLatter = latter.join('')
            value = value
              .replace(lastLatter, '')
              .replace(firstLatter, '')
              .replace(record.field.setting.form.prefixVal, '')
            return value
          }
        "
        style="width: 100%"
        :min="record.field.setting.attribute.minValue ? Number(record.field.setting.attribute.minValue) : -Infinity"
        :max="record.field.setting.attribute.maxValue ? Number(record.field.setting.attribute.maxValue) : Infinity"
        :step="record.field.setting.attribute.step || 1"
        :precision="record.field.fieldDecimal || 0"
        :placeholder="$t(record.field.setting.attribute.emptyText)"
        @change="
          (value) => {
            onChange(record, record.field.formType, value)
          }
        "
        @pressEnter="
          (e) => {
            handleEvent('pressEnter', record.field.alias, e)
          }
        "
        @blur="
          (e) => {
            handleEvent('blur', record.field.alias, e)
          }
        "
        @focus="
          (e) => {
            handleEvent('focus', record.field.alias, e)
          }
        "
      ></a-input-number>
      <!-- 流水号 -->
      <a-input
        v-else-if="record.field.formType === 'serialnumber'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            initialValue: record.field.value || ''
          }
        ]"
        :placeholder="
          record.field.setting.attribute.emptyText
            ? $t(record.field.setting.attribute.emptyText)
            : $t('自动生成无需填写')
        "
        :disabled="true"
      />
      <!-- 级联选择 -->
      <div v-else-if="record.field.formType === 'cascader'">
        <a-input
          v-show="false"
          v-decorator="[
            'record' +
              (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
              (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
            {
              initialValue: record.field.value ? record.field.value.value : '',
              rules: [
                {
                  required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                  message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                },
                {
                  validator:
                    record.field.setting.attribute.required && record.field.setting.attribute.selectModel === 'end'
                      ? checkleaf
                      : ''
                }
              ]
            }
          ]"
        />
        <tabs-select
          :ref="
            'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']')
          "
          :field="record.field"
          :valueKey="record.field.setting.form.src || ''"
          :viewThis="viewThis"
          :value="record.field.option"
          :alias="
            'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']')
          "
          fieldType="field"
          :action="parentParams.action"
          :writeBack="record.field.setting.form.writeBack"
          :fieldRule="record.fieldRule"
          @send="getcascaderValue"
        />
      </div>
      <!-- 开关 -->
      <a-switch
        v-else-if="record.field.formType === 'switch'"
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            initialValue: record.field.value === 1,
            valuePropName: 'checked',
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              }
            ]
          }
        ]"
        :disabled="record.fieldRule === 'readonly'"
        :un-checked-children="record.field.setting.form.word.value[0]"
        :checked-children="record.field.setting.form.word.value[1]"
        @change="
          (value, e) => {
            onChange(record, record.field.formType, value, e)
          }
        "
        @click="
          (value, e) => {
            handleEvent('click', record.field.alias, value, e)
          }
        "
        @blur="
          (e) => {
            handleEvent('blur', record.field.alias, e)
          }
        "
        @focus="
          (e) => {
            handleEvent('focus', record.field.alias, e)
          }
        "
      />
      <!-- 关联数据 -->
      <template v-else-if="record.field && record.field.formType === 'associated' && record.fieldRule !== 'disabled'">
        <template
          v-if="
            record.fieldRule === 'readonly' &&
            record.field.value &&
            record.field.setting.autofill &&
            record.field.setting.autofill.source &&
            record.field.setting.autofill.source.length > 0
          "
        >
          <a-button type="link" style="padding: 0" @click="getLinkList(record)">
            {{ record.field.value }}
          </a-button>
        </template>
        <div v-else style="position: relative; width: 100%; margin-top: -1px">
          <template v-if="record.field.setting.form.mode === 'combobox'">
            <a-input
              v-decorator="[
                'record' +
                  (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
                  (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
                {
                  initialValue: record.field.value,
                  rules: [
                    {
                      required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                      message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                    }
                  ]
                }
              ]"
              read-only
              :disabled="record.fieldRule === 'readonly'"
              :style="{ width: '100%', cursor: record.fieldRule === 'readonly' ? '' : 'pointer' }"
              :placeholder="$t(record.field.setting.attribute.emptyText)"
              @click="handleLink(record, record.field.setting.form.mode)"
            />
            <a-icon
              v-show="!record.field.iconFlag && record.fieldRule !== 'readonly'"
              type="down"
              style="position: absolute; top: 8px; margin-left: -22px; color: rgba(0, 0, 0, 0.25); cursor: pointer"
              @click="handleLink(record, record.field.setting.form.mode)"
            />
            <a-icon
              v-show="record.field.iconFlag && record.fieldRule !== 'readonly'"
              type="up"
              style="position: absolute; top: 8px; margin-left: -22px; color: rgba(0, 0, 0, 0.25)"
              @click="handleLink(record, record.field.setting.form.mode)"
            />
          </template>
          <a-input
            v-else
            v-decorator="[
              'record' +
                (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
                (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
              {
                initialValue: record.field.value,
                rules: [
                  {
                    required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                    message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                  }
                ]
              }
            ]"
            :style="{
              width: '100%',
              cursor: record.fieldRule === 'readonly' ? '' : 'pointer',
              background: record.fieldRule === 'readonly' ? '#F5F5F5' : ''
            }"
            :placeholder="$t(record.field.setting.attribute.emptyText)"
            read-only
            @click="handleLink(record, record.field.setting.form.mode)"
          >
            <a-icon
              v-if="record.fieldRule !== 'readonly'"
              slot="addonAfter"
              type="search"
              @click="handleWinlist(record)"
            ></a-icon>
          </a-input>
          <div v-if="record.field.iconFlag" style="position: absolute; left: 0; top: 32px; width: 100%; z-index: 111">
            <a-card size="small">
              <a-select
                ref="select"
                show-search
                allowClear
                autoClearSearchValue
                defaultOpen
                option-filter-prop="children"
                :autoFocus="true"
                :show-arrow="false"
                :filter-option="false"
                :not-found-content="null"
                :default-active-first-option="false"
                :dropdownMatchSelectWidth="false"
                style="width: 100%"
                :placeholder="$t('请输入相关值进行搜索')"
                @search="
                  (val) => {
                    handleSearch(val, record)
                  }
                "
                @blur="linkBlur(record)"
              >
                <a-select-option
                  v-for="(item1, index1) in record.field.selectList"
                  :key="index1"
                  :value="item1.id"
                  @click="handleChoice(item1, record)"
                >
                  {{ $t(item1.label) }}
                </a-select-option>
              </a-select>
            </a-card>
          </div>
        </div>
      </template>
      <!-- 编辑器 -->
      <div v-else-if="record.field.formType == 'editor'">
        <tiny-mce
          v-decorator="[
            'record' +
              (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
              (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
            {
              initialValue: record.field.value,
              rules: [
                {
                  required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                  message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                }
              ]
            }
          ]"
          :initialFrameHeight="parseInt(record.field.setting.attribute.height)"
          :newOptions="{
            readonly: record.fieldRule === 'readonly',
            height: parseInt(record.field.setting.attribute.height)
          }"
          :newId="record.key"
        />
      </div>
      <!-- 自动完成 -->
      <template v-if="record.field && record.field.formType === 'autocomplete' && record.fieldRule !== 'disabled'">
        <div style="display: flex; justify-content: center; align-items: center">
          <a-auto-complete
            v-decorator="[
              'record' +
                (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
                (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
              {
                initialValue: record.field.value,
                rules: [
                  {
                    required: record.field.setting.attribute.required,
                    message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                  },
                  {
                    validator: (rule, value, callback) => {
                      const info = record.field.setting
                      if (!value) {
                        callback()
                        return
                      }
                      if (
                        info.attribute.maxLength &&
                        info.attribute.minLength &&
                        (value.length > info.attribute.maxLength || value.length < info.attribute.minLength)
                      ) {
                        callback(
                          $t('{0}允许长度：{1}~{2}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.minLength,
                            2: info.attribute.maxLength
                          })
                        )
                      }
                      if (
                        info.attribute.minLength &&
                        !info.attribute.maxLength &&
                        value.length < info.attribute.minLength
                      ) {
                        callback(
                          $t('{0}最小长度为{1}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.minLength
                          })
                        )
                      }
                      if (
                        info.attribute.maxLength &&
                        !info.attribute.minLength &&
                        value.length > info.attribute.maxLength
                      ) {
                        callback(
                          $t('{0}最大长度为{1}', {
                            0: record.changeTitle ? record.changeTitle : record.name,
                            1: info.attribute.maxLength
                          })
                        )
                      }
                      if (info.attribute.regex) {
                        const regex = info.attribute.regex.slice(1, info.attribute.regex.length - 1)
                        const reg = new RegExp(regex)
                        if (!reg.test(value)) {
                          callback($t('请按照正确的格式输入'))
                        }
                      }
                      callback()
                    }
                  }
                ]
              }
            ]"
            style="flex: 1"
            :allowClear="record.field.setting.form.clearIcon === '1'"
            :disabled="record.fieldRule === 'readonly'"
            :placeholder="$t(record.field.setting.attribute.emptyText)"
            @search="
              (value) => {
                onSearch(record, value)
              }
            "
            @change="
              (value) => {
                onChange(record, record.field.formType, value)
              }
            "
            @pressEnter="
              (e) => {
                handleEvent('pressEnter', record.field.alias, e)
              }
            "
            @focus="
              (e) => {
                handleEvent('focus', record.field.alias, e)
              }
            "
          >
            <template slot="dataSource">
              <a-select-option
                v-for="(autoItem, autoIndex) in record.field.setting.form.customDataList"
                :key="autoIndex"
                :value="autoItem.value"
              >
                {{ $t(autoItem.value) }}
              </a-select-option>
            </template>
            <template slot="prefix">
              <span v-if="record.field.setting.form.prefixType === 'word'">
                {{ record.field.setting.form.prefixVal }}
              </span>
              <a-icon
                v-else-if="record.field.setting.form.prefixType === 'icon'"
                :type="record.field.setting.form.prefixIcon.type"
                :theme="record.field.setting.form.prefixIcon.theme"
              />
            </template>
          </a-auto-complete>
          <template v-if="record.field.setting.form.suffixIcon && record.field.setting.form.suffixIcon.length > 0">
            <a-button
              v-if="record.field.setting.form.suffixIcon.indexOf('message') !== -1"
              icon="mail"
              style="margin-left: -1px"
            ></a-button>
            <a-button
              v-if="record.field.setting.form.suffixIcon.indexOf('telephone') !== -1"
              icon="phone"
              style="margin-left: -1px"
            ></a-button>
            <a-button
              v-if="record.field.setting.form.suffixIcon.indexOf('custom') !== -1"
              icon="deployment-unit"
              style="margin-left: -1px"
            ></a-button>
          </template>
        </div>
      </template>
      <!-- 树选择 -->
      <template v-else-if="record.field && record.field.formType === 'treeselect' && record.fieldRule !== 'disabled'">
        <data-picker
          ref="treeControl"
          :placeholder="
            record.field.setting.attribute.emptyText
              ? $t(record.field.setting.attribute.emptyText)
              : record.fieldRule === 'readonly'
              ? ''
              : $t('请选择')
          "
          :name="
            'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']')
          "
          :parentId="
            record.field.setting.attribute.dataSource === 'addressBook' ? 'parentNumber' : 'parentDictDataNumber'
          "
          :parameter="
            record.field.setting.attribute.dataSource === 'addressBook'
              ? {}
              : { dictCategoryNumber: record.field.setting.form.src, filterDisabled: true }
          "
          displayType="tree"
          :url="
            record.field.setting.attribute.dataSource === 'addressBook'
              ? '/admin/address/getAddressChildren'
              : '/admin/dict/initData'
          "
          :searchUrl="
            record.field.setting.attribute.dataSource === 'addressBook'
              ? '/admin/search/addressSearch'
              : '/admin/search/dictSearch'
          "
          :required="record.fieldRule !== 'hidden' && record.field.setting.attribute.required"
          :multiple="record.field.setting.attribute.multiple === '1'"
          :disabled="record.fieldRule === 'readonly'"
          :value="record.field.option"
          :selectModel="record.field.setting.attribute.selectModel === 'end'"
          :scope="viewThis"
          :message="`${$t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })}`"
          :optionsConversion="optionsConversionTreeselect"
          @select="
            (data) => {
              onChange(record, record.field.formType, data)
            }
          "
        />
      </template>
      <!-- 组织结构 -->
      <template v-else-if="record.field.formType === 'organization' && record.fieldRule !== 'disabled'">
        <data-picker
          ref="treeControl"
          :placeholder="
            $t(
              `请选择${
                record.field.setting.form.optionType === 'department'
                  ? '部门'
                  : record.field.setting.form.optionType === 'role'
                  ? '角色'
                  : '用户'
              }`
            )
          "
          :disabled="record.fieldRule === 'readonly'"
          :name="
            'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']')
          "
          :parameter="
            record.field.setting.form.optionType === 'user'
              ? { sortField: 'username', fieldId: record.field.fieldId }
              : { fieldId: record.field.fieldId }
          "
          parentId="parentDepartmentId"
          :displayType="record.field.setting.form.optionType === 'department' ? 'tree' : 'list'"
          :url="
            record.dataSourceUrl
              ? record.dataSourceUrl
              : record.field.setting.form.optionType === 'department'
              ? '/admin/department/init'
              : record.field.setting.form.optionType === 'role'
              ? '/admin/search/roleSearch'
              : '/admin/search/userSearch'
          "
          :searchUrl="
            record.dataSourceUrl
              ? record.dataSourceUrl
              : record.field.setting.form.optionType === 'department'
              ? '/admin/search/departmentSearch'
              : record.field.setting.form.optionType === 'role'
              ? '/admin/search/roleSearch'
              : '/admin/search/userSearch'
          "
          :message="`${$t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })}`"
          :required="record.fieldRule !== 'hidden' && record.field.setting.attribute.required"
          :multiple="record.field.setting.attribute.mode === 'multiple'"
          :value="record.field.option"
          :scope="viewThis"
          :optionsConversion="optionsConversion"
          @select="
            (data, options) => {
              onChange(record, record.field.formType, data)
            }
          "
        />
      </template>
      <!-- 标签 -->
      <div v-else-if="record.field && record.field.formType === 'tag' && record.fieldRule !== 'disabled'">
        <!-- 标签气泡框 -->
        <tag-data-picker
          ref="tagDataPicker"
          :placeholder="$t('请选择标签')"
          :name="'record' + '[' + record.field.alias + ']'"
          :allowClear="true"
          :config="record"
          :value="record.field.value"
          :scope="viewThis"
          :required="record.fieldRule !== 'hidden' && record.field.setting.attribute.required"
          :message="$t('标签不能为空')"
          @select="
            (data) => {
              const obj = {}
              obj['record' + '[' + record.field.alias + ']'] = data
              viewThis.form.setFieldsValue(obj)
            }
          "
        />
      </div>
      <!-- 地图选点 -->
      <template v-else-if="record.field && record.field.formType === 'location' && record.fieldRule !== 'disabled'">
        <a-input
          v-show="false"
          v-decorator="[
            'record' +
              (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
              (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
            {
              initialValue: record.field.value,
              rules: [
                {
                  required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                  message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
                }
              ]
            }
          ]"
        />
        <a-button
          v-if="record.fieldRule === 'readonly'"
          @click="
            () => {
              if ($store.getters.setting.baiduAkBrowser) {
                if (record.field.value) {
                  $refs['locationSet' + record.field.alias].show({
                    title: $t('地图选点'),
                    action: 'look',
                    data: record.field.value
                  })
                } else {
                  $message.info($t('位置未设置'))
                }
              } else {
                $message.error($t('未设置百度地图AK'))
              }
            }
          "
        >
          <a-badge v-if="record.field.value" status="success" />
          <a-badge v-else status="default" />
          {{ $t('查看') }}
        </a-button>
        <a-button
          v-else
          @click="
            () => {
              if ($store.getters.setting.baiduAkBrowser) {
                $refs['locationSet' + record.field.alias].show({
                  title: $t('地图选点'),
                  action: 'set',
                  data: record.field.value
                })
              } else {
                $message.error($t('未设置百度地图AK'))
              }
            }
          "
        >
          <a-badge v-if="record.field.value" status="success" />
          <a-badge v-else status="default" />
          {{ $t('设置') }}
        </a-button>
        <location-set
          :ref="'locationSet' + record.field.alias"
          @ok="
            (val) => {
              $set(record.field, 'value', val)
              const obj = {}
              obj['record' + '[' + record.field.alias + ']'] = val
              $emit('give', obj)
            }
          "
        />
      </template>
      <!-- 评分 -->
      <template v-if="record.field && record.field.formType === 'score' && record.fieldRule !== 'disabled'">
        <a-rate
          v-decorator="[
            'record' +
              (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
              (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
            {
              initialValue: Number(record.field.value) || 0,
              rules: [
                { required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required },
                {
                  validator: (rule, value, callback) => {
                    if (record.fieldRule !== 'hidden' && record.field.setting.attribute.required && value === 0) {
                      callback($t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name }))
                    } else {
                      callback()
                    }
                  }
                }
              ]
            }
          ]"
          :allowHalf="record.field.setting.attribute.half === '1'"
          :allowClear="record.field.setting.attribute.clear === '1'"
          :tooltips="record.field.setting.form.writeList"
          :disabled="record.fieldRule === 'readonly'"
        >
          <a-icon
            v-if="record.field.setting.form.prefixType === 'icon'"
            slot="character"
            :type="record.field.setting.form.prefixIcon.type"
          />
          <span v-if="record.field.setting.form.prefixType === 'word'" slot="character">
            {{ record.field.setting.form.prefixVal }}
          </span>
        </a-rate>
      </template>
    </a-form-item>
    <!-- 图片 -->
    <a-form-item
      v-else-if="record.field && record.field.formType === 'image' && record.fieldRule !== 'disabled'"
      v-show="record.fieldRule !== 'hidden'"
      :id="record.fieldRule === 'readonly' ? 'image' + record.field.alias + Math.random() : ''"
      :labelCol="
        record.labelShow === '0'
          ? { style: `width: 0px; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
          : labelCol
      "
      :wrapperCol="
        record.labelShow === '0'
          ? { style: `width: 100%; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
          : wrapperCol
      "
    >
      <span slot="label">
        <span :title="record.changeTitle ? record.changeTitle : record.field.name">
          {{ $t(record.changeTitle ? record.changeTitle : record.field.name) }}
        </span>
      </span>
      <a-upload
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            initialValue: record.field.value,
            valuePropName: 'fileList',
            getValueFromEvent: normFile,
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              },
              {
                validator: (rule, value, callback) => {
                  if (record.fieldRule === 'hidden') {
                    callback()
                    return
                  }
                  let length = value.length
                  const minLength = record.field.setting.attribute.minFiles
                  const maxLength = record.field.setting.attribute.maxFiles
                  if (record.field.setting.attribute.required && length !== 0) {
                    if (length < minLength || length > maxLength) {
                      callback($t('允许文件上传数量：') + minLength + '~' + maxLength)
                    }
                    callback()
                  } else {
                    if (length > 0 && (length < minLength || length > maxLength)) {
                      callback($t('允许文件上传数量：') + minLength + '~' + maxLength)
                    }
                    callback()
                  }
                  record.field.setting.length = length
                  record.field.value.length = length
                }
              }
            ]
          }
        ]"
        v-viewer
        :action="`${$store.state.env.VUE_APP_API_BASE_URL}admin/attachment/upload/?uploadName=upload&fieldId=${record.field.fieldId}`"
        :headers="{ 'Access-Token': $store.getters.userInfo.accessToken }"
        name="upload"
        listType="picture-card"
        :accept="record.field.setting.form.format || '.png,.jpg,.jpeg,.gif,.bmp'"
        :disabled="record.fieldRule === 'readonly'"
        :multiple="true"
        :before-upload="
          (file, fileList) => {
            return beforeUpload(file, fileList, record)
          }
        "
        :class="record.field.alias"
        @change="
          (info) => {
            fileChange(info)
          }
        "
        @preview="
          (file) => {
            handleImagePreview(record, file)
          }
        "
      >
        <div
          v-if="
            record.field.value.length < record.field.setting.attribute.maxFiles &&
            viewThis.form.getFieldsValue()['record'] &&
            viewThis.form.getFieldsValue()['record'][record.field.alias] &&
            viewThis.form.getFieldsValue()['record'][record.field.alias].length <
              record.field.setting.attribute.maxFiles
          "
          style="height: 100%"
        >
          <div style="height: 50%; display: flex; align-items: center; justify-content: center">
            <a-icon type="plus" style="font-size: 18px" />
          </div>
          <a-input
            :placeholder="$t('粘贴')"
            :readOnly="true"
            :disabled="record.fieldRule === 'readonly'"
            style="border: none; border-top: 1px dashed #d9d9d9; text-align: center"
            @click.stop=""
            @paste="handlefilePaste"
          />
        </div>
      </a-upload>
    </a-form-item>
    <!-- 附件 -->
    <a-form-item
      v-else-if="record.field && record.field.formType === 'file' && record.fieldRule !== 'disabled'"
      v-show="record.fieldRule !== 'hidden'"
      :id="record.fieldRule === 'readonly' ? 'file' + record.field.alias + Math.random() : ''"
      :labelCol="
        record.labelShow === '0'
          ? { style: `width: 0px; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
          : labelCol
      "
      :wrapperCol="
        record.labelShow === '0'
          ? { style: `width: 100%; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
          : wrapperCol
      "
    >
      <span slot="label">
        <span :title="record.changeTitle ? record.changeTitle : record.field.name">
          {{ $t(record.changeTitle ? record.changeTitle : record.field.name) }}
        </span>
      </span>
      <a-upload
        v-decorator="[
          'record' +
            (record.aliasKey ? '[product_' + record.aliasKey + ']' : '') +
            (record.field.beforeAlias ? '[' + record.field.beforeAlias + ']' : '[' + record.field.alias + ']'),
          {
            initialValue: record.field.value,
            valuePropName: 'fileList',
            getValueFromEvent: normFile,
            rules: [
              {
                required: record.fieldRule !== 'hidden' && record.field.setting.attribute.required,
                message: $t('{0}不能为空', { 0: record.changeTitle ? record.changeTitle : record.name })
              },
              {
                validator: (rule, value, callback) => {
                  if (record.fieldRule === 'hidden') {
                    callback()
                    return
                  }
                  let length = value.length
                  const minLength = record.field.setting.attribute.minFiles
                  const maxLength = record.field.setting.attribute.maxFiles
                  if (record.field.setting.attribute.required && length !== 0) {
                    if (length < minLength || length > maxLength) {
                      callback($t('允许文件上传数量：') + minLength + '~' + maxLength)
                    }
                    callback()
                  } else {
                    if (length > 0 && (length < minLength || length > maxLength)) {
                      callback($t('允许文件上传数量：') + minLength + '~' + maxLength)
                    }
                    callback()
                  }
                  record.field.setting.length = length
                  record.field.value.length = length
                }
              }
            ]
          }
        ]"
        :action="`${$store.state.env.VUE_APP_API_BASE_URL}admin/attachment/upload/?uploadName=upload&fieldId=${record.field.fieldId}`"
        :headers="{ 'Access-Token': $store.getters.userInfo.accessToken }"
        name="upload"
        :multiple="true"
        listType="text"
        :disabled="record.fieldRule === 'readonly'"
        :accept="
          record.field.setting.form.format ||
          '.png,.jpg,.jpeg,.gif,.bmp,.flv,.swf,.mkv,.avi,.rm,.rmvb,.mpeg,.mpg,.ogg,.ogv,.mov,.wmv,.mp4,.webm,.mp3,.wav,.mid,.rar,.zip,.tar,.gz,.7z,.bz2,.cab,.iso,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf,.txt,.md,.xml'
        "
        :before-upload="
          (file, fileList) => {
            return beforeUpload(file, fileList, record)
          }
        "
        @change="
          (info) => {
            fileChange(info)
          }
        "
      >
        <div v-if="record.field.value.length < record.field.setting.attribute.maxFiles">
          <a-button :disabled="record.fieldRule === 'readonly'">
            <a-icon type="upload" />
            {{ $t('上传') }}
          </a-button>
        </div>
      </a-upload>
    </a-form-item>
    <!-- 子表DW -->
    <template
      v-else-if="
        record.type === 'subform' &&
        record.relationTable &&
        record.relationTable.type === 'table_card_list' &&
        record.relationTable.enable === '1' &&
        record.relationTable.access
      "
    >
      <user-table-list :params="record.relationTable" :formThis="formThis" :viewThis="viewThis" />
    </template>
    <template
      v-else-if="
        record.type === 'subform' &&
        record.relationTable &&
        record.relationTable.enable === '1' &&
        record.relationTable.access
      "
    >
      <user-table-list :params="record.relationTable" :formThis="formThis" />
    </template>
    <div v-else-if="record.type === 'flowlog'">
      <template v-if="record.showType === 'card'">
        <a-row>
          <a-col :span="12">
            <a-form-item>
              <a-radio-group
                v-model="queryParamLog.operation"
                button-style="solid"
                @change="
                  () => {
                    queryParamLog.pageNo = 1
                    getFlowLog('search')
                  }
                "
              >
                <a-radio-button
                  v-for="screenItem in record.screenList"
                  :key="screenItem.value"
                  :value="screenItem.value"
                >
                  {{ screenItem.label }}
                </a-radio-button>
              </a-radio-group>
            </a-form-item>
          </a-col>
          <a-col :span="12" style="text-align: right">
            <div style="display: flex; align-items: center">
              <a-input-search
                v-model="queryParamLog.content"
                placeholder="请输入备注内容"
                @search="
                  () => {
                    queryParamLog.pageNo = 1
                    getFlowLog('search')
                  }
                "
              />
              <a-popover placement="bottomRight" :destroyTooltipOnHide="true" trigger="click">
                <template slot="content">
                  <a-form style="width: 600px" :labelCol="{ span: 4 }" :wrapperCol="{ span: 20 }" :colon="false">
                    <a-form-item :label="$t('流程任务')">
                      <a-input v-model="queryParamLog.title" />
                    </a-form-item>
                    <a-form-item :label="$t('办理人')">
                      <a-input v-model="queryParamLog.inputUser" />
                    </a-form-item>
                    <a-form-item :label="$t('办理方式')">
                      <a-input v-model="queryParamLog.type" />
                    </a-form-item>
                    <a-form-item :label="$t('办理时间')">
                      <a-range-picker
                        v-model="queryParamLog.inputTime"
                        :showTime="{ defaultValue: [moment('00:00:00', 'HH:mm:ss'), moment('23:59:59', 'HH:mm:ss')] }"
                        format="YYYY-MM-DD HH:mm:ss"
                        style="width: 100%"
                      />
                    </a-form-item>
                    <a-form-item :label="$t('办理部门')">
                      <a-input v-model="queryParamLog.inputDepartment" />
                    </a-form-item>
                    <a-form-item :label="$t('办理备注')">
                      <a-input v-model="queryParamLog.content" />
                    </a-form-item>
                    <div style="text-align: right; margin-top: 8px">
                      <a-space>
                        <a-button
                          type="primary"
                          @click="
                            () => {
                              queryParamLog.pageNo = 1
                              getFlowLog('search')
                              logVisible = false
                            }
                          "
                        >
                          搜索
                        </a-button>
                        <a-button
                          @click="
                            () => {
                              queryParamLog = {
                                pageNo: 1,
                                pageSize: 20,
                                operation: queryParamLog.operation
                              }
                              getFlowLog('search')
                              logVisible = false
                            }
                          "
                        >
                          重置
                        </a-button>
                      </a-space>
                    </div>
                  </a-form>
                </template>

                <a-button style="margin-left: -1px" icon="filter" @click="() => (logVisible = true)" />
              </a-popover>
            </div>
          </a-col>
        </a-row>
        <a-timeline style="width: 100%; margin-top: 8px" :pending="flowLogLoading ? $t('加载中') : undefined">
          <a-timeline-item
            v-for="flowItem in flowLogList"
            :key="flowItem.id"
            :color="flowItem.type === 'finish' ? 'red' : flowItem.type === 'current' ? 'green' : 'gray'"
          >
            <a-row :gutter="[0, 8]">
              <a-col :span="12">
                <a-tag :color="flowItem.type === 'finish' ? 'red' : flowItem.type === 'current' ? 'green' : ''">
                  {{
                    processSubStatusDict.find((item) => item.dictDataNumber === flowItem.processSubStatus)
                      ? processSubStatusDict.find((item) => item.dictDataNumber === flowItem.processSubStatus)
                          .dictDataName
                      : flowItem.processSubStatus || '--'
                  }}
                </a-tag>
              </a-col>
              <a-col :span="12" style="text-align: right; padding-right: 16px">{{ flowItem.inputTime }}</a-col>
              <a-col :span="24">
                <a-card v-if="flowItem.type === 'finish'" size="small">
                  <a-descriptions :column="1">
                    <a-descriptions-item :label="$t('任务名称')">{{ $t('结束') }}</a-descriptions-item>
                    <a-descriptions-item :label="$t('结束时间')">{{ flowItem.inputTime }}</a-descriptions-item>
                  </a-descriptions>
                  <a-row>
                    <a-col
                      v-for="(fileItem, fileIndex) in flowItem.logAttachment"
                      :key="fileIndex"
                      :span="8"
                      style="text-align: center"
                    >
                      <a
                        :href="`${$store.state.env.VUE_APP_API_BASE_URL}admin/api/download/?filePath=${
                          fileItem.filePath
                        }&fileName=${
                          fileItem.fileName.includes('.')
                            ? fileItem.fileName.substring(0, fileItem.fileName.lastIndexOf('.'))
                            : fileItem.fileName
                        }`"
                        target="_blank"
                        style="display: block"
                      >
                        {{ fileItem.fileName }}
                      </a>
                    </a-col>
                  </a-row>
                </a-card>
                <a-card v-else-if="flowItem.type === 'current'" size="small">
                  <a-descriptions :column="2">
                    <a-descriptions-item :label="$t('当前任务名称')">{{ flowItem.title }}</a-descriptions-item>
                    <a-descriptions-item :label="$t('任务启动时间')">{{ flowItem.inputTime }}</a-descriptions-item>
                    <a-descriptions-item :span="2" :label="$t('当前办理人')">
                      <span
                        style="
                          width: 100%;
                          overflow: hidden;
                          text-overflow: ellipsis;
                          display: -webkit-box;
                          -webkit-line-clamp: 1;
                          line-height: 1;
                          -webkit-box-orient: vertical;
                        "
                      >
                        {{ flowItem.inputUser || '--' }}
                      </span>
                    </a-descriptions-item>
                  </a-descriptions>
                  <a-row>
                    <a-col
                      v-for="(fileItem, fileIndex) in flowItem.logAttachment"
                      :key="fileIndex"
                      :span="8"
                      style="text-align: center"
                    >
                      <a
                        :href="`${$store.state.env.VUE_APP_API_BASE_URL}admin/api/download/?filePath=${
                          fileItem.filePath
                        }&fileName=${
                          fileItem.fileName.includes('.')
                            ? fileItem.fileName.substring(0, fileItem.fileName.lastIndexOf('.'))
                            : fileItem.fileName
                        }`"
                        target="_blank"
                        style="display: block"
                      >
                        {{ fileItem.fileName }}
                      </a>
                    </a-col>
                  </a-row>
                </a-card>
                <a-card v-else size="small">
                  <a-descriptions :column="2">
                    <a-descriptions-item :label="$t('任务名称')">{{ flowItem.title }}</a-descriptions-item>
                    <a-descriptions-item :label="$t('办理人')">{{ flowItem.inputUser || '--' }}</a-descriptions-item>
                    <a-descriptions-item :label="$t('办理方式')">{{ flowItem.type }}</a-descriptions-item>
                    <a-descriptions-item :label="$t('办理部门')">{{ flowItem.inputDepartment }}</a-descriptions-item>
                    <a-descriptions-item :label="$t('办理备注')" :span="2">
                      {{ flowItem.content || '--' }}
                    </a-descriptions-item>
                  </a-descriptions>
                  <a-row>
                    <a-col
                      v-for="(fileItem, fileIndex) in flowItem.logAttachment"
                      :key="fileIndex"
                      :span="8"
                      style="text-align: center"
                    >
                      <a
                        :href="`${$store.state.env.VUE_APP_API_BASE_URL}admin/api/download/?filePath=${
                          fileItem.filePath
                        }&fileName=${
                          fileItem.fileName.includes('.')
                            ? fileItem.fileName.substring(0, fileItem.fileName.lastIndexOf('.'))
                            : fileItem.fileName
                        }`"
                        target="_blank"
                        style="display: block"
                      >
                        {{ fileItem.fileName }}
                      </a>
                    </a-col>
                  </a-row>
                </a-card>
              </a-col>
            </a-row>
          </a-timeline-item>
          <a-timeline-item v-if="!flowLogLoading && flowlogLoadMore">
            <a @click="flowlogLoadMoreList">{{ $t('加载更多') }}...</a>
          </a-timeline-item>
        </a-timeline>
      </template>
      <template v-else>
        <div class="page" style="padding: 8px 0">
          <a-form :labelCol="{ span: 6 }" :wrapperCol="{ span: 18 }" :colon="false" class="search">
            <a-card size="small">
              <template slot="title">
                <a-radio-group
                  v-model="queryParamLog.operation"
                  button-style="solid"
                  @change="$refs.tableLog.refresh(true)"
                >
                  <a-radio-button
                    v-for="screenItem in record.screenList"
                    :key="screenItem.value"
                    :value="screenItem.value"
                  >
                    {{ screenItem.label }}
                  </a-radio-button>
                </a-radio-group>
              </template>
              <a-space slot="extra">
                <a-button htmlType="submit" @click="$refs.tableLog.refresh(true)">
                  {{ $t('搜索') }}
                </a-button>
                <a-button
                  style="margin: 0 8px"
                  @click="
                    () => {
                      queryParamLog = {
                        operation: ''
                      }
                      $refs.tableLog.refresh(true)
                    }
                  "
                >
                  {{ $t('重置') }}
                </a-button>
                <a-button
                  :icon="advancedLog ? 'up' : 'down'"
                  style="font-size: 11px"
                  @click="advancedLog = !advancedLog"
                />
              </a-space>
              <a-row :class="advancedLog ? 'advanced' : 'normal'" class="form">
                <a-col v-bind="colLayoutLog">
                  <a-form-item :label="$t('流程任务')">
                    <a-input v-model="queryParamLog.title" />
                  </a-form-item>
                </a-col>
                <a-col v-bind="colLayoutLog">
                  <a-form-item :label="$t('办理人')">
                    <a-input v-model="queryParamLog.inputUser" />
                  </a-form-item>
                </a-col>
                <a-col v-bind="colLayoutLog">
                  <a-form-item :label="$t('办理方式')">
                    <a-input v-model="queryParamLog.type" />
                  </a-form-item>
                </a-col>
                <a-col v-bind="colLayoutLog">
                  <a-form-item :label="$t('办理时间')">
                    <a-range-picker
                      v-model="queryParamLog.inputTime"
                      format="YYYY-MM-DD HH:mm:ss"
                      :showTime="{ defaultValue: [moment('00:00:00', 'HH:mm:ss'), moment('23:59:59', 'HH:mm:ss')] }"
                      style="width: 100%"
                    />
                  </a-form-item>
                </a-col>
                <a-col v-bind="colLayoutLog">
                  <a-form-item :label="$t('办理部门')">
                    <a-input v-model="queryParamLog.inputDepartment" />
                  </a-form-item>
                </a-col>
                <a-col v-bind="colLayoutLog">
                  <a-form-item :label="$t('流程备注')">
                    <a-input v-model="queryParamLog.content" />
                  </a-form-item>
                </a-col>
              </a-row>
            </a-card>
          </a-form>
        </div>
        <s-table
          ref="tableLog"
          size="small"
          rowKey="id"
          :columns="columnsLog"
          :data="loadDataLog"
          :sorter="{ field: 'id', order: 'descend' }"
        >
          <div slot="username" slot-scope="text" class="userName">
            <div>{{ text || '--' }}</div>
          </div>
          <div slot="content" slot-scope="text" v-dompurify-html="text || '--'"></div>
        </s-table>
      </template>
    </div>
    <div v-else-if="record.type === 'urgelog'">
      <a-card size="small" class="table-search">
        <a-form :layout="advancedUrge ? 'vertical' : 'inline'" :class="advancedUrge ? 'advanced' : 'normal'">
          <div class="head">
            <div class="title">{{ $t('过滤') }}</div>
            <span class="button">
              <a-button htmlType="submit" type="primary" @click="$refs.tableUrge.refresh(true)">
                {{ $t('搜索') }}
              </a-button>
              <a-button
                style="margin: 0 8px"
                @click="
                  () => {
                    queryParamUrge = {}
                    $refs.tableUrge.refresh(true)
                  }
                "
              >
                {{ $t('重置') }}
              </a-button>
            </span>
          </div>
          <a-row :gutter="16">
            <a-col v-if="advancedUrge" span="24">
              <div class="divider"></div>
            </a-col>
            <a-col v-bind="colLayoutLog">
              <a-form-item :label="$t('任务名称')">
                <a-input v-model="queryParamUrge.title" />
              </a-form-item>
            </a-col>
            <a-col v-bind="colLayoutLog">
              <a-form-item :label="$t('被催办人')">
                <a-input v-model="queryParamUrge.username" />
              </a-form-item>
            </a-col>
            <a-col v-bind="colLayoutLog">
              <a-form-item :label="$t('催办原因')">
                <a-input v-model="queryParamUrge.urgeReason" />
              </a-form-item>
            </a-col>
            <a-col v-bind="colLayoutLog">
              <a-form-item :label="$t('催办备注')">
                <a-input v-model="queryParamUrge.urgeRemarks" />
              </a-form-item>
            </a-col>
          </a-row>
        </a-form>
      </a-card>
      <s-table
        ref="tableUrge"
        size="small"
        rowKey="id"
        :columns="columnsUrge"
        :data="loadDataUrge"
        :sorter="{ field: 'id', order: 'descend' }"
      >
        <div slot="username" slot-scope="text" class="userName">
          <div>{{ text }}</div>
        </div>
        <div slot="urgeRemarks" slot-scope="text" v-dompurify-html="text"></div>
      </s-table>
    </div>
    <!-- 隐藏，但是保留占位符 -->
    <a-form-item
      v-else-if="record.fieldRule === 'hidden' && record.placeholder === '1'"
      :labelCol="
        record.labelShow === '0'
          ? { style: `width: 0px; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
          : labelCol
      "
      :wrapperCol="
        record.labelShow === '0'
          ? { style: `width: 100%; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
          : wrapperCol
      "
    ></a-form-item>
    <!-- 原分割符 -->
    <a-divider v-else-if="record.type === 'divider' && record.dividerText" :orientation="record.dividerDirection">
      {{ $t(record.dividerText) }}
    </a-divider>
    <!-- 组件 -->
    <div v-else-if="record.type === 'component'">
      <component :is="coms" v-if="record.filePath" :parent="this" :viewThis="viewThis"></component>
      <component :is="record.component" v-else :ref="`component-${record.value}`" :myid="`component-${record.value}`" />
    </div>
    <!-- button按钮 -->
    <a-form-item v-else-if="record.type === 'button'">
      <a-button
        v-show="!record.options.hidden"
        :type="record.options.type"
        :html-type="record.options.handle === 'submit' ? 'submit' : undefined"
        @click="
          () => {
            record.options.handle === 'submit'
              ? false
              : record.options.handle === 'reset'
              ? $emit('handleReset')
              : record.options.dynamicFun
              ? buttonEvent(record.options.dynamicFun)
              : false
          }
        "
        v-text="$t(record.label)"
      ></a-button>
    </a-form-item>
    <!-- alert提示 -->
    <a-form-item v-else-if="record.type === 'alert'">
      <a-alert
        style="margin: 5px 0"
        :message="$t(record.label)"
        :description="$t(record.options.description)"
        :type="record.options.type"
        :showIcon="record.options.showIcon === '1'"
        :closable="record.options.closable === '1'"
        :banner="record.options.banner === '1'"
      />
    </a-form-item>
    <!-- 文本 -->
    <a-form-item v-else-if="record.type === 'text'">
      <div :style="{ textAlign: record.options.textAlign }">
        <label :class="{ 'ant-form-item-required': record.options.showRequiredMark }" v-text="$t(record.label)"></label>
      </div>
    </a-form-item>
    <a-form-item v-else-if="record.type === 'placeholder'">
      <div></div>
    </a-form-item>
    <!-- html -->
    <div v-else-if="record.type === 'html'" v-dompurify-html="record.options.defaultValue"></div>
    <!-- 表单留痕 -->
    <div
      v-else-if="record.type === 'formmark' && params.parentParams && params.parentParams.action !== 'add'"
      style="margin-bottom: 10px"
    >
      <div v-if="parentParams.action === 'edit'">
        <a-timeline v-if="traceData.length > 0">
          <a-timeline-item v-for="option in traceData" :key="option.id">
            <h3>{{ option.updateTime }} {{ option.updateUser }}({{ option.updateDepartmentName }})</h3>
            <a-table
              size="small"
              :pagination="false"
              rowKey="fieldAlias"
              :columns="columnsMark"
              :dataSource="option.setting"
            ></a-table>
          </a-timeline-item>
        </a-timeline>
        <a-empty v-else />
        <a-row v-if="traceData.length >= 10">
          <a-col :span="24" style="text-align: center">
            <a v-if="loadMore" @click="getMoreTrace">{{ $t('加载更多') }}</a>
            <span v-else>{{ $t('没有更多数据') }}</span>
            <a-spin v-if="tracespin">
              <a-icon slot="indicator" type="loading" style="font-size: 20px" />
            </a-spin>
          </a-col>
        </a-row>
      </div>
      <a-empty v-else />
    </div>
    <!-- 客户画像 -->
    <!-- <a-form-item v-else-if="record.type == 'portrait'">
      <a-spin :spinning="record.loading">
        <a-row v-if="!record.enable && record.data" type="flex" align="middle" :gutter="[0, 8]">
          <a-col :span="24" style="text-align: center">
            <img
              v-if="record.data.xb === '女'"
              src="../FormDesign/packages/KFormItem/women.png"
              alt=""
              style="width: 75px; height: auto"
            />
            <img v-else src="../FormDesign/packages/KFormItem/men.png" alt="" style="width: 75px; height: auto" />
          </a-col>
          <a-col :span="24" style="text-align: center; font-weight: bold">{{ record.data.khmc }}</a-col>
          <a-col :span="24">
            <a-row type="flex" justify="center">
              <a-col :span="2">
                <a-tooltip :title="$t('性别')">
                  <a-icon v-if="record.data.xb === '男'" type="man" style="color: #722ed1" />
                  <a-icon v-else-if="record.data.xb === '女'" type="woman" style="color: #ff85c0" />
                  <a-icon v-else type="question" style="color: #262626" />
                </a-tooltip>
              </a-col>
              <a-col :span="4">
                <a-tooltip :title="$t('年龄')">{{ record.data.nl }} {{ $t('岁') }}</a-tooltip>
              </a-col>
              <a-col :span="2">
                <a-tooltip :title="$t('地址')"><a-icon type="environment" style="color: #1890ff" /></a-tooltip>
              </a-col>
              <a-col
                :span="6"
                style="display: inline-block; white-space: nowrap; overflow: hidden; text-overflow: ellipsis"
              >
                <a-tooltip placement="topLeft" :title="record.data.ssq">{{ record.data.ssq }}</a-tooltip>
              </a-col>
              <a-col :span="2">
                <a-tooltip :title="$t('标签评分')"><a-icon type="star" style="color: #f5222d" /></a-tooltip>
              </a-col>
              <a-col :span="4">{{ record.data.bqfs || 0 }} 分</a-col>
            </a-row>
          </a-col>
          <a-col :span="24">
            <a-row type="flex" justify="center">
              <a-col :span="2" style="text-align: center"></a-col>
              <a-col :span="4" style="text-align: center">
                <a-tooltip :title="$t('编辑')"><a-button icon="edit" shape="circle" @click="getEnable" /></a-tooltip>
              </a-col>
              <a-col :span="4" style="text-align: center"><a-button icon="phone" shape="circle" /></a-col>
              <a-col :span="4" style="text-align: center"><a-button icon="mail" shape="circle" /></a-col>
              <a-col :span="4" style="text-align: center">
                <a-tooltip :title="$t('更多')"><a-button icon="more" shape="circle" /></a-tooltip>
              </a-col>
              <a-col v-if="parentParams.popscreenType" :span="4" style="text-align: center">
                <a-tooltip :title="$t('切换用户')">
                  <a-button icon="swap" shape="circle" @click="handleUserShow(record)" />
                </a-tooltip>
              </a-col>
              <a-col :span="2" style="text-align: center"></a-col>
            </a-row>
          </a-col>
          <a-divider :dashed="true" style="margin: 12px 0 6px 0" />
          <a-col :span="24">
            <a-row>
              <a-col :span="23">
                <a-icon type="tag" />
                {{ $t('客户画像') }}
              </a-col>
            </a-row>
          </a-col>
          <a-col v-if="record.data._khbq_.length">
            <a-tag
              v-for="(tag, tagIndex) in record.data._khbq_.split(',')"
              :key="tagIndex"
              :color="
                record.data.khbq.find((khitem) => khitem.name === tag) &&
                record.data.khbq.find((khitem) => khitem.name === tag).tagType === '1'
                  ? 'green'
                  : 'purple'
              "
            >
              {{ tag }}
            </a-tag>
          </a-col>
          <a-col v-else style="color: #e8e8e8">{{ $t('暂无标签') }}</a-col>
          <a-divider :dashed="true" style="margin: 12px 0 6px 0" />
          <a-col :span="24">
            <a-row>
              <a-col :span="24">
                <a-icon type="deployment-unit" />
                {{ $t('交互数据') }}
              </a-col>
              <a-col>
                <a-tag color="purple">{{ $t('咨询 18 次') }}</a-tag>
                <a-tag color="purple">{{ $t('产品 6 个') }}</a-tag>
                <a-tag color="purple">{{ $t('投诉 1 单') }}</a-tag>
                <a-tag color="purple">{{ $t('订单 10 个') }}</a-tag>
                <a-tag color="purple">{{ $t('安装 8 单') }}</a-tag>
                <a-tag color="purple">{{ $t('来电 35 次') }}</a-tag>
                <a-tag color="purple">{{ $t('维修 1 单') }}</a-tag>
                <a-tag color="purple">{{ $t('不满意 0 单') }}</a-tag>
              </a-col>
            </a-row>
          </a-col>
          <a-divider :dashed="true" style="margin: 12px 0 6px 0" />
          <a-col :span="24">
            <a-icon type="user" />
            {{ $t('联系信息') }}
          </a-col>
          <a-row type="flex" :gutter="16">
            <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('电话1') }}</a-col>
            <a-col :span="16" style="font-size: 13px">{{ record.data.khdh1 || '--' }}</a-col>
            <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('电话2') }}</a-col>
            <a-col :span="16" style="font-size: 13px">{{ record.data.khdh2 || '--' }}</a-col>
            <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('邮箱') }}</a-col>
            <a-col :span="16" style="font-size: 13px">{{ record.data.yx || '--' }}</a-col>
            <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('客户类别') }}</a-col>
            <a-col :span="16" style="font-size: 13px">{{ record.data.khjb || '--' }}</a-col>
            <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('详细地址') }}</a-col>
            <a-col :span="16" style="font-size: 13px">{{ record.data.xxdz || '--' }}</a-col>
            <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('是否黑名单') }}</a-col>
            <a-col :span="16" style="font-size: 13px">{{ record.data.sfhmd || '--' }}</a-col>
            <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('客户类型') }}</a-col>
            <a-col :span="16" style="font-size: 13px">{{ record.data.khxz || '--' }}</a-col>
          </a-row>
        </a-row>
        <a-form v-else-if="record.enable && record.params" :form="portraitForm">
          <user-table-form-view
            ref="portraitFormView"
            :params="{
              tableName: viewThis.tableName,
              template: record.params.template,
              templateOther: record.params.templateOther,
              fieldRule: record.params.fieldRule,
              parentParams: record.params,
              action: 'add',
              page: 'user'
            }"
            :formThis="this"
          />
          <div style="text-align: right; padding-top: 10px">
            <a-space>
              <a-button v-if="parentParams.popscreenType && record.action === 'edit'" @click="handleUserShow">
                {{ $t('切换用户') }}
              </a-button>
              <a-button type="primary" @click="getPortraitForm">{{ $t('保存') }}</a-button>
              <a-button v-if="record.action === 'edit'" @click="$set(record, 'enable', false)">
                {{ $t('取消') }}
              </a-button>
            </a-space>
          </div>
        </a-form>
      </a-spin>
      <user-table-win-list ref="userPortraitWinList" @ok="getPortraitVal" />
    </a-form-item> -->
    <!-- 客户画像 -->
    <a-form-item v-else-if="record.type === 'portrait'" style="padding-right: 20px">
      <a-row type="flex" align="middle">
        <a-col :span="24" style="text-align: center">
          <img src="../FormDesign/packages/KFormItem/men.png" alt="" style="width: 75px; height: auto" />
        </a-col>
        <a-col :span="24">
          <a-row type="flex" justify="center">
            <a-col :span="2"><a-icon type="man" style="color: #722ed1" /></a-col>
            <a-col :span="4">{{ $t('36岁') }}</a-col>
            <a-col :span="2"><a-icon type="environment" style="color: #1890ff" /></a-col>
            <a-col :span="6">{{ $t('广东深圳') }}</a-col>
            <a-col :span="2"><a-icon type="star" /></a-col>
            <a-col :span="4">128</a-col>
          </a-row>
        </a-col>
        <a-col :span="24">
          <a-row type="flex" justify="center">
            <a-col :span="4" style="text-align: center"></a-col>
            <a-col :span="4" style="text-align: center"><a-button icon="edit" shape="circle" /></a-col>
            <a-col :span="4" style="text-align: center"><a-button icon="phone" shape="circle" /></a-col>
            <a-col :span="4" style="text-align: center"><a-button icon="mail" shape="circle" /></a-col>
            <a-col :span="4" style="text-align: center"><a-button icon="more" shape="circle" /></a-col>
            <a-col :span="4" style="text-align: center"></a-col>
          </a-row>
        </a-col>
        <a-divider :dashed="true" style="margin: 12px 0 6px 0" />
        <a-col :span="24">
          <a-row>
            <a-col :span="23">
              <a-icon type="tag" />
              {{ $t('客户画像') }}
            </a-col>
            <a-col :span="1"><a-icon type="edit" /></a-col>
          </a-row>
        </a-col>
        <a-col>
          <a-tag color="orange">{{ $t('男') }}</a-tag>
          <a-tag color="orange">{{ $t('线下门店') }}</a-tag>
          <a-tag color="orange">{{ $t('双子座') }}</a-tag>
          <a-tag color="orange">{{ $t('企业高管') }}</a-tag>
          <a-tag color="purple">{{ $t('月签到22天') }}</a-tag>
        </a-col>
        <a-divider :dashed="true" style="margin: 12px 0 6px 0" />
        <a-col :span="24">
          <a-row>
            <a-col :span="24">
              <a-icon type="deployment-unit" />
              {{ $t('交互数据') }}
            </a-col>
            <a-col>
              <a-tag color="purple">{{ $t('咨询 18') }}</a-tag>
              <a-tag color="purple">{{ $t('产品 6') }}</a-tag>
              <a-tag color="purple">{{ $t('投诉 1') }}</a-tag>
              <a-tag color="purple">{{ $t('订单 10') }}</a-tag>
              <a-tag color="purple">{{ $t('安装 8') }}</a-tag>
              <a-tag color="purple">{{ $t('来电 35') }}</a-tag>
              <a-tag color="purple">{{ $t('维修 1') }}</a-tag>
              <a-tag color="purple">{{ $t('不满意 0') }}</a-tag>
            </a-col>
          </a-row>
        </a-col>
        <a-col></a-col>
        <a-divider :dashed="true" style="margin: 12px 0 6px 0" />
        <a-col :span="24">
          <a-icon type="user" />
          {{ $t('联系信息') }}
        </a-col>
        <a-row type="flex" align="middle" :gutter="16">
          <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('电话1') }}</a-col>
          <a-col :span="16" style="font-size: 13px">13800138000</a-col>
          <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('电话2') }}</a-col>
          <a-col :span="16" style="font-size: 13px">13800138001</a-col>
          <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('邮箱') }}</a-col>
          <a-col :span="16" style="font-size: 13px">13800138000@163.com</a-col>
          <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('客户类别') }}</a-col>
          <a-col :span="16" style="font-size: 13px">{{ $t('普通客户') }}</a-col>
          <a-col :span="8" style="text-align: right; font-size: 13px; color: #8c8c8c">{{ $t('详细地址') }}</a-col>
          <a-col :span="16" style="font-size: 13px">{{ $t('客户的详细地址信息') }}</a-col>
        </a-row>
      </a-row>
    </a-form-item>
    <a-form-item v-else-if="record.type === 'lifeCycle'">
      <a-timeline style="margin: 20px">
        <a-timeline-item>
          <div>{{ $t('时间：2016年2月11日') }}</div>
          <div>{{ $t('事件：首次购买净水器订单，完成') }}</div>
        </a-timeline-item>
        <a-timeline-item>
          <div>{{ $t('时间：2016年2月14日') }}</div>
          <div>{{ $t('事件：上门安装，完成') }}</div>
        </a-timeline-item>
        <a-timeline-item>
          <div>{{ $t('时间：2016年5月13日') }}</div>
          <div>{{ $t('事件：新产品使用三个月体验回访，满意') }}</div>
        </a-timeline-item>
        <a-timeline-item>
          <div>{{ $t('时间：2018年12月13日') }}</div>
          <div>{{ $t('事件：上门维修，完成') }}</div>
        </a-timeline-item>
        <a-timeline-item>
          <div>{{ $t('时间：2018年12月15日') }}</div>
          <div>{{ $t('事件：维修服务回访，满意') }}</div>
        </a-timeline-item>
        <a-timeline-item>
          <div>{{ $t('时间：2019年2月13日') }}</div>
          <div>{{ $t('事件：3年老客户NPS调研回访，9分(愿意推荐)') }}</div>
        </a-timeline-item>
        <a-timeline-item>
          <div>{{ $t('时间：2020年2月13日') }}</div>
          <div>{{ $t('事件：产品到期提醒-以旧换新推荐，完成') }}</div>
        </a-timeline-item>
        <a-timeline-item>
          <div>{{ $t('时间：2020年3月8日') }}</div>
          <div>{{ $t('事件：二次购买净水器订单，完成') }}</div>
        </a-timeline-item>
      </a-timeline>
    </a-form-item>
    <!-- 分割线 -->
    <div v-else-if="record.type === 'divider' && !record.dividerText">
      <a-divider
        v-if="record.type === 'divider' && record.label !== '' && record.options.orientation"
        :orientation="record.options.orientation"
      >
        {{ $t(record.label) }}
      </a-divider>
      <a-divider v-else-if="record.type === 'divider' && record.label !== ''">{{ $t(record.label) }}</a-divider>
      <a-divider v-else-if="record.type === 'divider' && record.label === ''" style="margin: 6px 0" />
    </div>
    <h3 v-else-if="record.type === 'dividerTag'" style="display: flex; align-items: center; margin-top: 4px">
      <tag-icon />
      <span style="padding-left: 5px">{{ $t(record.label) }}</span>
    </h3>
    <!-- 办理方式配置 -->
    <div v-if="params.page === 'workflow' && parentParams.viewType !== 'view' && record.type === 'work'">
      <h3 v-if="record.workDivider === '1'" style="display: flex; align-items: center; margin-top: 4px">
        <tag-icon />
        <span style="padding-left: 5px">{{ $t('流程办理') }}</span>
      </h3>
      <a-form-item
        label="办理方式"
        :labelCol="
          record.labelShow === '0'
            ? { style: `width: 0px; display: inline-block` }
            : record.labelLocal === '1'
            ? {}
            : parentParams.labelWidth && parentParams.labelWidth !== '100'
            ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
            : labelCol
        "
        :wrapperCol="
          record.labelShow === '0'
            ? { style: `width: 100%; display: inline-block` }
            : record.labelLocal === '1'
            ? {}
            : parentParams.labelWidth && parentParams.labelWidth !== '100'
            ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
            : wrapperCol
        "
      >
        <a-radio-group
          v-decorator="[
            'handleWay',
            { initialValue: viewThis.defaultWay, rules: [{ required: true, message: $t('请选择办理方式') }] }
          ]"
        >
          <a-radio
            v-for="(wayItem, wayIndex) in params.handleWayData"
            v-show="wayItem.onoff && (wayItem.display === 'v' || !wayItem.display)"
            :key="wayIndex"
            :value="wayItem.alias"
            :checked="wayItem.checked === '1'"
            @change="handleWayChange"
          >
            {{ $t(wayItem.way) }}
          </a-radio>
        </a-radio-group>
      </a-form-item>
    </div>
    <!-- 办理备注 -->
    <a-form-item
      v-if="
        params.remarksrule !== 'hidden' &&
        record.type === 'workRemark' &&
        params.page === 'workflow' &&
        parentParams.viewType !== 'view'
      "
      :label="$t('办理备注')"
      :labelCol="
        record.labelShow === '0'
          ? { style: `width: 0px; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: ${parentParams.labelWidth}px; display: inline-block` }
          : labelCol
      "
      :wrapperCol="
        record.labelShow === '0'
          ? { style: `width: 100%; display: inline-block` }
          : record.labelLocal === '1'
          ? {}
          : parentParams.labelWidth && parentParams.labelWidth !== '100'
          ? { style: `width: calc(100% - ${parentParams.labelWidth}px); display: inline-block` }
          : wrapperCol
      "
    >
      <a-textarea
        v-decorator="[
          'handleRemarks',
          {
            initialValue: handleRemarks,
            rules: [{ required: params.remarksrule === 'show_allow' ? true : false, message: $t('办理备注不能为空') }]
          }
        ]"
        :autoSize="{ minRows: params.remarkMinRows || 1, maxRows: params.remarkMaxRows || params.remarkMinRows || 4 }"
      />
    </a-form-item>
    <!-- 关联数据 -->
    <user-table-win-list ref="userTableWinList" :key="winKey" @ok="getVal" />
    <!-- 链接查看 -->
    <UserTableForm ref="userTableForm" :key="indexKey" />
  </div>
</template>
<script>
import Vue from 'vue'
import { mapGetters } from 'vuex'
import { Rate, TreeSelect } from 'ant-design-vue'
import KFormDesign from '@/views/admin/FormDesign/packages/index'
import UserTableComponents from './UserTableComponents'
import debounce from 'lodash/debounce'
Vue.use(KFormDesign)
Vue.use(Rate)
Vue.use(TreeSelect)
export default {
  name: 'BuildBlocks',
  i18n: window.lang('admin'),
  components: {
    UserTableComponents,
    UserTableList: () => import('./UserTableList'),
    UserTableSubformList: () => import('./UserTableSubformList'),
    UserTableWinList: () => import('./UserTableWinList'),
    UserTableForm: () => import('./UserTableForm'),
    TinyMce: () => import('@/components/Editor/TinyMce'),
    AddressSelect: () => import('../Field/AddressSelect'),
    TabsSelect: () => import('../Field/TabsSelect'),
    LocationSet: () => import('@/views/admin/Field/LocationSet'),
    UserTableFormView: () => import('./UserTableFormView.vue'),
    Knowledge: () => import('@/views/crm/Knowledge'),
    TagDataPicker: () => import('@/views/admin/Tag/TagDataPicker')
  },
  props: {
    record: {
      type: Object,
      required: true
    },
    formConfig: {
      type: Object,
      default: () => ({
        customStyle: '',
        hideRequiredMark: false,
        labelCol: {
          lg: 4,
          md: 4,
          sm: 4,
          xl: 4,
          xs: 4,
          xxl: 4
        },
        layout: 'horizontal',
        wrapperCol: {
          lg: 18,
          md: 18,
          sm: 18,
          xl: 18,
          xs: 18,
          xxl: 18
        }
      }),
      required: true
    },
    config: {
      type: Object,
      default: () => ({})
    },
    dynamicData: {
      type: Object,
      default: () => { },
      required: true
    },
    viewThis: {
      type: Object,
      default: () => { }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    tableName: {
      type: String,
      default: ''
    },
    templateObj: {
      type: Object,
      default: () => { }
    },
    formdata: {
      type: Object,
      default: () => { },
      required: false
    },
    fieldRule: {
      type: Array,
      default: () => []
    },
    handleWayData: {
      type: Array,
      default: () => []
    },
    indexs: {
      type: Number,
      default () {
        return 0
      }
    },
    params: {
      type: Object,
      default () {
        return {
          tableName: '',
          parentParams: {}, // 父级的params
          template: [],
          fileList: [],
          page: '', // 传递来的页面，表单视图为'user', WorkflowHandleForm的页面可以传空值也可以传其他
          handleWayData: [], // WorkflowHandleForm的waydata
          remarksrule: '', // 办理方式show_no_allow可见选填，show_allow可见必填 hidden隐藏
          remarkMaxRows: 2, // 办理备注 文本框行高
          remarkMinRows: 1
        }
      },
      required: true
    },
    parentParams: {
      type: Object,
      default: () => { }
    },
    formThis: {
      type: Object,
      default () {
        return {}
      }
    },
    templateOther: {
      type: Array,
      default () {
        return []
      }
    },
    linkData: {
      type: Object,
      default () {
        return {}
      }
    }
  },
  data () {
    this.debounceToast = debounce(this.debounceToast, 800)
    return {
      indexKey: 'tableform',
      role: '',
      department: '',
      username: '',
      loadMore: true,
      tracespin: false,
      SHOW_PARENT: TreeSelect.SHOW_PARENT,
      SHOW_CHILD: TreeSelect.SHOW_CHILD,
      labelCol: { style: 'width: 104px; display: inline-block' },
      wrapperCol: { style: 'width: calc(100% - 104px); display: inline-block' },
      // 用于定制开发作数据交换时使用，自定义组件时使用parent.$set(parent.data, 'mydata', 'hello')
      viewData: {},
      linkDataEffect: {}, // 数据联动
      wayData: [],
      handleWayDataOther: [],
      cascaderState: {},
      addressValue: {},
      pageLoading: false,
      values: {},
      defaultWay: '',
      traceData: [],
      handleRemarks: '',
      imagePreviewVisible: false, // 图片预览
      portraitForm: this.$form.createForm(this),
      imagePreviewUrl: '',
      alias: '', // 鼠标进入的字段
      type: '', // 鼠标进入的字段的类型
      nowloading: false,
      coms: null,
      traceParameter: {
        pageNo: 1,
        pageSize: 10,
        sortField: 'id',
        sortOrder: 'descend'
      },
      columnsMark: [{
        title: this.$t('变更字段'),
        dataIndex: 'fieldName',
        width: 300
      }, {
        title: this.$t('变更前'),
        dataIndex: 'before',
        width: 400,
        customRender: (text, record, index) => {
          if (text) {
            return text
          } else {
            return '--'
          }
        }
      }, {
        title: this.$t('变更后'),
        dataIndex: 'after',
        customRender: (text, record, index) => {
          if (text) {
            return text
          } else {
            return '--'
          }
        }
      }],
      typeActions: new Map([[
        '', value => value
      ], [
        'text', (value) => value.target ? value.target.value : value
      ], [
        'textarea', (value) => value.target ? value.target.value : value
      ], [
        'datetime', (time, timeString) => timeString
      ], [
        'combobox', (value) => value
      ], [
        'radio', (value) => value.target ? value.target.value : value
      ], [
        'checkbox', (value) => value
      ], [
        'number', (value) => value
      ], [
        'cascader', (value) => value
      ], [
        'switch', (value) => String(value)
      ], [
        'autocomplete', (value) => value
      ], [
        'score', (value) => value
      ], [
        'address', (value) => value
      ], [
        'treeselect', (value) => value
      ], [
        'serialnumber', (value) => value
      ], [
        'tag', (value) => value
      ], [
        'organization', (value) => value
      ]]),
      actions: new Map([[
        '', function (value, inputValue) {
          return true
        }], [
        'contain', function (value, inputValue, allValue, all) {
          if (all) {
            if (all.indexOf(value) !== -1 && inputValue) {
              return true
            } else if (all.indexOf(value) === -1) {
              return false
            }
          } else if (inputValue.indexOf(value) === -1) {
            return false
          } else if (inputValue.indexOf(value) !== -1) {
            return true
          }
        }], [
        'nc', function (value, inputValue, allValue, all) {
          if (all) {
            if (all.indexOf(allValue) === -1) {
              return true
            } else if (all.indexOf(allValue) !== -1) {
              return false
            }
          } else if (inputValue.indexOf(value) !== -1) {
            return false
          } else if (inputValue.indexOf(value) === -1) {
            return true
          }
        }], [
        'equal', function (value, inputValue) {
          if (inputValue === value) {
            return true
          } else {
            return false
          }
        }], [
        'great', function (value, inputValue) {
          if (inputValue > value) {
            return true
          } else {
            return false
          }
        }], [
        'ne', function (value, inputValue) {
          if (inputValue && inputValue !== value) {
            return true
          } else {
            return false
          }
        }], [
        'lt', function (value, inputValue) {
          if (inputValue < value) {
            return true
          } else {
            return false
          }
        }], [
        'ge', function (value, inputValue) {
          if (inputValue > value || inputValue === value) {
            return true
          } else {
            return false
          }
        }], [
        'le', function (value, inputValue) {
          if (inputValue < value || inputValue === value) {
            return true
          } else {
            return false
          }
        }], [
        'bw', function (value, inputValue) {
          if (inputValue.indexOf(value) === 0) {
            return true
          } else {
            return false
          }
        }], [
        'ew', function (value, inputValue) {
          const len = value.length
          if (inputValue.slice(-len) === value) {
            return true
          } else {
            return false
          }
        }]]),
      queryParamLog: {
        pageSize: 20,
        pageNo: 1,
        operation: this.record.screenDefault
      },
      queryParamUrge: {},
      colLayoutLog: { xs: 24, sm: 24, md: 12, lg: 12, xl: 8, xxl: 6 },
      colLayoutUrge: { xs: 24, sm: 24, md: 12, lg: 12, xl: 8, xxl: 6 },
      advancedLog: false,
      logVisible: false,
      // 流程日志表头
      columnsLog: [{
        title: 'ID',
        dataIndex: 'id',
        width: 64
      }, {
        title: this.$t('任务名称'),
        dataIndex: 'logTitle'
      }, {
        title: this.$t('办理人'),
        dataIndex: 'inputUser',
        ellipsis: false,
        scopedSlots: { customRender: 'username' }
      }, {
        title: this.$t('办理部门'),
        dataIndex: 'inputDepartment',
        ellipsis: false
      }, {
        title: this.$t('办理时间'),
        dataIndex: 'inputTime'
      }, {
        title: this.$t('办理方式'),
        dataIndex: 'type'
      }, {
        title: this.$t('办理备注'),
        dataIndex: 'content',
        ellipsis: false,
        width: 280,
        scopedSlots: { customRender: 'content' }
      }],
      advancedUrge: false,
      // 催办日志表头
      columnsUrge: [{
        title: 'ID',
        dataIndex: 'id',
        width: 60
      }, {
        title: this.$t('催办人'),
        dataIndex: 'urgeUser',
        width: 100
      }, {
        title: this.$t('催办时间'),
        dataIndex: 'urgeTime',
        width: 150
      }, {
        title: this.$t('催办流程节点'),
        dataIndex: 'urgeTitle',
        width: 120
      }, {
        title: this.$t('被催办人'),
        dataIndex: 'username',
        ellipsis: false,
        width: 150,
        scopedSlots: { customRender: 'username' }
      }, {
        title: this.$t('催办原因'),
        dataIndex: 'urgeReason',
        width: 150
      }, {
        title: this.$t('催办备注'),
        ellipsis: false,
        dataIndex: 'urgeRemarks',
        scopedSlots: { customRender: 'urgeRemarks' }
      }, {
        title: this.$t('催办后完成时效'),
        dataIndex: 'finishEfective',
        width: 120
      }],
      data: [],
      wayRuleAlias: [], // 转部门字段
      userKey: 'user',
      winKey: 'winKey',
      departmentKey: 0,
      timeout: null,
      tagData: [],
      aliasKey: '',
      selectTimeout: null,
      flowLogList: [], // 流程日志列表
      flowLogLoading: false,
      flowlogLoadMore: false,
      processStatusDict: [],
      processSubStatusDict: []
    }
  },
  computed: {
    ...mapGetters(['userInfo', 'setting'])
  },
  watch: {
    record: {
      handler (newVal) {
        if (newVal.field && newVal.field.formType === 'tag') {
          this.tagData = newVal.field.value
          // } else if (newVal.type === 'portrait') {
          //   const obj = {}
          //   const getTemplate = (array) => {
          //     array.forEach((item, index) => {
          //       if (item.columns) {
          //         getTemplate(item.columns)
          //       } else if (item.trs) {
          //         getTemplate(item.trs)
          //       } else if (item.tds) {
          //         getTemplate(item.tds)
          //       } else if (item.list) {
          //         getTemplate(item.list)
          //       } else {
          //         if (item.field && (item.field.alias === 'glkhbh' || item.field.alias === 'khbh' || item.field.alias === 'khdh1')) {
          //           obj[item.field.alias] = item.field.value
          //         }
          //       }
          //     })
          //   }
          //   getTemplate(this.viewThis.template)
          //   this.record.loading = true
          //   this.axios({
          //     url: 'admin/userTable/init',
          //     data: {
          //       sortField: 'id',
          //       sortOrder: 'descend',
          //       pageNo: 1,
          //       pageSize: 30,
          //       associated: [],
          //       customColumns: [],
          //       searchString: {
          //         khbh: obj.glkhbh || obj.khbh || 'XXXXXX',
          //         khdh1: obj.khdh1
          //       },
          //       tplviewid: '069d7670919b354b9576cd619604a96f'
          //     }
          //   }).then(res => {
          //     if (res.result.data[0]) {
          //       this.$set(this.record, 'enable', false)
          //       this.record.enable = false
          //       this.record.data = res.result.data[0]
          //       this.$set(this.record, 'loading', false)
          //       this.record.action = 'edit'
          //       this.$forceUpdate()
          //     } else {
          //       this.$set(this.record, 'enable', true)
          //       this.$forceUpdate()
          //       this.record.action = 'add'
          //       this.axios({
          //         url: 'admin/userTable/add',
          //         data: {
          //           action: 'add',
          //           listTplviewid: '069d7670919b354b9576cd619604a96f',
          //           tplviewid: '414e1bd4120df8786b035a9d160d0f87'
          //         }
          //       }).then(res => {
          //         if (obj.khdh1) {
          //           const getPortrait = (array) => {
          //             array.forEach((item, index) => {
          //               if (item.columns) {
          //                 getPortrait(item.columns)
          //               } else if (item.trs) {
          //                 getPortrait(item.trs)
          //               } else if (item.tds) {
          //                 getPortrait(item.tds)
          //               } else if (item.list) {
          //                 getPortrait(item.list)
          //               } else {
          //                 if (item.field && item.field.alias === 'khdh1') {
          //                   item.field.value = obj.khdh1
          //                 } else if (item.field && item.field.alias === 'khjb') {
          //                   item.field.value = 'ptkh'
          //                 } else if (item.field && item.field.alias === 'shifu_md') {
          //                   item.field.value = 'f'
          //                 }
          //               }
          //             })
          //           }
          //           getPortrait(res.result.template)
          //         }
          //         this.record.params = res.result
          //         this.$set(this.record, 'loading', false)
          //         this.$forceUpdate()
          //       })
          //     }
          //     this.$forceUpdate()
          //   })
        }
      },
      immediate: true
    }
  },

  created () {
    this.data = this.fieldRule
    if (this.record.field && this.record.formType === 'organization') {
      const optionCustom = this.record.field.setting.form && this.record.field.setting.form.optionCustom ? JSON.parse(JSON.stringify(this.record.field.setting.form.optionCustom)) : []
      const optionType = this.record.field.setting.form.optionType
      const optionName = optionType === 'role' ? 'roleId' : (optionType === 'user' ? 'username' : 'departmentId')
      let optionData = []
      if (this.record.field.option) {
        optionData = JSON.parse(JSON.stringify(this.record.field.option))
        optionData.forEach(item => {
          const obj = {}
          obj[optionName] = item.value
          obj.label = item.label

          if (optionCustom.every(opItem => opItem[optionName] !== item.value)) {
            optionCustom.push(obj)
          }
        })
      }
      const option = optionData.map(item => {
        const obj = item
        obj.key = item[optionName]
        return obj
      })
      this.$set(this.record.field, 'option', option)
      const value = this.record.field.value || []
      if (typeof (value) === 'string') {
        if (optionCustom.length > 0 && optionCustom.isArray) {
          this.record.field.value = optionCustom.some(optionItem => {
            return optionItem[optionName] === value
          }) ? this.record.field.value : ''
        }
      } else {
        this.record.field.value = value.filter(valueItem => {
          return optionCustom.some(optionItem => {
            return optionItem[optionName] === valueItem
          })
        })
      }
    } else if (this.record.field && this.record.field.formType === 'checkbox') {
      this.record.indeterminate = false
      this.record.checkAll = false
      if (!this.record.field.value) this.record.field.value = []
      this.record.field.value.forEach(valItem => {
        if (this.record.field.option.some(opItem => opItem.value === valItem)) {
          this.record.indeterminate = true
        }
      })
      this.record.checkedList = this.record.field.value
      this.record.optionValue = this.record.field.option.map(item => item.value)
      if (JSON.stringify(this.record.field.value) === JSON.stringify(this.record.optionValue)) {
        this.record.checkAll = true
        this.record.indeterminate = false
      }
    } else if (this.record.type === 'formmark' && this.parentParams.action === 'edit') {
      this.axios({
        url: '/admin/userTable/getFieldTraceData',
        data: Object.assign(this.traceParameter, { tableName: this.tableName, id: this.parentParams.record.id })
      }).then(res => {
        res.result.data.forEach(item => {
          item.setting = JSON.parse(item.setting)
        })
        this.traceData = res.result.data
        this.traceParameter.pageNo++
      })
    } else if (this.record.field && ['file', 'image'].includes(this.record.formType)) {
      this.record.field.value = this.record.field.value.map(valItem => {
        const obj = valItem
        obj.url = process.env.VUE_APP_API_BASE_URL + 'admin/api/download/?filePath=' + obj.url
        return obj
      })
    } else if (this.record.field && this.record.field.formType === 'combobox' && !['dictionaryBack', 'linkData', 'addressBookBack'].includes(this.record.field.setting.attribute.dataSource)) {
      if (this.record.field.setting.attribute.mode === 'default' && this.record.field.option) {
        if (this.record.field.option.every(item => item.value !== this.record.field.value)) {
          this.record.field.value = undefined
        }
      } else if (this.record.field.value) {
        const value = []
        this.record.field.value.forEach(item => {
          if (this.record.field.option && this.record.field.option.some(opItem => opItem.value === item)) {
            value.push(item)
          }
        })
        this.record.field.value = value
      }
    } else if (this.record.field && this.record.field.formType === 'tag') {
      this.tagData = this.record.field.value || []
    } else if (this.record.type === 'component') {
      this.coms = () => import('@/views/' + this.record.filePath)
    } else if (this.record.field && this.record.field.formType === 'radio') {
      if (
        this.record.field.value &&
        this.record.field.option &&
        this.record.field.option.length &&
        this.record.field.option.every(item => item.value !== this.record.field.value)
      ) {
        this.record.field.value = undefined
      }
    } else if (this.record.field &&
      this.record.field.formType === 'text' &&
      this.record.field.setting.form.suffixIcon &&
      this.record.field.setting.form.suffixIcon.indexOf('custom') !== -1) {
      this.record.field.setting.form.suffixAttributeClick.custom = {
        template: `<span>${this.record.field.setting.form.suffixAttributeClick.custom}</span>`,
        data: () => {
          return {
            parent: this,
            viewThis: this.viewThis
          }
        }
      }
    } else if (this.record.type === 'flowlog' && this.record.showType === 'card') {
      this.getFlowLog()
    }
  },
  methods: {
    // 表单赋值方法
    giveData (obj, addressValue, alias) {
      this.$emit('give', obj, addressValue, alias)
    },
    // 改变template内容方法
    changeTem (item) {
      this.$emit('changeTem', item)
    },
    // 实现表单规则
    templateRule (item) {
      this.$emit('templateRule', item)
    },
    // 表单规则恢复
    recoveryRule (item) {
      this.$emit('recoveryRule', item)
    },
    // 事件触发实现
    sendEvent (eventName, alias, options1, options2) {
      this.$emit('sendEvent', eventName, alias, options1, options2)
    },
    getRuleAlias (data) {
      this.$emit('getRuleAlias', data)
    },
    // 办理方式表单规则实现
    wayRule (item) {
      this.$emit('wayRule', item)
    },
    // 重置办理方式表单规则
    resetTem (resetTem) {
      this.$emit('resetTem', resetTem)
    },
    // 数据联动
    sentLinkData (alias, option) {
      this.$emit('sentLinkData', alias, option)
    },
    // 页面回显图片
    normFile (e) {
      if (Array.isArray(e)) {
        return e
      }
      if (e.fileList.length > 0 && e.fileList.every(item => item.response)) {
        e.fileList = e.fileList.filter(item => item.response && item.response.code === 0)
      }
      return e && e.fileList
    },
    // 链接查看
    getLinkList (item) {
      const tableId = item.field.setting.autofill.source[1]
      const field = item.field.setting.autofill.sourceField
      const value = item.field.value
      const tplviewid = item.field.setting.autofill.sourceLinkView
      this.viewThis.pageLoading = true
      this.axios({
        url: '/admin/userTable/getLinkRecord',
        data: { tableId, field, value }
      }).then(res => {
        this.viewThis.pageLoading = false
        if (res.result.data && res.result.data.id) {
          this.indexKey = this.indexKey === 'tableform' ? 'tableform_1' : 'tableform'
          this.$nextTick(() => {
            this.$refs.userTableForm.show({
              linkRecord: true,
              sourceStatus: item.field.setting.autofill.sourceStatus,
              tpl: tplviewid,
              record: res.result.data,
              title: this.$t('详情'),
              url: '/admin/userTable/edit',
              width: '1200'
            })
          })
        } else {
          this.$message.error(this.$t('未查找到对应数据'))
        }
      })
    },
    // 流程日志
    loadDataLog (parameter) {
      const queryParam = JSON.parse(JSON.stringify(this.queryParamLog))
      if (this.queryParamLog.inputTime && this.queryParamLog.inputTime.length) {
        queryParam.inputTime = this.queryParamLog.inputTime.map(item => {
          return this.moment(item).format('YYYY-MM-DD HH:mm:ss')
        })
      }
      return this.axios({
        url: '/admin/centerflow/workflowLog',
        data: Object.assign(queryParam, parameter, { caseId: this.parentParams.caseId })
      }).then(res => {
        if (parameter.pageNo === 1) {
          this.processStatusDict = res.result.processStatusDict
          this.processSubStatusDict = res.result.processSubStatusDict
          if (res.result.currentLog) {
            res.result.currentLog.type = 'current'
            res.result.data.unshift(res.result.currentLog)
          } else if (res.result.finishLog) {
            res.result.finishLog.type = 'finish'
            res.result.data.unshift(res.result.finishLog)
          }
        }
        for (const i in res.result.data) {
          res.result.data[i]['logTitle'] = res.result.data[i].title
        }
        return res.result
      })
    },
    getFlowLog (type) {
      this.flowLogLoading = true
      if (type) {
        this.flowLogList = []
      }
      const queryParam = JSON.parse(JSON.stringify(this.queryParamLog))
      if (this.queryParamLog.inputTime && this.queryParamLog.inputTime.length) {
        queryParam.inputTime = this.queryParamLog.inputTime.map(item => {
          return this.moment(item).format('YYYY-MM-DD HH:mm:ss')
        })
      }
      this.axios({
        url: '/admin/centerflow/workflowLog',
        data: Object.assign(queryParam, { caseId: this.parentParams.caseId || this.parentParams.record?.case_id })
      }).then(res => {
        res.result.data.forEach(item => {
          if (item.logAttachment) {
            item.logAttachment = JSON.parse(item.logAttachment)
          } else {
            item.logAttachment = []
          }
        })
        this.flowLogLoading = false
        if (res.result.data.length) {
          this.flowLogList = [...this.flowLogList, ...res.result.data]
        }
        if (res.result.totalCount > (this.queryParamLog.pageSize * this.queryParamLog.pageNo)) {
          this.flowlogLoadMore = true
        }
        if (this.queryParamLog.pageNo === 1) {
          this.processStatusDict = res.result.processStatusDict
          this.processSubStatusDict = res.result.processSubStatusDict
          if (res.result.currentLog) {
            res.result.currentLog.type = 'current'
            this.flowLogList.unshift(res.result.currentLog)
          } else if (res.result.finishLog) {
            res.result.finishLog.type = 'finish'
            this.flowLogList.unshift(res.result.finishLog)
          }
        }
      })
    },
    flowlogLoadMoreList () {
      this.queryParamLog.pageNo++
      this.getFlowLog()
    },
    // 流程催办日志
    loadDataUrge (parameter) {
      return this.axios({
        url: '/admin/centerflow/workflowUrgeLog',
        data: Object.assign(parameter, this.queryParamLog, { caseId: this.parentParams.caseId })
      }).then(res => {
        for (const i in res.result.data) {
          res.result.data[i]['urgeTitle'] = res.result.data[i].title
        }
        return res.result
      })
    },
    // 图片预览
    handleImagePreview (item, file) {
      let fileList = []
      let idx = 0
      fileList = item.field.initValue ? item.field.initValue : item.field.value
      fileList.forEach((item, index) => {
        if (item.uid === file.uid) {
          idx = index
        }
      })
      const name = '.' + item.field.alias
      const viewer = this.$el.querySelector(name).$viewer
      viewer.view(idx)
    },
    // 附件限制条件
    beforeUpload (file, fileList, item) {
      return new Promise((resolve, reject) => {
        const fileType = this.record.field.setting.form.format || (this.record.formType === 'image' ? '.png,.jpg,.jpeg,.gif,.bmp' : '.png,.jpg,.jpeg,.gif,.bmp,.flv,.swf,.mkv,.avi,.rm,.rmvb,.mpeg,.mpg,.ogg,.ogv,.mov,.wmv,.mp4,.webm,.mp3,.wav,.mid,.rar,.zip,.tar,.gz,.7z,.bz2,.cab,.iso,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf,.txt,.md,.xml')
        const suffix = file.name.substring(file.name.lastIndexOf('.'), file.name.length)
        if (!fileType.includes(suffix)) {
          this.$message.error(this.$t('上传文件格式错误'))
          return reject(file)
        }
        let isLt2M = true
        if (item.field.setting.form && item.field.setting.form.size) {
          isLt2M = file.size / 1024 / 1024 < item.field.setting.form.size
        }
        if (!isLt2M) {
          const message = this.$t('上传文件大小超过{0}', { 0: item.field.setting.form.size })
          this.$message.error(message)
          return reject(file)
        }
        return resolve(file)
      })
    },
    // 多选框选择全部
    onCheckAll (e, item, index) {
      item.checkAll = e.target.checked
      item.checkedList = e.target.checked ? item.optionValue : []
      item.indeterminate = false
      const obj = {}
      obj['record' + '[' + item.field.alias + ']'] = item.checkedList
      this.$emit('give', obj)
    },
    // 多选框选择单个
    onCheck (value, item) {
      this.$set(item, 'indeterminate', !!value.length && !!item.optionValue && value.length < item.optionValue.length)
      this.$set(item, 'checkAll', !!item.optionValue && value.length === item.optionValue.length)
    },
    // 自动完成
    onSearch (item, value) {
      value = value.trim()
      if (item.field.setting.attribute.dataSource !== 'custom') {
        if (value) {
          clearTimeout(item.timeoutId)
          item.timeoutId = setTimeout(() => {
            this.axios({
              url: '/admin/userTable/getAutocompleteData/',
              data: { fieldId: item.fieldId, search: value }
            }).then(res => {
              item.field.setting.form.customDataList = res.result.option
              this.$emit('changeTem', item)
            })
          }, 500)
        } else {
          item.field.setting.form.customDataList = []
          this.$emit('changeTem', item)
        }
      }
    },
    getAddress (name, number, alias, allValue) {
      const obj = {}
      obj[alias] = name
      this.addressValue[alias] = number
      this.$emit('give', obj, number, alias)
      this.onChange(this.record, this.record.field.formType, number, '', allValue)
    },
    // 地址选择必填级数
    checkRequired (rule, value, callback) {
      const index = this.record.field.setting.form.reqSeries
      const string = this.$t('地址选择级数不得小于{0}', { 0: index })
      const array = value.split('/')
      if (array.length < Number(index)) {
        callback(string)
      } else {
        callback()
      }
    },
    checkleaf (rule, value, callback) {
      const str = this.$t('请选择至最后一级')
      if (this.cascaderState[rule.field]) {
        callback(str)
      } else {
        callback()
      }
    },
    getcascaderValue (val, alias, name, state, allValue) {
      const obj = {}
      obj[alias] = val
      this.cascaderState[alias] = state
      this.$emit('give', obj)
      this.onChange(this.record, this.record.field.formType, val, '', allValue)
    },
    // 数据联动
    getLinkData (alias, inputValue, type, item, flag) {
      if (item.aliasKey) {
        const formData = this.viewThis.form.getFieldsValue()['record']['product_' + item.aliasKey]
        const obj = {}
        const getLink = (string) => {
          for (const i in this.linkData) {
            if (this.linkData[i].currentFieldEffect === string) {
              obj[this.linkData[i].sourceFieldCause] = formData[this.linkData[i].currentFieldCause]
              getLink(this.linkData[i].currentFieldCause)
            }
          }
        }
        getLink(item.field.beforeAlias)
        const clearOption = (string, string1) => {
          if (string) {
            const getTemplate = (array) => {
              array.forEach((temItem, index) => {
                if (temItem.columns) {
                  getTemplate(temItem.columns)
                } else if (temItem.trs) {
                  getTemplate(temItem.trs)
                } else if (temItem.tds) {
                  getTemplate(temItem.tds)
                } else if (temItem.list) {
                  getTemplate(temItem.list)
                } else {
                  if (temItem.field && temItem.field.alias === (string + '_' + item.aliasKey)) {
                    this.$set(temItem.field, 'option', [])
                    const objData = {}
                    objData['record' + '[product_' + item.aliasKey + ']' + '[' + string + ']'] = undefined
                    this.viewThis.form.setFieldsValue(objData)
                    if (this.linkData[string]) {
                      clearOption(this.linkData[string].currentFieldEffect)
                    }
                  }
                }
              })
            }
            getTemplate(this.viewThis.template)
          }
        }
        if (this.viewThis.num > 2) {
          clearOption(this.linkData[item.field.beforeAlias].currentFieldEffect)
        }
        if (inputValue) {
          const where = this.getWhere(this.linkData[item.field.beforeAlias].sourceFieldCause, inputValue, type)
          this.axios({
            url: '/admin/userTable/getLinkageData',
            data: {
              where: Object.assign(obj, where),
              field: this.linkData[item.field.beforeAlias].sourceFieldEffect,
              tableId: this.linkData[item.field.beforeAlias].dataSource[this.linkData[item.field.beforeAlias].dataSource.length - 1]
            }
          }).then(res => {
            const getTemplate = (array) => {
              array.forEach((temItem, index) => {
                if (temItem.columns) {
                  getTemplate(temItem.columns)
                } else if (temItem.trs) {
                  getTemplate(temItem.trs)
                } else if (temItem.tds) {
                  getTemplate(temItem.tds)
                } else if (temItem.list) {
                  getTemplate(temItem.list)
                } else {
                  if (temItem.field && temItem.field.alias === (this.linkData[item.field.beforeAlias].currentFieldEffect + '_' + item.aliasKey)) {
                    this.$set(temItem.field, 'option', res.result.option)
                  }
                }
              })
            }
            getTemplate(this.viewThis.template)
          })
        } else {
          this.clearOptionKey(item.field.beforeAlias, item.aliasKey)
        }
      } else {
        const formData = this.viewThis.form.getFieldsValue()
        const obj = {}
        const getLink = (string) => {
          for (const i in this.linkData) {
            if (this.linkData[i].currentFieldEffect === string) {
              obj[this.linkData[i].sourceFieldCause] = formData['record'][this.linkData[i].currentFieldCause]
              getLink(this.linkData[i].currentFieldCause)
            }
          }
        }
        getLink(alias)
        const clearOption = (string, string1) => {
          if (string) {
            const getTemplate = (array) => {
              array.forEach((temItem, index) => {
                if (temItem.columns) {
                  getTemplate(temItem.columns)
                } else if (temItem.trs) {
                  getTemplate(temItem.trs)
                } else if (temItem.tds) {
                  getTemplate(temItem.tds)
                } else if (temItem.list) {
                  getTemplate(temItem.list)
                } else {
                  if (temItem.field && temItem.field.alias === string) {
                    this.$set(temItem.field, 'option', [])
                    const objData = {}
                    objData['record' + '[' + string + ']'] = undefined
                    this.viewThis.form.setFieldsValue(objData)
                    if (this.linkData[string]) {
                      clearOption(this.linkData[string].currentFieldEffect)
                    }
                  }
                }
              })
            }
            getTemplate(this.viewThis.template)
          }
        }
        if (this.viewThis.num > 2) {
          clearOption(this.linkData[alias].currentFieldEffect)
        }
        if (inputValue) {
          if (this.linkData[alias] && !this.linkData[alias].sourceFieldEffect) {
            if (item) {
              this.axios({
                url: '/admin/search/dictSearch',
                data: { dictCategoryNumber: item.src }
              }).then(res => {
                const effect = this.linkData[alias].currentFieldEffect
                const effectIndex = this.templateObj[effect] ? this.templateObj[effect].index : -1
                if (effectIndex !== -1) {
                  this.$emit('sentLinkData', effect, res.result.option)
                }
              })
            }
          } else {
            const formData = this.viewThis.form.getFieldsValue()['record']
            const defaultEffect = this.viewThis.defaultLinkData[alias].currentFieldEffect
            if (flag && !formData[defaultEffect]) {
              const where = this.getWhere(this.viewThis.defaultLinkData[alias].sourceFieldCause, inputValue, type)
              this.axios({
                url: '/admin/userTable/getLinkageData',
                data: {
                  where: where,
                  dataSource: false,
                  field: this.viewThis.defaultLinkData[alias].sourceFieldEffect,
                  tableId: this.viewThis.defaultLinkData[alias].dataSource[this.viewThis.defaultLinkData[alias].dataSource.length - 1]
                }
              }).then(res => {
                if (res.result.value) {
                  const obj = {}
                  obj['record' + '[' + this.viewThis.defaultLinkData[alias].currentFieldEffect + ']'] = res.result.value
                  this.viewThis.form.setFieldsValue(obj)
                }
              })
            } else if (this.linkData[alias]) {
              const where = this.getWhere(this.linkData[alias].sourceFieldCause, inputValue, type)
              this.axios({
                url: '/admin/userTable/getLinkageData',
                data: {
                  where: where,
                  dataSource: true,
                  field: this.linkData[alias].sourceFieldEffect,
                  tableId: this.linkData[alias].dataSource[this.linkData[alias].dataSource.length - 1]
                }
              }).then(res => {
                // 结果
                const effect = this.linkData[alias].currentFieldEffect
                const effectIndex = this.templateObj[effect] ? this.templateObj[effect].index : -1
                if (effectIndex !== -1) {
                  this.$emit('sentLinkData', effect, res.result.option)
                }
              })
            }
          }
        } else {
          this.clearOption(alias)
        }
      }
    },
    // 数据联动获取where
    getWhere (alias, value, type) {
      const that = this
      const result = {}
      result[alias] = value
      if (this.linkDataEffect[alias]) {
        getRes(alias)
      }
      function getRes (alias) {
        const causeAlias = that.linkDataEffect[alias].currentFieldCause
        const value = type === 'change' ? that.formdata[causeAlias] : that.templateObj[causeAlias].field.value
        result[causeAlias] = value
        if (that.linkDataEffect[causeAlias]) {
          getRes(causeAlias)
        }
      }
      return result
    },
    // cause字段清空数据时，清除effect字段的option
    clearOption (alias) {
      if (this.linkData[alias]) {
        const effect = this.linkData[alias].currentFieldEffect
        const effectIndex = this.templateObj[effect] ? this.templateObj[effect].index : -1
        if (effectIndex !== -1) {
          const obj = {}
          obj['record' + '[' + effect + ']'] = undefined
          this.$emit('give', obj)
          this.$emit('sentLinkData', effect, [])
        }
        if (this.linkData[effect]) {
          this.clearOption(effect)
        }
      }
    },
    clearOptionKey (alias, key) {
      const effect = this.linkData[alias].currentFieldEffect
      const getTemplate = (array) => {
        array.forEach((temItem, index) => {
          if (temItem.columns) {
            getTemplate(temItem.columns)
          } else if (temItem.trs) {
            getTemplate(temItem.trs)
          } else if (temItem.tds) {
            getTemplate(temItem.tds)
          } else if (temItem.list) {
            getTemplate(temItem.list)
          } else {
            if (temItem.field && temItem.field.alias === (effect + '_' + key)) {
              this.$set(temItem.field, 'option', [])
              const objData = {}
              objData['record' + '[product_' + key + ']' + '[' + effect + ']'] = undefined
              this.viewThis.form.setFieldsValue(objData)
            }
          }
        })
      }
      getTemplate(this.viewThis.template)
      if (this.linkData[effect]) {
        this.clearOptionKey(effect, key)
      }
    },
    getOption (item, value) {
      if (item.field.setting.form.loadMode === 'dynamic') {
        clearTimeout(this.selectTimeout)
        this.selectTimeout = setTimeout(() => {
          const src = item.field.setting.form.src
          if (value) {
            this.axios({
              url: '/admin/search/dictSearch',
              data: {
                dictCategoryNumber: src,
                searchName: value
              }
            }).then(res => {
              item.field.option = res.result
              this.$emit('changeTem', item)
            })
          } else {
            item.field.option = []
            this.$emit('changeTem', item)
          }
        }, 300)
      } else if (item.field.setting.attribute.dataSource === 'otherTable') {
        clearTimeout(this.selectTimeout)
        this.selectTimeout = setTimeout(() => {
          const form = item.field.setting.form
          if (value) {
            this.axios({
              url: '/admin/userTable/getAnyTableData',
              data: {
                tableId: form.otherTable[1],
                fieldName: form.otherTableField,
                condition: value
              }
            }).then(res => {
              item.field.option = res.result
            })
          } else {
            item.field.option = []
          }
        }, 300)
      }
    },
    getConditionFlag (logic, conditionFlagArr) {
      if (logic === 'and') {
        return conditionFlagArr.every(item => {
          return item
        })
      } else {
        return conditionFlagArr.some(item => {
          return item
        })
      }
    },
    handleSimple (include, value, inputValue, allValue, all) {
      const action = this.actions.get(`${include}`)
      return action(value, inputValue, allValue, all)
    },
    // 选择办理方式
    handleWayChange (e) {
      const value = e.target.value
      let id = ''
      this.viewThis.nowHandleWay = value
      this.handleWayData.forEach(item => {
        if (item.alias === value) {
          id = item.id
        }
      })
      this.handleWayProRule(id)
    },
    // 办理流程方式配置规则
    handleWayProRule (value) {
      const wayDataRule = this.params.wayDataRule
      const wayRuleAlias = []
      this.handleWayData.forEach(item => {
        if (item.id === value) {
          wayDataRule.forEach(wayItem => {
            const wayTrue = !wayItem.simpleCondition.some(someItem => someItem.fieldUser === 'notSet')
            const currentTrue = wayItem.simpleCondition.length === 1 && ['currentUser', 'currentDepartment', 'currentRole'].includes(wayItem.simpleCondition[0].fieldUser)
            if (wayTrue && !currentTrue) {
              const simpleFlagArr = []
              wayItem.simpleCondition.forEach(simItem => {
                if (simItem.fieldUser === 'way') {
                  simItem.flag = simItem.way === item.alias
                } else if (simItem.fieldUser === 'currentUser') {
                  const conditionFlagArr = []
                  simItem.condition.forEach(myitem => {
                    const flag = this.handleUserSimple(this.userInfo.username, myitem.value, simItem.include)
                    conditionFlagArr.push(flag)
                  })
                  simItem.flag = this.getConditionFlag(simItem.logic, conditionFlagArr)
                } else if (simItem.fieldUser === 'currentDepartment') {
                  const conditionFlagArr = []
                  simItem.condition.forEach(myitem => {
                    const flag = this.handleUserSimple(this.userInfo.departmentId, myitem.value, simItem.include)
                    conditionFlagArr.push(flag)
                  })
                  simItem.flag = this.getConditionFlag(simItem.logic, conditionFlagArr)
                } else if (simItem.fieldUser === 'currentRole') {
                  const conditionFlagArr = []
                  simItem.condition.forEach(myitem => {
                    const flag = this.handleUserSimple(this.userInfo.roleId, myitem.value, simItem.include)
                    conditionFlagArr.push(flag)
                  })
                  simItem.flag = this.getConditionFlag(simItem.logic, conditionFlagArr)
                } else if (simItem.fieldUser === 'notSet') {
                  simItem.flag = true
                } else {
                  const conditionFlagArr = []
                  simItem.condition.forEach(myitem => {
                    if (simItem.formType === 'number') {
                      myitem.value = Number(myitem.value)
                    } else if (simItem.formType === 'organization') {
                      myitem.value = myitem.options ? myitem.options[0].value : myitem.value
                    }
                    const formData = this.viewThis.form.getFieldsValue()['record']
                    const inputValue = formData[simItem.field]
                    const allValue = ''
                    const flag = this.handleSimple(myitem.include, myitem.value, inputValue, myitem.allValue, allValue)
                    conditionFlagArr.push(flag)
                  })
                  simItem.flag = this.getConditionFlag(item.logic, conditionFlagArr)
                }
                simpleFlagArr.push(simItem.flag)
              })
              wayItem.flag = this.getConditionFlag(wayItem.logic, simpleFlagArr)
              if (wayItem.flag) {
                item.resetTem = []
                const rest = []
                wayItem.event.forEach(eventItem => {
                  if (eventItem.type === 'field') {
                    rest.push(eventItem.field)
                    this.templateOther.forEach(otherItem => {
                      if (otherItem.value === eventItem.field) {
                        wayRuleAlias.push(eventItem.field)
                      }
                    })
                    this.$emit('wayRule', eventItem)
                  }
                })
                if (wayItem.event.some(someItem => someItem.type !== 'way')) {
                  item.resetTem = rest
                }
              }
            }
          })
        } else {
          if (item.resetTem) {
            this.$emit('resetTem', item.resetTem)
          }
        }
      })
      this.wayRuleAlias = [...new Set(wayRuleAlias)]
      this.$emit('getRuleAlias', wayRuleAlias)
    },
    // 判断当前用户，用户所在部门，所属于角色
    handleUserSimple (current, conditionValue, include) {
      if (include === 'bl' || !include) {
        if (conditionValue.indexOf(current) !== -1) {
          return true
        } else {
          return false
        }
      } else {
        if (conditionValue.indexOf(current) !== -1) {
          return false
        } else {
          return true
        }
      }
    },
    copyForm (alias) {
      const value = this.viewThis.form.getFieldValue('record' + '[' + alias + ']')
      const that = this
      this.$copyText(value).then(function (e) {
        that.$message.success(that.$t('复制成功'))
      }, function (e) {
        that.$message.success(that.$t('复制失败'))
      })
    },
    // 卡片添加
    cardAddChange () {
      const data = JSON.parse(JSON.stringify(this.record))
      const arr = []
      const floot = parseInt(Math.random() * (100000000 - 1000000 + 1) + 1000000, 10)
      data.aliasKey = floot
      const dataChange = (array) => {
        array.forEach((item, index) => {
          if (item.columns) {
            dataChange(item.columns)
          } else if (item.trs) {
            dataChange(item.trs)
          } else if (item.tds) {
            dataChange(item.tds)
          } else if (item.list) {
            dataChange(item.list)
          } else {
            item.aliasKey = floot
            item.value = item.value + '_' + floot
            if (item.field) {
              if (item.field.beforeAlias) {
                item.field.alias = item.field.beforeAlias + '_' + floot
              } else {
                item.field.beforeAlias = JSON.parse(JSON.stringify(item.field.alias))
                item.field.alias = item.field.alias + '_' + floot
              }
              if (item.formType === 'address') {
                item.field.value = {
                  address: '',
                  display: ''
                }
              } else if (item.formType === 'cascader') {
                item.field.value = {
                  value: '',
                  display: ''
                }
              }
            }
          }
        })
      }
      arr.push(data)
      dataChange(arr)
      data.key = new Date().getTime()
      this.$set(this.viewThis, 'cardKey', data.key)
      this.$set(this.viewThis, 'aliasKey', data.aliasKey)
      this.$emit('cardAdd', data, this.indexs)
      this.$nextTick(() => {
        let index = 1
        if (this.parentParams.tableId === 'c289bf71e6254134d7c35833e1014b18') {
          index = 0
        }
        const getIndex = (array) => {
          array.forEach(item => {
            if (item.columns) {
              getIndex(item.columns)
            } else if (item.trs) {
              getIndex(item.trs)
            } else if (item.tds) {
              getIndex(item.tds)
            } else if (item.list) {
              if (item.type === 'card' && item.addShow) {
                this.$set(item, 'index', index)
                index++
              }
              getIndex(item.list)
            }
          })
        }
        getIndex(this.viewThis.template)
      })
    },
    // 卡片删除
    delCard () {
      this.$emit('cardDel', this.indexs)
      this.$set(this.viewThis, 'cardKey', '')
      this.$set(this.viewThis, 'aliasKey', '')
      this.$nextTick(() => {
        let index = 0
        const getIndex = (array) => {
          array.forEach(item => {
            if (item.columns) {
              getIndex(item.columns)
            } else if (item.trs) {
              getIndex(item.trs)
            } else if (item.tds) {
              getIndex(item.tds)
            } else if (item.list) {
              if (item.type === 'card' && item.addShow) {
                this.$set(item, 'index', index)
                index++
              }
              getIndex(item.list)
            }
          })
        }
        getIndex(this.viewThis.template)
      })
    },
    // 选中卡片改变值
    chioseFill () {
      this.$set(this.viewThis, 'cardKey', this.record.key)
      this.$set(this.viewThis, 'aliasKey', this.record.aliasKey)
    },
    // 上传文件失败提示
    debounceToast (item) {
      this.$message.error(item.response.message)
    },
    // 图片附件赋值
    fileChange (info) {
      info.fileList = info.fileList.map(item => {
        if (item.response && item.response.code !== 0) {
          this.debounceToast(item)
        }
        const obj = {
          name: item.name,
          response: item.response,
          status: item.status,
          uid: item.uid,
          url: item.response && item.response.result ? (process.env.VUE_APP_API_BASE_URL + 'admin/api/download/?filePath=' + item.response.result.filePath) : ''
        }
        return obj
      })
      if (info.file.status === 'done' || info.file.status === 'removed') {
        this.$set(this.record.field, 'initValue', info.fileList)
      }
    },
    // 流程日志刷新
    refresh () {
      if (this.$refs.tableLog) {
        this.$refs.tableLog.refresh(false)
      }
    },
    // 事件处理
    handleEvent (eventName, alias, options1, options2) {
      this.$emit('sendEvent', eventName, alias, options1, options2)
    },
    // 监听输入值得变化
    onChange (item, type, options1, options2, allValue) {
      const alias = item.field.alias
      this.handleEvent('change', alias, options1, options2)
      if (!this.typeActions.get(type)) {
        return
      }
      const action = this.typeActions.get(type)
      const inputValue = action(options1, options2)
      // 数据联动
      if (this.linkData[alias]) {
        this.getLinkData(alias, inputValue, 'change', item)
      }
      if (this.viewThis.defaultLinkData[item.field.alias]) {
        this.getLinkData(alias, inputValue, 'change', item, 'default')
      }
      if (item.aliasKey && item.field && this.linkData[item.field.beforeAlias]) {
        this.getLinkData(alias, inputValue, 'change', item)
      }
      // 执行事件字段集合
      let eventArr = []
      for (const i in this.data) {
        for (const j in this.data[i].simpleCondition) {
          for (const k in this.data[i].event) {
            if (this.data[i].event[k].field === this.data[i].simpleCondition[j].field && this.data[i].simpleCondition.every(simConItem => simConItem.field === this.data[i].event[k].field)) {
              this.data[i].event.splice(k, 1)
              this.data[i].simpleCondition.splice(j, 1)
            }
          }
        }
      }
      if (this.data) {
        // 为兼容以前不存在的conditionType情况
        this.data.forEach(item => {
          if (!item.conditionType) {
            item.conditionType = 'if'
          }
        })
        // if存在的内容index,进行执行分段
        const indexArr = this.data.map((item, index) => {
          if (item.conditionType === 'if') {
            return String(index)
          } else {
            return null
          }
        }).filter(item => item)
        indexArr.forEach((item, index) => {
          const data = this.data.slice(Number(item), indexArr[index + 1] ? Number(indexArr[index + 1]) : this.data.length)
          const getDataNext = (dataItem, dataIndex) => {
            const simpleFlagArr = []
            dataItem.simpleCondition.forEach(simItem => {
              const conditionFlagArr = []
              if (simItem.fieldUser === 'notSet') {
                simItem.flag = true
              } else if (simItem.field === alias) {
                simItem.condition.forEach((myitem) => {
                  if (type === 'number') {
                    myitem.value = Number(myitem.value)
                  } else if (type === 'organization') {
                    myitem.value = myitem.options ? myitem.options[0].value : myitem.value
                  }
                  if (myitem && !myitem.value) {
                    myitem.value = ''
                  }
                  const flag = this.handleSimple(myitem.include, myitem.value, inputValue, myitem.allValue, allValue)
                  myitem.flag = flag
                  conditionFlagArr.push(flag)
                })
                simItem.flag = this.getConditionFlag(simItem.logic, conditionFlagArr)
              }
              simpleFlagArr.push(simItem.flag)
            })
            dataItem.flag = this.getConditionFlag(dataItem.logic, simpleFlagArr)
            // 规则事件执行
            if (dataItem.flag) {
              dataItem.event.forEach(eventItem => {
                // 该字段被执行事件保留在eventArr中
                eventArr.push(eventItem.field)
                this.$emit('templateRule', eventItem)
              })
            } else if (data[dataIndex + 1]) {
              getDataNext(data[dataIndex + 1], dataIndex + 1)
            }
          }
          getDataNext(data[0], 0)
        })
        // 编辑事件字段集合，如果该字段没有出现则字段组件显示最初状态
        eventArr.push(...this.viewThis.wayRuleAlias)
        eventArr = Array.from(new Set(eventArr))
      }
      if (!this.handleWayData.length) {
        this.$emit('recoveryRule', eventArr)
        return false
      }
      const wayDataRule = this.params.wayDataRule
      if (wayDataRule && wayDataRule.length) {
        wayDataRule.forEach(dataItem => {
          const simpleFlagArr = []
          dataItem.simpleCondition.forEach(simItem => {
            const conditionFlagArr = []
            const handleWay = this.viewThis.form.getFieldsValue().handleWay
            if (simItem.fieldUser === 'way') {
              this.$set(simItem, 'flag', handleWay && item.way === handleWay)
            } else if (simItem.field === alias) {
              simItem.condition.forEach((myitem) => {
                if (type === 'number') {
                  myitem.value = Number(myitem.value)
                } else if (type === 'organization') {
                  myitem.value = myitem.options ? myitem.options[0].value : myitem.value
                }
                const flag = this.handleSimple(myitem.include, myitem.value, inputValue, myitem.allValue, allValue)
                conditionFlagArr.push(flag)
              })
              this.$set(simItem, 'flag', this.getConditionFlag(simItem.logic, conditionFlagArr))
            }
            simpleFlagArr.push(simItem.flag)
          })
          this.$set(dataItem, 'flag', this.getConditionFlag(dataItem.logic, simpleFlagArr))
          if (dataItem.flag) {
            dataItem.event.forEach(eveItem => {
              if (eveItem.type === 'field') {
                const getTemplate = (array) => {
                  array.forEach((temItem, index) => {
                    if (temItem.columns) {
                      getTemplate(temItem.columns)
                    } else if (temItem.trs) {
                      getTemplate(temItem.trs)
                    } else if (temItem.tds) {
                      getTemplate(temItem.tds)
                    } else if (temItem.list) {
                      getTemplate(temItem.list)
                    } else {
                      if (temItem.field && temItem.field.alias === eveItem.field) {
                        eventArr.push(eveItem.field)
                        this.$emit('templateRule', eveItem)
                      }
                    }
                  })
                }
                getTemplate(this.viewThis.template)
              } else {
                this.handleWayData.forEach(wayItem => {
                  if (eveItem.alias === wayItem.alias) {
                    wayItem.change = true
                    if (eveItem.status === 'hidden') {
                      this.$set(wayItem, 'display', 'h')
                    } else {
                      this.$set(wayItem, 'display', 'v')
                    }
                  }
                })
              }
            })
          } else {
            wayDataRule.forEach(ruleItem => {
              if (!ruleItem.flag) {
                this.handleWayData.forEach(handleItem => {
                  if (ruleItem.event.findIndex(ruleEventItem => handleItem.alias === ruleEventItem.alias) !== -1 && !handleItem.change) {
                    handleItem.display = this.viewThis.handleWayDataOther.find(otherItem => handleItem.alias === otherItem.alias).display
                    handleItem.change = false
                  }
                })
              }
            })
            dataItem.event.forEach(eveItem => {
              if (!eventArr.includes(eveItem.field)) {
                eventArr.push(eveItem.field)
              }
            })
          }
        })
      }
      this.$emit('recoveryRule', eventArr)
    },
    // 时间日期组件不可选日期
    disabledDate (current, item) {
      let minValue = ''
      let maxValue = ''
      if (item.field.setting.form.minType === 'field') {
        const alias = item.field.setting.form.minValue
        minValue = this.formdata[alias]
      } else if (item.field.setting.form.minType === 'now') {
        minValue = this.moment().subtract(0, 'day')
      } else {
        minValue = item.field.setting.form.minValue
      }
      if (item.field.setting.form.maxType === 'field') {
        const alias = item.field.setting.form.maxValue
        maxValue = this.formdata[alias]
      } else if (item.field.setting.form.maxType === 'now') {
        maxValue = this.moment().subtract(0, 'day')
      } else {
        maxValue = item.field.setting.form.maxValue
      }
      const time = this.moment(current).format('YYYY-MM-DD')
      if (minValue && maxValue) {
        return time < this.moment(minValue).format('YYYY-MM-DD') || time > this.moment(maxValue).format('YYYY-MM-DD')
      } else if (minValue) {
        return time < this.moment(minValue).format('YYYY-MM-DD')
      } else if (maxValue) {
        return time > this.moment(maxValue).format('YYYY-MM-DD')
      }
    },
    disabledTime (current, item) {
      const range = (start, end) => {
        const result = []
        for (let i = start; i < end; i++) {
          result.push(i)
        }
        return result
      }
      let minValue = ''
      let maxValue = ''
      if (item.field.setting.form.minType === 'field') {
        const alias = item.field.setting.form.minValue
        minValue = this.formdata[alias]
      } else if (item.field.setting.form.minType === 'now') {
        minValue = this.moment().subtract(0, 'day')
      } else {
        minValue = item.field.setting.form.minValue
      }
      if (item.field.setting.form.maxType === 'field') {
        const alias = item.field.setting.form.maxValue
        maxValue = this.formdata[alias]
      } else if (item.field.setting.form.maxType === 'now') {
        maxValue = this.moment().subtract(0, 'day')
      } else {
        maxValue = item.field.setting.form.maxValue
      }
      const minHour = this.moment(minValue).hour()
      const minMinutes = this.moment(minValue).minutes()
      const minSeconds = this.moment(minValue).seconds()
      const maxHour = this.moment(maxValue).hour()
      const maxMinutes = this.moment(maxValue).minutes()
      const maxSeconds = this.moment(maxValue).seconds()
      if (maxValue && this.moment(maxValue).format('YYYY-MM-DD').includes(this.moment(current).format('YYYY-MM-DD')) && minValue && this.moment(minValue).format('YYYY-MM-DD').includes(this.moment(current).format('YYYY-MM-DD'))) {
        return {
          disabledHours: () => [...range(0, 24).splice(maxHour + 1, 24 - maxHour + 1), ...range(0, 24).slice(0, minHour)], // ban小时
          disabledMinutes: () => current.hour() >= maxHour ? range(maxMinutes + 1, 60) : [], // ban分
          disabledSeconds: () => current.hour() >= maxHour && current.minutes() >= maxMinutes ? range(maxSeconds, 60) : []// ban分
        }
      } else if (maxValue && this.moment(maxValue).format('YYYY-MM-DD').includes(this.moment(current).format('YYYY-MM-DD'))) {
        return {
          disabledHours: () => range(0, 24).splice(maxHour + 1, 24), // ban小时
          disabledMinutes: () => current.hour() >= maxHour ? range(maxMinutes + 1, 60) : [], // ban分
          disabledSeconds: () => current.hour() >= maxHour && current.minutes() >= maxMinutes ? range(maxSeconds, 60) : []// ban分
        }
      } else if (minValue && this.moment(minValue).format('YYYY-MM-DD').includes(this.moment(current).format('YYYY-MM-DD'))) {
        return {
          disabledHours: () => range(0, minHour), // ban小时
          disabledMinutes: () => current.hour() <= minHour ? range(0, minMinutes) : [], // ban分
          disabledSeconds: () => current.hour() <= minHour && current.minutes() <= minMinutes ? range(0, minSeconds) : []// ban分
        }
      }
    },
    disabledTimePicker (hour, minutes, item, type) {
      let minValue = ''
      let maxValue = ''
      if (item.field.setting.form.minType === 'field') {
        const alias = item.field.setting.form.minValue
        minValue = this.moment(this.formdata[alias]).format('YYYY-MM-DD HH:mm:ss')
      } else if (item.field.setting.form.minType === 'now') {
        minValue = this.moment().format('LTS')
      } else {
        minValue = item.field.setting.form.minValue
      }
      if (item.field.setting.form.maxType === 'field') {
        const alias = item.field.setting.form.maxValue
        maxValue = this.moment(this.formdata[alias]).format('YYYY-MM-DD HH:mm:ss')
      } else if (item.field.setting.form.maxType === 'now') {
        maxValue = this.moment().format('LTS')
      } else {
        maxValue = item.field.setting.form.maxValue
      }
      const minTime = minValue ? minValue.split(':') : []
      const maxTime = maxValue ? maxValue.split(':') : []
      const range = (start, end) => {
        const result = []
        for (let i = start; i < end; i++) {
          result.push(i)
        }
        return result
      }
      if (type === 'hour') {
        minValue = minTime[0]
        maxValue = maxTime[0]
        return [...minValue ? range(0, 24).slice(0, minValue) : [], ...maxValue ? range(0, 24).slice(Number(maxValue) + 1, 24) : []]
      } else if (type === 'minutes') {
        minValue = minTime[1]
        maxValue = maxTime[1]
        return [...(hour === Number(maxTime[0]) ? range(0, 60).slice(Number(maxValue) + 1, 60) : []),
        ...(hour === Number(minTime[0]) ? range(0, 60).slice(0, minValue) : [])]
      } else {
        minValue = minTime[2]
        maxValue = maxTime[2]
        return [...(minutes === Number(maxTime[1]) ? range(0, 60).slice(Number(maxValue) + 1, 60) : []), ...(minutes === Number(minTime[1]) ? range(0, 60).slice(0, minValue) : [])]
      }
    },
    // 时分秒比较大小
    handleCompare (time, timeTarget) {
      const arr = time.split(':')
      const arrT = timeTarget.split(':')
      const h = arr[0]
      const m = arr[1]
      const s = arr[2]
      const ht = arrT[0]
      const mt = arrT[1]
      const st = arrT[2]
      if (h < ht) {
        return -1
      } else if (h === ht) {
        if (m < mt) {
          return -1
        } else if (m === mt) {
          if (s < st) {
            return -1
          } else if (s === st) {
            return 0
          } else {
            return 1
          }
        } else {
          return 1
        }
      } else {
        return 1
      }
    },
    // 树选择地址簿数据加载
    onLoadData (treeNode) {
      const { value } = treeNode.dataRef
      return new Promise((resolve) => {
        if (value.charAt(value.length - 1) === '0') {
          this.axios({
            url: '/admin/address/getAddressChildren',
            data: { parentNumber: value }
          }).then(res => {
            this.record.field.option.forEach(item => {
              if (item.value === value && !item.children) {
                const arr = []
                res.result.forEach(arrItem => {
                  const obj = { label: arrItem.name, value: arrItem.number }
                  arr.push(obj)
                })
                this.$set(item, 'children', arr)
              } else if (item.children) {
                item.children.forEach(childItem => {
                  if (childItem.value === value && !childItem.children) {
                    const arr = []
                    res.result.forEach(arrItem => {
                      const obj = { label: arrItem.name, value: arrItem.number }
                      arr.push(obj)
                    })
                    this.$set(childItem, 'children', arr)
                  } else if (childItem.children) {
                    childItem.children.forEach(childrenItem => {
                      if (childrenItem.value === value && !childrenItem.children) {
                        const arr = []
                        res.result.forEach(arrItem => {
                          const obj = { label: arrItem.name, value: arrItem.number, isLeaf: true }
                          arr.push(obj)
                        })
                        this.$set(childrenItem, 'children', arr)
                      }
                    })
                  }
                })
              }
            })
          })
        }
        resolve()
      })
    },
    getEnable () {
      if (this.record.action === 'edit') {
        this.axios({
          url: '/admin/userTable/edit',
          data: {
            action: 'edit',
            listTplviewid: '069d7670919b354b9576cd619604a96f',
            record: this.record.data,
            tplviewid: '414e1bd4120df8786b035a9d160d0f87'
          }
        }).then(res => {
          this.record.params = res.result
          this.$set(this.record, 'enable', true)
          this.$forceUpdate()
        })
      } else {
        this.$set(this.record, 'enable', true)
        this.$forceUpdate()
      }
    },
    changePortrait (data) {

    },
    // 客户画像切换用户
    handleUserShow (record) {
      const formData = this.formdata
      const item = this.templateObj.glkhbh
      const info = item.field.setting
      const filtersData = []
      for (const i in formData) {
        for (const j in info.form.associated) {
          if (i === info.form.associated[j].field) {
            filtersData[j] = {}
            filtersData[j].val = formData[i]
            filtersData[j].op = info.form.associated[j].op
            filtersData[j].field = info.form.associated[j].sourceField
            if (!filtersData[j].val) {
              filtersData[j].val = ''
            }
          }
        }
      }
      filtersData.forEach(item => {
        if (item && !item.val) {
          item.val = this.viewThis.form.getFieldsValue()['record'][item.field]
        }
      })
      this.$nextTick(() => {
        this.$refs.userPortraitWinList.show({
          title: this.$t('选择数据'),
          alias: item.field.alias,
          screenData: {
            beforeAlias: item.field.beforeAlias,
            aliasKey: item.aliasKey
          },
          info: info,
          tplviewid: info.form.dataView,
          type: 'associated',
          action: 'associated',
          filtersData: filtersData
        })
      })
    },
    // 按钮自定义事件
    buttonEvent (value) {
      const that = this
      if (value) {
        const str = 'return ' + value
        // eslint-disable-next-line no-new-func
        const func = new Function(str)
        func()(that)
      }
    },
    // 组织结构options转换
    optionsConversion (list, displayType, searchType) {
      if (this.record.field.setting.form.optionType === 'department') {
        if (searchType) {
          return list.map(item => {
            const obj = item
            obj.key = item.departmentId
            obj.label = item.fullDepartmentName
            return obj
          })
        } else {
          return list.map(item => {
            const obj = item
            obj.key = item.departmentId
            obj.label = item.departmentName
            return obj
          })
        }
      } else if (this.record.field.setting.form.optionType === 'role') {
        return list.map(item => {
          const obj = item
          obj.key = item.roleId
          obj.label = item.roleName
          return obj
        })
      } else {
        return list.map(item => {
          const obj = item
          obj.key = item.username
          obj.label = `${item.username}(${item.realName})`
          return obj
        })
      }
    },
    // 组织结构options转换
    optionsConversionTreeselect (list, displayType, searchType) {
      if (this.record.field.setting.attribute.dataSource === 'addressBook') {
        if (searchType) {
          return list.map(item => {
            const obj = item
            obj.key = item.number
            obj.label = item.fullName
            return obj
          })
        } else {
          return list.map(item => {
            const obj = item
            obj.key = item.number
            obj.label = item.name
            return obj
          })
        }
      } else {
        if (searchType) {
          return list.map(item => {
            const obj = item
            obj.key = item.dictDataNumber
            obj.label = item.fullName
            return obj
          })
        } else {
          return list.map(item => {
            const obj = item
            obj.key = item.dictDataNumber
            obj.label = item.dictDataName
            return obj
          })
        }
      }
    },
    handlefilePaste (e) {
      let file
      const items = (e.clipboardData || window.clipboardData).items
      const files = this.viewThis.form.getFieldsValue()['record'][this.record.field.alias]
      items.forEach(fileItem => {
        if (fileItem.type.indexOf('image') !== -1) {
          file = fileItem.getAsFile()
        } else {
          file = fileItem.getAsFile()
        }
      })
      if (file && !this.nowloading && files.length < this.record.field.setting.attribute.maxFiles && this.record.fieldRule !== 'readonly') {
        const reader = new FileReader()
        reader.onload = (e) => {
          const fileObj = this.base64ToFile(e.target.result, file.name)
          const fileType = this.record.field.setting.form.format || (this.record.formType === 'image' ? '.png,.jpg,.jpeg,.gif,.bmp' : '.png,.jpg,.jpeg,.gif,.bmp,.flv,.swf,.mkv,.avi,.rm,.rmvb,.mpeg,.mpg,.ogg,.ogv,.mov,.wmv,.mp4,.webm,.mp3,.wav,.mid,.rar,.zip,.tar,.gz,.7z,.bz2,.cab,.iso,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf,.txt,.md,.xml')
          const suffix = fileObj.name.substring(fileObj.name.lastIndexOf('.'), fileObj.name.length)
          if (!fileType.includes(suffix)) {
            this.$message.error(this.$t('上传文件格式错误'))
            return false
          }
          const formData = new FormData()
          formData.append('upload', fileObj)
          this.nowloading = true
          this.axios({
            url: `/admin/attachment/upload/?uploadName=upload`,
            data: formData
          }).then(res => {
            if (!res.code) {
              const imageObj = {
                name: res.result.fileName,
                response: {
                  code: 0,
                  message: '',
                  result: {
                    fileName: res.result.fileName,
                    filePath: res.result.filePath
                  },
                  timestamp: new Date().valueOf()
                },
                status: 'done',
                uid: new Date().valueOf(),
                url: process.env.VUE_APP_API_BASE_URL + 'admin/api/download/?filePath=' + res.result.filePath
              }
              const obj = {}
              files.splice(files.length, 0, imageObj)
              obj['record' + '[' + this.record.field.alias + ']'] = files
              this.viewThis.form.setFieldsValue(obj)
              this.$set(this.record.field, 'initValue', files)
            }
            const timer = setTimeout(() => {
              this.nowloading = false
              clearTimeout(timer)
            }, 300)
          })
        }
        reader.readAsDataURL(file)
      }
    },
    base64ToFile (data, fileName) {
      // 将base64 的图片转换成file对象上传 atob将ascii码解析成binary数据
      const binary = atob(data.split(',')[1])
      const mime = data.split(',')[0].match(/:(.*?);/)[1]
      const array = []
      for (let i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i))
      }
      const fileData = new Blob([new Uint8Array(array)], {
        type: mime
      })
      const file = new File([fileData], fileName, { type: mime })
      return file
    },
    // 客户画像表单提交
    getPortraitForm () {
      this.$refs.portraitFormView.form.validateFields((err, values) => {
        if (!err) {
          const portraitValue = {}
          const getTemplate = (array) => {
            array.forEach((item, index) => {
              if (item.columns) {
                getTemplate(item.columns)
              } else if (item.trs) {
                getTemplate(item.trs)
              } else if (item.tds) {
                getTemplate(item.tds)
              } else if (item.list) {
                getTemplate(item.list)
              } else {
                portraitValue['record'] = {}
                if (item.formType === 'file' || item.formType === 'image') {
                  const arr = []
                  if (!item.field.initValue) {
                    item.field.initValue = item.field.value
                  }
                  item.field.initValue.forEach(item1 => {
                    arr.push(item1.response.result)
                  })
                  values['record'][item.field.alias] = arr
                } else if (item.formType === 'datetime' && item.field.fieldType === 'TIME') {
                  values['record'][item.field.alias] = item.field.value
                } else if (item.formType === 'datetime') {
                  values['record'][item.field.alias] = values['record'][item.field.alias] ? this.moment(values['record'][item.field.alias]).format('YYYY-MM-DD HH:mm:ss') : ''
                } else if (item.formType === 'subform') {
                  values['record'][item.field.alias] = item.field.initValue || item.field.value
                  for (const i in values['record'][item.field.alias]) {
                    delete values['record'][item.field.alias][i].sort
                  }
                  values['record'][item.field.alias].forEach(item => {
                    for (const i in item) {
                      if (i.substr(0, 1) === '_' && i.substr(-1) === '_' && !i.includes('action')) {
                        delete item[i]
                      }
                    }
                  })
                } else if (item.formType === 'switch') {
                  values['record'][item.field.alias] = values['record'][item.field.alias] ? 1 : 0
                } else if (item.formType === 'autocomplete') {
                  values['record'][item.field.alias] = values['record'][item.field.alias].replace(/\s*/g, '')
                } else if (item.formType === 'address') {
                  if (!values['record'][item.field.alias]) {
                    values['record'][item.field.alias] = {}
                  }
                  const address = 'record' + '[' + item.field.alias + ']' + '[address]'
                  values['record'][item.field.alias]['address'] = this.$refs.portraitFormView.addressValue[address] || ''
                } else if (item.formType === 'treeselect') {
                  values['record'][item.field.alias] = values['record'][item.field.alias].toString()
                }
                portraitValue['record'] = values['record']
              }
            })
          }
          getTemplate(this.record.params.template)
          this.axios({
            url: '/crm/customer/add',
            data: Object.assign(portraitValue, { action: 'submit', id: this.record.data ? this.record.data.id : 0, tplviewid: '414e1bd4120df8786b035a9d160d0f87' })
          }).then(res => {
            if (res.code === 0) {
              this.record.loading = true
              this.$forceUpdate()
              this.axios({
                url: '/admin/userTable/init',
                data: {
                  sortField: 'id',
                  sortOrder: 'descend',
                  pageNo: 1,
                  pageSize: 30,
                  associated: [],
                  customColumns: [],
                  searchString: {
                    khbh: portraitValue['record'].khbh,
                    khdh1: portraitValue['record'].khdh1
                  },
                  tplviewid: '069d7670919b354b9576cd619604a96f'
                }
              }).then(res => {
                this.record.data = res.result.data[0]
                const obj = {}
                obj['record' + '[glkhbh]'] = this.record.data.khbh
                this.viewThis.form.setFieldsValue(obj)
                this.record.action = 'edit'
                this.$set(this.record, 'enable', false)
                this.$set(this.record, 'loading', false)
                this.$message.success(res.message)
              })
            } else {
              this.$message.error(res.message)
            }
          })
        }
      })
    },
    // 获取关联数据
    getPortraitVal (val, alias, info, record, screenData) {
      const obj = {}
      val.forEach(item => {
        if (item.alias === 'khbh') {
          obj['khbh'] = item.value
        } else if (item.alias === 'khdh1') {
          obj['khdh1'] = item.value
        }
      })
      this.record.loading = true
      this.$forceUpdate()
      this.axios({
        url: 'admin/userTable/init',
        data: {
          sortField: 'id',
          sortOrder: 'descend',
          pageNo: 1,
          pageSize: 30,
          associated: [],
          customColumns: [],
          searchString: {
            khbh: obj.khbh,
            khdh1: obj.khdh1
          },
          tplviewid: '069d7670919b354b9576cd619604a96f'
        }
      }).then(res => {
        this.record.loading = false
        this.record.data = res.result.data[0]
        const post = this.$route.query
        this.$router.push({
          path: '/CustomPage',
          query: {
            view: this.setting.popurl,
            Event: 'Popscreen',
            Poptime: post.Poptime,
            Callerid: post.Callerid,
            CallerIDName: post.CallerIDName,
            CID: post.CID,
            callFormPhone: post.callFormPhone,
            CalleeIDName: post.CalleeIDName,
            callTime: post.callTime,
            Server: post.Server,
            Calleeid: obj.khdh1,
            Recordfile: post.Recordfile,
            Method: post.Method,
            CalleeidAdress: post.CalleeidAdress,
            Uniqueid: post.Uniqueid
          }
        })
        this.parentParams.popscreenThis.createForm()
      })
    },
    // 关联数据
    handleLink (item, mode, index) {
      if (mode !== 'dialog') {
        this.$set(item.field, 'iconFlag', !item.field.iconFlag)
      }
    },
    // 关联数据搜索选择
    handleSearch (val, item, index) {
      const info = item.field.setting
      if (!val) {
        clearTimeout(this.timeout)
        return
      }
      if (info.form.mode !== 'dialog') {
        const advanceSearch = {}
        advanceSearch.conditions = []
        advanceSearch.logic = 'or'
        advanceSearch.conditions.push(this.getCondition(info.form.linkField, val))
        if (info.form.searchField_1) {
          advanceSearch.conditions.push(this.getCondition(info.form.searchField_1, val))
        }
        if (info.form.searchField_2) {
          advanceSearch.conditions.push(this.getCondition(info.form.searchField_2, val))
        }
        if (info.form.searchField_3) {
          advanceSearch.conditions.push(this.getCondition(info.form.searchField_3, val))
        }
        const parameter = {
          pageNo: 1,
          pageSize: 20,
          sortField: 'id',
          sortOrder: 'descend'
        }
        clearTimeout(this.timeout)
        this.timeout = setTimeout(() => {
          this.axios({
            url: '/admin/api/linkSearch',
            data: Object.assign(parameter, { tableId: info.form.linkList[1], fieldId: item.field.fieldId }, { advanceSearch })
          }).then(res => {
            const selectList = []
            res.result.data.forEach((item, index) => {
              const obj = {}
              obj.label = (item[info.form.linkField] || this.$t('空')) +
                (info.form.searchField_1 ? ' | ' + (item[info.form.searchField_1] || this.$t('空')) : '') +
                (info.form.searchField_2 ? ' | ' + (item[info.form.searchField_2] || this.$t('空')) : '') +
                (info.form.searchField_3 ? ' | ' + (item[info.form.searchField_3] || this.$t('空')) : '')
              obj.value = item
              obj.id = (new Date()).valueOf() + index
              selectList.push(obj)
            })
            this.$set(item.field, 'selectList', selectList)
          })
        }, 500)
      }
    },
    // 选择数据
    handleChoice (item1, item, index) {
      this.axios({
        url: '/admin/userTable/getTableRecord',
        data: { tableId: item.field.setting.form.linkList[1], id: item1.value.id }
      }).then(res => {
        const val = res.result.data
        const alias = item.field.alias
        const info = item.field.setting
        this.getVal(val, alias, info)
      })
      this.$set(item.field, 'iconFlag', false)
      this.$set(item.field, 'selectList', [])
    },
    // 下拉选择框失去焦点
    linkBlur (item, index) {
      this.$set(item.field, 'iconFlag', false)
      this.$set(item.field, 'selectList', [])
    },
    getCondition (alias, val) {
      const obj = {}
      obj.alias = alias
      obj.logic = 'or'
      obj.condition = [{ include: 'cn', value: val }]
      return obj
    },
    // 表单留痕获取更多加载内容
    getMoreTrace () {
      this.tracespin = true
      this.axios({
        url: '/admin/userTable/getFieldTraceData',
        data: Object.assign(this.traceParameter, { tableName: this.tableName, id: this.parentParams.record.id })
      }).then(res => {
        if (res.result.data.length === 10) {
          this.loadMore = true
        } else {
          this.loadMore = false
        }
        res.result.data.forEach(item => {
          item.setting = JSON.parse(item.setting)
        })
        this.traceData = [...this.traceData, ...res.result.data]
        this.tracespin = false
        if (res.result.data.length === 10) {
          this.traceParameter.pageNo++
        }
      })
    },
    // 打开关联数据窗口
    handleWinlist (item) {
      const formData = this.formdata
      const info = item.field.setting
      const filtersData = []
      for (const i in formData) {
        for (const j in info.form.associated) {
          if (i === info.form.associated[j].field) {
            filtersData[j] = {}
            filtersData[j].val = formData[i]
            filtersData[j].realfield = info.form.associated[j].field
            filtersData[j].op = info.form.associated[j].op
            filtersData[j].field = info.form.associated[j].sourceField
            if (!filtersData[j].val) {
              filtersData[j].val = ''
            }
          }
        }
      }
      filtersData.forEach(dataItem => {
        dataItem.val = this.viewThis.form.getFieldsValue()['record'][dataItem.realfield]
      })
      if (filtersData.length && filtersData.every(dataItem => !dataItem.val && dataItem.op && dataItem.field)) {
        filtersData.forEach(dataItem => {
          const data = this.templateObj[dataItem.realfield]
          const message = this.$t('{0}为空，请确认信息或重新选择', { 0: data.field.name })
          this.$message.error(message)
        })
        return false
      }
      if (info.form.mode !== 'combobox') {
        this.winKey = this.winKey === 'winKey' ? 'winKey_1' : 'winKey'
        this.$nextTick(() => {
          this.$refs.userTableWinList.show({
            title: this.$t('选择数据'),
            alias: item.field.alias,
            screenData: {
              beforeAlias: item.field.beforeAlias,
              aliasKey: item.aliasKey
            },
            info: info,
            tplviewid: info.form.dataView,
            type: 'associated',
            action: 'associated',
            filtersData: filtersData
          })
        })
      }
      this.linkBlur(item)
    },
    // 获取关联数据
    getVal (val, alias, info, record, screenData) {
      if (screenData && screenData.aliasKey) {
        const valObj = {}
        val.forEach(item => {
          valObj[item.alias] = item.value
          if (item.option && item.option.length !== 0) {
            valObj['__' + item.alias + '_option__'] = item.option
          }
        })
        const obj = {}
        const name = 'record' + '[product_' + screenData.aliasKey + ']' + '[' + screenData.beforeAlias + ']'
        obj[name] = valObj[info.form.linkField]
        this.$emit('give', obj)
        let dataItem = {}
        let dataTem = {}
        const getObj = (array, str) => {
          array.forEach((item, index) => {
            if (item.columns) {
              getObj(item.columns, str)
            } else if (item.trs) {
              getObj(item.trs, str)
            } else if (item.tds) {
              getObj(item.tds, str)
            } else if (item.list) {
              getObj(item.list, str)
            } else {
              if (str && item.field && item.field.alias === str) {
                dataTem = item
              } else if (item.field && item.field.alias === alias) {
                dataItem = item
              }
            }
          })
        }
        getObj(this.viewThis.template)
        this.$nextTick(() => {
          this.onChange(dataItem, '', valObj[info.form.linkField])
        })
        if (info.form.conditions && info.form.conditions.length > 0) {
          info.form.conditions.forEach(item => {
            getObj(this.viewThis.template, item.field + '_' + screenData.aliasKey)
            const temItem = dataTem
            if (item.formType !== 'subform' && temItem) {
              const obj = {}
              // todo
              if (temItem.formType === 'switch') {
                const word = temItem.field.setting.form.word.value
                const index = word.indexOf(valObj[item.sourceField])
                const name = 'record' + '[product_' + screenData.aliasKey + ']' + '[' + item.field + ']'
                if (index === 0) {
                  obj[name] = true
                } else if (index === 1) {
                  obj[name] = false
                }
                this.$emit('give', obj)
              } else if (temItem.formType === 'datetime' && !valObj[item.sourceField]) {
                const name = 'record' + '[product_' + screenData.aliasKey + ']' + '[' + item.field + ']'
                obj[name] = null
                this.$emit('give', obj)
              } else if (temItem.formType === 'address') {
                const address = 'record' + '[product_' + screenData.aliasKey + ']' + '[' + item.field + ']' + '[address]'
                const details = 'record' + '[product_' + screenData.aliasKey + ']' + '[' + item.field + ']' + '[details]'
                obj[address] = valObj[item.sourceField].display
                if (valObj[item.sourceField].details) {
                  obj[details] = valObj[item.sourceField].details
                }
                this.$emit('give', obj, valObj[item.sourceField].address, address)
                this.$set(temItem.field, 'value', valObj[item.sourceField])
              } else if (temItem.formType === 'cascader' && item.sourceField === temItem.field.beforeAlias) {
                this.$set(temItem.field, 'value', valObj[item.sourceField])
              } else {
                const name = 'record' + '[product_' + screenData.aliasKey + ']' + '[' + item.field + ']'
                obj[name] = valObj[item.sourceField]
                this.$emit('give', obj)
              }
              if (valObj['__' + item.sourceField + '_option__']) {
                temItem.field.option = valObj['__' + item.sourceField + '_option__']
              }
              if (this.viewThis.wayRuleAlias.indexOf(temItem.value) === -1) {
                this.$emit('changeTem', temItem)
              }
            } else {
              // 获取源数据表子表数据
              const sourceData = valObj[item.sourceField] ? valObj[item.sourceField] : []
              // 获取子表数据
              const subformData = []
              if (item.mapping && item.mapping.length > 0) {
                sourceData.forEach(sourceItem => {
                  const obj = {}
                  item.mapping.forEach(mapItem => {
                    obj[mapItem.subformField] = sourceItem[mapItem.sourceField]
                  })
                  obj.__action__ = 'add'
                  subformData.push(obj)
                })
              }
              // 子表赋值
              const temItem = this.templateObj[item.field]
              if (temItem) {
                temItem.field.value = temItem.field.value ? temItem.field.value : []
                temItem.field.value = [...temItem.field.value, ...subformData]
                temItem.field.linkValue = subformData
                this.$emit('changeTem', temItem)
              }
            }
          })
        }
      } else {
        const valObj = {}
        val.forEach(item => {
          valObj[item.alias] = item.value
          if (item.option && item.option.length !== 0) {
            valObj['__' + item.alias + '_option__'] = item.option
          }
        })
        const obj = {}
        const name = 'record' + '[' + alias + ']'
        obj[name] = valObj[info.form.linkField]
        this.$emit('give', obj)
        this.$nextTick(() => {
          this.onChange(this.templateObj[alias], '', valObj[info.form.linkField])
        })
        if (info.form.conditions && info.form.conditions.length > 0) {
          info.form.conditions.forEach(item => {
            if (item.formType !== 'subform' && this.templateObj[item.field]) {
              const obj = {}
              const temItem = this.templateObj[item.field]
              if (temItem.formType === 'switch') {
                // todo
                const word = temItem.field.setting.form.word.value.split('/')
                const index = word.indexOf(valObj[item.sourceField])
                const name = 'record' + '[' + item.field + ']'
                if (index === 0) {
                  obj[name] = true
                } else if (index === 1) {
                  obj[name] = false
                }
                this.$emit('give', obj)
              } else if (temItem.formType === 'datetime') {
                if (valObj[item.sourceField]) {
                  const name = 'record' + '[' + item.field + ']'
                  obj[name] = this.moment(valObj[item.sourceField])
                } else {
                  const name = 'record' + '[' + item.field + ']'
                  obj[name] = null
                }
                this.$emit('give', obj)
              } else if (temItem.formType === 'address') {
                const address = 'record' + '[' + item.field + ']' + '[address]'
                const details = 'record' + '[' + item.field + ']' + '[details]'
                obj[address] = valObj[item.sourceField].display
                if (valObj[item.sourceField].details) {
                  obj[details] = valObj[item.sourceField].details
                }
                const getTemplate = (array) => {
                  array.forEach((getItem, index) => {
                    if (getItem.columns) {
                      getTemplate(getItem.columns)
                    } else if (getItem.trs) {
                      getTemplate(getItem.trs)
                    } else if (getItem.tds) {
                      getTemplate(getItem.tds)
                    } else if (getItem.list) {
                      getTemplate(getItem.list)
                    } else {
                      if (getItem.field && temItem.field.alias === getItem.field.alias) {
                        getItem.field.value = valObj[item.sourceField]
                      }
                    }
                  })
                }
                getTemplate(this.viewThis.template)
                this.$emit('give', obj, valObj[item.sourceField].address, address)
                this.$set(temItem.field, 'value', valObj[item.sourceField])
              } else if (temItem.formType === 'cascader') {
                this.$set(temItem.field, 'value', valObj[item.sourceField])
              } else {
                const name = 'record' + '[' + item.field + ']'
                obj[name] = valObj[item.sourceField]
                this.$emit('give', obj)
              }
              if (valObj['__' + item.sourceField + '_option__']) {
                temItem.field.option = valObj['__' + item.sourceField + '_option__']
              }
              if (this.viewThis.wayRuleAlias.indexOf(temItem.value) === -1) {
                this.$emit('changeTem', temItem)
              }
              if (valObj[item.sourceField]) {
                this.onChange(this.templateObj[item.field], temItem.formType, valObj[item.sourceField])
              }
            } else {
              // 获取源数据表子表数据
              const sourceData = valObj[item.sourceField] ? valObj[item.sourceField] : []
              // 获取子表数据
              const subformData = []
              if (item.mapping && item.mapping.length > 0) {
                sourceData.forEach(sourceItem => {
                  const obj = {}
                  item.mapping.forEach(mapItem => {
                    obj[mapItem.subformField] = sourceItem[mapItem.sourceField]
                  })
                  obj.__action__ = 'add'
                  subformData.push(obj)
                })
              }
              // 子表赋值
              const temItem = this.templateObj[item.field]
              if (temItem) {
                temItem.field.value = temItem.field.value ? temItem.field.value : []
                temItem.field.value = [...temItem.field.value, ...subformData]
                temItem.field.linkValue = subformData
                this.$emit('changeTem', temItem)
              }
            }
          })
        }
      }
    }
  }
}
</script>
<style lang="less" scoped>
@import '../FormDesign/styles/k-table.less';
.temStyle {
  max-height: calc(100vh - 90px);
  overflow-x: hidden;
  overflow: auto;
}
.userName {
  overflow: hidden; /* 溢出部分隐藏 */
  text-overflow: ellipsis; /* 文字溢出部分省略号显示 */
  display: -webkit-box; /* 弹性伸缩盒子模型显示 */
  -webkit-line-clamp: 3; /* 限制在一个块元素显示的文本的行数 */
  -webkit-box-orient: vertical;
}
/deep/ .cursorDefault .ant-select-selection {
  cursor: default;
}
/deep/ .ant-upload.ant-upload-select-picture-card > .ant-upload {
  padding: 0px;
}
/deep/.ant-input-affix-wrapper .ant-input-suffix {
  color: rgba(0, 0, 0, 0.25);
  display: none;
}
/deep/.ant-input:hover + .ant-input-suffix {
  display: flex;
}
/deep/.ant-input-suffix:hover {
  display: flex;
}
/deep/ .ant-input[disabled] {
  border: none;
}
/deep/ .ant-select-disabled .ant-select-selection {
  border: none;
}
/deep/ .ant-input-number-disabled {
  border: none;
}
</style>
