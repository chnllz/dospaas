import { Graph, Addon, Shape, NodeView } from '@antv/x6'
import './shape'
export class SimpleNodeView extends NodeView {
  static renderMarkup () {
    this.graph = new Graph({
      markup: [{
        tagName: 'rect',
        selector: 'body'
      }]
    })
  }
  update () {
    super.update({
      body: {
        refWidth: '100%',
        refHeight: '100%',
        fill: '#31d0c6'
      }
    })
  }
}

export default class FlowGraph {
  // public static graph: Graph
  // private static stencil: Addon.Stencil

  static init () {
    this.graph = new Graph({
      container: document.getElementById('flowContainer'),
      width: 1600,
      height: 800,
      autoResize: true,
      grid: {
        size: 10,
        visible: false,
        type: 'doubleMesh',
        args: [{
          color: '#cccccc',
          thickness: 1
        }, {
          color: '#e5e5e5',
          thickness: 1,
          factor: 4
        }]
      },
      highlighting: {
        highlight: true,
        magnetAdsorbed: {
          name: 'stroke',
          args: {
            attrs: {
              r: 5
            }
          }
        }
      },
      translating: {
        restrict: 20
      },
      // 画布出现滚动轮
      scroller: {
        autoResize: true,
        //  使画布具备滚动
        enabled: true,
        // 是否启用画布平移能力（在空白位置按下鼠标后拖动平移画布），默认为 false。
        pannable: false
      },
      minimap: {
        enabled: true,
        scalable: false,
        container: document.getElementById('minimapContainer'),
        width: 200,
        height: 100,
        padding: 0,
        graphOptions: {
          async: true,
          getCellView (cell) {
            if (cell.isNode()) {
              return SimpleNodeView
            }
          },
          createCellView (cell) {
            // 在小地图中不渲染边
            if (cell.isEdge()) {
              return null
            }
          }
        }
      },
      // 框选内容
      selecting: {
        enabled: true,
        // 是否启用点击多选，默认为 true。启用多选后按住 ctrl 或 command 键点击节点实现多选。
        multiple: true,
        // 是否启用框选，默认为 false。
        rubberband: true,
        // 在多选情况下，选中的节点是否一起移动，设置为 true 时，拖动选框框选的节点一起移动，默认为 true。
        movable: true,
        // 是否显示节点的选择框，默认为 false，建议使用下面的样式定制方法去定制自己的选择框样式。
        showNodeSelectionBox: true
      },
      connecting: {
        router: {
          name: 'er',
          args: {
            offset: 'center',
            min: 30
          }
        },
        anchor: 'center',
        connectionPoint: 'anchor',
        allowBlank: false,
        snap: {
          radius: 50
        },
        createEdge () {
          return new Shape.Edge({
            shape: 'edge',
            type: 'link',
            data: {},
            attrs: {
              line: {
                stroke: '#1890FF',
                strokeWidth: 2,
                targetMarker: {
                  name: 'classic',
                  size: 8
                }
              }
            },
            connector: {
              name: 'rounded',
              args: { radius: 8 }
            },
            zIndex: 0
          })
        },
        validateConnection ({
          sourceView,
          targetView,
          sourceMagnet,
          targetMagnet
        }) {
          if (sourceView === targetView) {
            return false
          }
          if (!sourceMagnet) {
            return false
          }
          if (!targetMagnet) {
            return false
          }
          return true
        }
      },
      snapline: {
        enabled: true,
        tolerance: 10
      },
      history: true,
      clipboard: {
        enabled: true
      },
      keyboard: {
        enabled: true
      },
      embedding: {
        enabled: true,
        findParent ({ node }) {
          const bbox = node.getBBox()
          return this.getNodes().filter((node) => {
            // 只有 data.parent 为 true 的节点才是父节点
            const data = node.getData()
            if (data && data.parent) {
              const targetBBox = node.getBBox()
              return bbox.isIntersectWithRect(targetBBox)
            }
            return false
          })
        }
      }
    })
    this.initStencil()
    this.initShape()
    this.initGraphShape()
    this.initEvent()
    return this.graph
  }

  static initStencil () {
    this.stencil = new Addon.Stencil({
      title: '流程',
      target: this.graph,
      stencilGraphWidth: 280,
      // search: { rect: true },
      collapsable: false,
      groups: [
        {
          name: 'basic',
          title: '基础节点',
          graphHeight: 180
        }
      ]
    })
    const stencilContainer = document.querySelector('#flowStencil')
    stencilContainer.appendChild(this.stencil.container)
  }

  static initShape () {
    const { graph } = this
    const r1 = graph.createNode({
      shape: 'flow-chart-start',
      width: 56,
      height: 56,
      type: 'start',
      attrs: {
        body: {
          rx: 35,
          ry: 35
        },
        text: {
          textWrap: {
            text: '开始'
          }
        }
      }
    })
    const r2 = graph.createNode({
      shape: 'flow-chart-end',
      width: 56,
      height: 56,
      type: 'end',
      attrs: {
        body: {
          rx: 35,
          ry: 35
        },
        text: {
          textWrap: {
            text: '结束'
          }
        }
      }
    })
    const r3 = graph.createNode({
      shape: 'flow-chart-gateway',
      width: 52,
      height: 52,
      angle: 45,
      attrs: {
        'edit-text': {
          style: {
            transform: 'rotate(-45deg)'
          }
        },
        text: {
          textWrap: {
            text: '排他拆分'
          },
          transform: 'rotate(-45deg)'
        }
      },
      ports: {
        groups: {
          top: {
            position: {
              name: 'top',
              args: {
                dx: -26
              }
            },
            attrs: {
              circle: {
                event: 'ports:mouseenter'// 添加自定义属性 event 来监听该元素的点击事件
              }
            }
          },
          right: {
            position: {
              name: 'right',
              args: {
                dy: -26
              }
            },
            attrs: {
              circle: {
                event: 'port:mouseenter'// 添加自定义属性 event 来监听该元素的点击事件
              }
            }
          },
          bottom: {
            position: {
              name: 'bottom',
              args: {
                dx: 26
              }
            },
            attrs: {
              circle: {
                event: 'port:mouseenter'// 添加自定义属性 event 来监听该元素的点击事件
              }
            }
          },
          left: {
            position: {
              name: 'left',
              args: {
                dy: 26
              }
            },
            attrs: {
              circle: {
                event: 'port:mouseenter'// 添加自定义属性 event 来监听该元素的点击事件
              }
            }
          }
        }
      }
    })
    const r4 = graph.createNode({
      shape: 'flow-chart-user',
      attrs: {
        text: {
          textWrap: {
            text: '人工变迁'
          }
        }
      }
    })
    const r5 = graph.createNode({
      shape: 'flow-chart-rect',
      attrs: {
        text: {
          textWrap: {
            text: '流程节点'
          }
        }
      }
    })

    const c1 = graph.createNode({
      shape: 'flow-chart-image-rect'
    })
    const c2 = graph.createNode({
      shape: 'flow-chart-title-rect'
    })
    const c3 = graph.createNode({
      shape: 'flow-chart-animate-text'
    })

    const g1 = graph.createNode({
      shape: 'flowGroupNode',
      attrs: {
        text: {
          text: 'Group Name'
        }
      },
      data: {
        parent: true
      }
    })
    this.stencil.load([r1, r2, r3, r4, r5], 'basic')
    this.stencil.load([c1, c2, c3], 'combination')
    this.stencil.load([g1], 'group')
  }

  static initGraphShape () {
  }

  static showPorts (ports, show) {
    for (let i = 0, len = ports.length; i < len; i = i + 1) {
      ports[i].style.visibility = show ? 'visible' : 'hidden'
    }
  }

  static initEvent () {
    const { graph } = this

    graph.on('node:collapse', ({ node, e }) => {
      e.stopPropagation()
      node.toggleCollapse()
      const collapsed = node.isCollapsed()
      const cells = node.getDescendants()
      cells.forEach((n) => {
        if (collapsed) {
          n.hide()
        } else {
          n.show()
        }
      })
    })

    graph.bindKey('backspace', () => {
      const cells = graph.getSelectedCells()
      if (cells.length) {
        graph.removeCells(cells)
      }
    })

    graph.on('node:delete', ({ e, node }) => {
      console.log(e)
    })
  }

  // 销毁
  static destroy () {
    this.graph.dispose()
  }
}
