<template>
  <div style="height: calc(100% - 8px); display: flex; flex-direction: column">
    <a-form layout="inline" style="display: flex; align-item: center">
      <a-row style="width: 100%; display: flex; align-items: center">
        <a-col :span="5"></a-col>
        <a-col :span="6">
          <a-form-item :label="$t('名称')">
            <a-input v-model="queryParam.name" allowClear />
          </a-form-item>
        </a-col>
        <a-col :span="10">
          <a-space>
            <a-button htmlType="submit" type="primary" @click="$refs.table.refresh(true)">{{ $t('搜索') }}</a-button>
            <a-button
              @click="
                () => {
                  queryParam = {}
                  $refs.table.refresh(true)
                }
              "
            >
              {{ $t('重置') }}
            </a-button>
            <a-button v-action:add icon="plus" type="primary" @click="handleAdd">{{ $t('添加') }}</a-button>
          </a-space>
        </a-col>
      </a-row>
    </a-form>
    <div style="flex: 1">
      <s-table
        ref="table"
        size="small"
        rowKey="id"
        :columns="columns"
        :data="loadDataTable"
        class="table-fill"
        :scroll="{ y: true }"
        :sorter="{ field: 'id', order: 'descend' }"
      >
        <div slot="action" slot-scope="text, record">
          <a :disabled="record.accessLevel === 2" @click="handleEdit(record)">{{ $t('编辑') }}</a>
          <a-divider type="vertical" />
          <a @click="handleCopy(record)">{{ $t('复制') }}</a>
          <a-divider type="vertical" />
          <a :disabled="!!record.accessLevel" @click="handleDelete(record)">{{ $t('删除') }}</a>
        </div>
        <template slot="variable" slot-scope="text">
          <span>{{ tableType[text] }}</span>
        </template>
      </s-table>
    </div>
    <a-modal :title="config.title" :visible="visible" :destroyOnClose="true" @cancel="visible = !visible">
      <a-spin :spinning="loading">
        <a-form :form="form" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-form-item :label="$t('名称')">
            <a-input
              v-decorator="[
                'name',
                {
                  rules: [
                    { required: true, message: $t('请输入表单名称') },
                    { max: 64, message: $t('最多请输入64个字符') }
                  ]
                }
              ]"
              :maxLength="20"
            />
          </a-form-item>
          <a-form-item :label="$t('类型')">
            <a-select
              v-decorator="[
                'variable',
                {
                  initialValue: undefined,
                  rules: [{ required: true, message: $t('请选择表单视图类型') }]
                }
              ]"
            >
              <a-select-option key="webFormView" value="webFormView">{{ $t('普通表单视图') }}</a-select-option>
              <a-select-option key="appFormView" value="appFormView">
                {{ $t('移动端表单视图') }}
              </a-select-option>
            </a-select>
          </a-form-item>
          <a-form-item :label="$t('备注')">
            <a-textarea v-decorator="['remarks']" :autoSize="{ minRows: 3, maxRows: 5 }" />
          </a-form-item>
        </a-form>
      </a-spin>
      <div slot="footer">
        <a-button type="primary" :loading="loading" @click="handleSubmit">{{ $t('保存') }}</a-button>
        <a-button @click="visible = !visible">{{ $t('关闭') }}</a-button>
      </div>
    </a-modal>
  </div>
</template>
<script>
export default {
  i18n: window.lang('admin'),
  props: {
    item: {
      type: Object,
      default () {
        return {}
      },
      required: false
    }
  },
  data () {
    return {
      visible: false,
      loading: false,
      // 搜索参数
      queryParam: {},
      // 表头
      columns: [{
        title: this.$t('操作'),
        dataIndex: 'action',
        width: 140,
        align: 'center',
        scopedSlots: { customRender: 'action' }
      }, {
        title: 'ID',
        dataIndex: 'id',
        sorter: true,
        width: 60
      }, {
        title: 'UID',
        dataIndex: 'uid',
        sorter: true,
        width: 150
      }, {
        title: this.$t('类型'),
        dataIndex: 'variable',
        scopedSlots: { customRender: 'variable' },
        sorter: true
      }, {
        title: this.$t('名称'),
        dataIndex: 'name',
        sorter: true
      }, {
        title: this.$t('备注'),
        dataIndex: 'remarks',
        sorter: true
      }, {
        title: this.$t('最后修改人'),
        dataIndex: 'updateUser',
        sorter: true
      }, {
        title: this.$t('最后修改时间'),
        dataIndex: 'updateTime',
        sorter: true
      }],
      form: this.$form.createForm(this),
      labelCol: { span: 6 },
      wrapperCol: { span: 18 },
      config: {},
      settingData: {},
      tableType: {
        webDataWindow: '普通数据窗口',
        tableCardWindow: '卡片数据窗口',
        webFormView: '表单视图',
        webSubformDataWindow: '子表单数据窗口'
      }
    }
  },
  methods: {
    loadDataTable (parameter) {
      if (this.item.tableId) {
        return this.axios({
          url: '/admin/template/form',
          data: Object.assign(parameter, this.queryParam, { tableId: this.item.tableId, variable: ['webFormView'] })
        }).then(res => {
          return res.result
        })
      }
    },
    handleAdd () {
      this.config = {
        action: 'add',
        Keyid: Math.floor(Math.random() * (10000 - 1000 + 1) + 1000),
        title: this.$t('添加'),
        submitUrl: '/admin/template/addFormView',
        url: '/admin/template/editFormView',
        tableId: this.item.tableId,
        variable: 'webFormView',
        module: this.item.data.module,
        item: this.item
      }
      this.axios({
        url: '/admin/template/getFormView',
        data: {
          tableId: this.item.tableId
        }
      }).then(res => {
        if (!res.code) {
          this.visible = true
          this.settingData = res.result
          this.settingData.setting = this.settingData.setting || {}
        } else {
          this.$message.warning(res.message)
        }
      })
    },
    handleEdit (record) {
      const data = {
        action: 'edit',
        title: record.name,
        url: '/admin/template/editFormView',
        tableId: this.item.tableId || record.value,
        alias: this.item.data ? this.item.data.alias : '',
        record: record,
        item: this.item
      }
      this.$emit('ok', data)
    },
    handleCopy (record) {
      this.config = {
        action: 'copy',
        title: `${this.$t('复制')}: ` + record.name,
        url: '/admin/template/editFormView',
        submitUrl: '/admin/template/addFormView',
        record: record,
        tableId: this.item.tableId || record.value,
        alias: this.item.data ? this.item.data.alias : '',
        variable: 'webFormView',
        item: this.item,
        module: this.item.data.module
      }
      this.axios({
        url: 'admin/template/getFormView',
        data: {
          id: record.id,
          tableId: this.item.tableId
        }
      }).then(res => {
        if (!res.code) {
          this.visible = true
          this.settingData = res.result
          this.settingData.setting = this.settingData.setting || {}
          this.settingData.fieldColumns = this.settingData.fieldColumns
        } else {
          this.$message.warning(res.message)
        }
      })
    },
    handleSubmit () {
      this.form.validateFields((errors, values) => {
        if (!errors) {
          values.value = this.config.tableId
          values.module = this.config.module
          values.variable = this.config.variable
          values.accessLevel = 0
          this.settingData.setting['helpText'] = !!this.settingData.setting['helpText']
          values.setting = this.config.action === 'add' ? Object.assign({
            fieldRule: [],
            helpText: false,
            myTemplate: [],
            templateScript: { afterInit: '', beforeSubmit: '' }
          }, values.setting) : this.settingData.setting
          this.loading = true
          this.axios({
            url: '/admin/template/checkRepeat',
            data: { id: 0, name: values.name, type: this.config.variable, tableId: this.config.tableId }
          }).then((res) => {
            if (res.code) {
              this.$message.error(res.message)
              this.loading = false
            } else {
              this.axios({
                url: this.config.submitUrl,
                data: values
              }).then((res) => {
                this.loading = false
                if (!res.code) {
                  const data = {
                    action: 'edit',
                    title: values.name,
                    url: this.config.url,
                    record: this.config.action === 'add' ? {
                      id: Number(res.result.id),
                      module: this.item.module,
                      name: values.name,
                      type: this.config.title,
                      uid: res.result.uid,
                      value: this.item.tableId,
                      variable: this.config.variable
                    } : Object.assign(this.settingData.data, { id: Number(res.result.id), uid: res.result.uid }),
                    tableId: this.item.tableId,
                    variable: values.variable,
                    module: this.item.module,
                    alias: this.item.data ? this.item.data.alias : '',
                    item: this.item
                  }
                  this.$emit('refresh', values, Number(res.result.id))
                  this.$emit('ok', data)
                  this.handleOk()
                  this.visible = false
                } else {
                  this.$message.error(res.message)
                }
              })
            }
          })
        }
      })
    },
    handleOk () {
      this.$refs.table.refresh()
    },
    handleDelete (record) {
      const that = this
      this.$confirm({
        title: record ? this.$t('您确认要删除该记录吗？') : this.$t('您确认要删除选中的记录吗？'),
        onOk () {
          that.axios({
            url: '/admin/template/delete',
            data: { id: record.id }
          }).then(res => {
            that.$refs.table.refresh()
            that.$emit('refresh', record.id)
          })
        }
      })
    }
  }
}
</script>
