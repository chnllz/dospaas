<template>
  <div style="display: inline-block; position: relative">
    <div v-if="showLoading" class="progress"></div>
    <a-icon type="question-circle" :style="styleStr" @click="getHelp"></a-icon>
    <a-popover v-model="visible" trigger="click" :arrowPointAtCenter="true" placement="bottomRight">
      <template slot="content">
        <div style="width: 350px" class="helpText">
          <div v-dompurify-html="helpNotes" v-viewer></div>
        </div>
      </template>
      <a-icon type="question-circle" class="help-icon-hidden" :style="styleStr"></a-icon>
    </a-popover>
  </div>
</template>

<script>
export default {
  props: {
    number: {
      type: String,
      default: '22041616460103'
    },
    styleStr: {
      type: String,
      default: 'font-size: 16px;margin-left: 8px;color: rgba(0, 0, 0, 0.65);'
    }
  },
  data () {
    return {
      visible: false,
      copyVisible: false,
      helpNotes: null,
      showLoading: false
    }
  },
  methods: {
    getHelp () {
      if (this.copyVisible) {
        this.copyVisible = false
        this.visible = false
      } else {
        this.$setLoading({ spinning: true })
        this.axios({
          url: '/admin/document/edit',
          data: {
            action: 'get',
            number: this.number ? this.number : '22041616460103'
          }
        }).then(res => {
          this.$setLoading({ spinning: false })
          if (!res.code) {
            const obj = res.result
            if (obj.displayMode === 'drawer') {
              this.$showDocument({ visible: true, content: obj.content, number: obj.number })
            } else {
              this.copyVisible = true
              this.visible = true
              this.helpNotes = obj.content
            }
          } else {
            this.$message.warning(res.message)
          }
        })
      }
    }
  }
}
</script>

<style lang="less" scoped>
&.help-icon-hidden {
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
}
.progress {
  --r1: 154%;

  --r2: 68.5%;

  width: 160px;

  height: 160px;

  position: absolute;

  left: -960px;

  top: 340px;

  border-radius: 50%;

  background: radial-gradient(var(--r1) var(--r2) at top, #0000 79.5%, #269af2 80%) center left,
    radial-gradient(var(--r1) var(--r2) at bottom, #269af2 79.5%, #0000 80%) center center,
    radial-gradient(var(--r1) var(--r2) at top, #0000 79.5%, #269af2 80%) center right, #ccc;

  background-size: 50.5% 220%;

  background-position: -100% 0%, 0% 0%, 100% 0%;

  background-repeat: no-repeat;

  animation: flood 2s infinite linear;
}

@keyframes flood {
  33% {
    background-position: 0% 33%, 100% 33%, 200% 33%;
  }

  66% {
    background-position: -100% 66%, 0% 66%, 100% 66%;
  }

  100% {
    background-position: 0% 100%, 100% 100%, 200% 100%;
  }
}
</style>
