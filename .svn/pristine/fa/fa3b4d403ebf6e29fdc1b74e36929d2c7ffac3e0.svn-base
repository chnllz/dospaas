<template>
  <div style="height: calc(100vh - 125px)">
    <iframe
      v-if="show"
      :src="pageUrl"
      width="100%"
      height="100%"
      frameborder="0"
      scrolling="no"
      allow="payment"
    ></iframe>

    <a-modal v-model="visible" :title="$t('添加历史版本')" @ok="handleSubmit">
      <a-form :form="form">
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" :label="$t('版本号')">
          <a-input v-decorator="['version', { rules: [{ required: true, message: $t('请填写版本号') }] }]"></a-input>
        </a-form-item>
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol" :label="$t('备注')">
          <a-textarea v-decorator="['remarks']" />
        </a-form-item>
      </a-form>
    </a-modal>
    <a-modal v-model="visibleHistory" :title="$t('查看历史版本')" @ok="handleSubmit">
      <s-table
        ref="table"
        size="small"
        rowKey="id"
        :columns="columns"
        :data="loadDataTable"
        :sorter="{ field: 'id', order: 'descend' }"
      >
        <div slot="action" slot-scope="text, record">
          <a @click="rollback(record)">
            {{ $t('恢复至此版本') }}
          </a>
        </div>
      </s-table>
    </a-modal>
    <flow-attr ref="FlowAttr" :workflowId="workflowId" :flowData="flowData" :select="currentSelect" @ok="handleOk" />
  </div>
</template>

<script>
export default {
  components: {
    FlowAttr: () => import('../admin/Flow/modules/FlowAttr')
  },
  props: {
    workflowId: {
      type: String,
      default: null
    }
  },
  data () {
    return {
      // pageUrl: `${window.location.origin}/drawio/index.html`,
      pageUrl: 'http://localhost:8080/drawio/src/main/webapp/index.html?dev=1',
      visible: false,
      visibleHistory: false,
      graph: null,
      id: 0,
      name: '',
      labelCol: { span: 4 },
      wrapperCol: { span: 20 },
      cell: {},
      flowData: { params: { tableId: '07b66955d18b4dd286d2fdacb2dc4e71' } },
      currentSelect: { type: null, id: this.id, nodeName: this.name },
      data: {},
      target: '',
      form: this.$form.createForm(this),
      show: false, // iframe的展示
      lock: false, // 是否被锁
      keepLock: null, // 保持编辑锁的函数
      columns: [
        {
          title: this.$t('操作'),
          dataIndex: 'action',
          align: 'center',
          width: 80,
          scopedSlots: { customRender: 'action' }
        },
        {
          title: this.$t('版本名称'),
          dataIndex: 'version',
          align: 'center',
          width: 80
        },
        {
          title: this.$t('发布人'),
          dataIndex: 'updateUser',
          align: 'center',
          width: 100
        },
        {
          title: this.$t('发布时间'),
          dataIndex: 'updateTime',
          align: 'center',
          width: 120
        },
        {
          title: this.$t('备注'),
          dataIndex: 'remarks',
          align: 'center',
          width: 150
        }
      ]
    }
  },
  deactivated () {
    if (this.$parent.$parent.$parent.$parent.$el.innerText.indexOf('流程管理') === -1) {
      clearInterval(this.keepLock)
      this.axios({
        url: '/admin/workflow/releaseLock',
        data: {
          uid: '9c46f828073e4be2afc5a096982edf8a',
          workflowId: this.workflowId
        }
      }).then(res => {
      })
      this.$emit('hide')
      // this.$el.parentNode.removeChild(this.$el)
    }
  },
  loadDataTable () {

  },
  created () {
    this.axios({
      url: '/admin/workflow/generate',
      data: { workflowId: this.workflowId, action: 'get' }
    }).then(res => {
      if (!res.code) {
        this.data = res.result.data
        // 如果请求到有这个流程图,那就请求编辑所
        this.axios({
          url: '/admin/workflow/getLock',
          data: {
            uid: '9c46f828073e4be2afc5a096982edf8a',
            workflowId: this.workflowId
          }
        }).then(res2 => {
          if (!res2.code) {
            this.show = true
            // 如果没有被锁住,那就开始每隔一分钟就发起请求保持编辑锁
            this.keepLock = setInterval(() => {
              this.axios({
                url: '/admin/workflow/getLock',
                data: {
                  uid: '9c46f828073e4be2afc5a096982edf8a',
                  workflowId: this.workflowId
                }
              })
            }, 1000 * 60)
          } else {
            const that = this
            // 如果被锁住了,那就开启编辑锁
            this.$error({
              title: this.$t(res2.message),
              onOk () {
              }
            })
            that.lock = true
            that.show = true
          }
        })
      }
    })

    window.top['drawio'] = {}
    // 载入视图信息
    window.top['drawio']['fileInit'] = () => {
      return {
        title: '测试',
        data: this.data.flow
      }
    }
    window.top['drawio']['showHistory'] = () => {
      this.visibleHistory = !this.visibleHistory
    }
    window.top['drawio']['saveHistory'] = () => {
      this.visible = !this.visible
    }
    // 保存修改
    window.top['drawio']['save'] = (res) => {
      this.onSave(res)
    }
    // 退出drawio
    window.top['drawio']['exit'] = () => {
      const that = this
      this.$confirm({
        title: this.$t('您确认要退出吗？'),
        onOk () {
          that.$emit('hide')
          if (that.lock) {
            return
          }
          // 退出之后要清除每隔一分钟就发送一次的编辑锁
          clearInterval(that.keepLock)
          that.axios({
            url: '/admin/workflow/releaseLock',
            data: {
              uid: '9c46f828073e4be2afc5a096982edf8a',
              workflowId: that.workflowId
            }
          })
        }
      })
    }
    window.top['drawio']['error'] = (res) => {
      // const that = this
      this.$error({
        title: this.$t(res),
        onOk () {
          // that.$emit('hide')
        }
      })
    }
    // 删除节点信息
    window.top['drawio']['delete'] = (res) => {
      if (this.lock) {
        this.$message.warning('编辑锁已启用，您不能提交数据')
        return
      }
      this.axios({
        url: 'admin/data/delete',
        data: {
          tableName: 'admin_w_workflow_node',
          where: {
            fieldName: 'node_id',
            fieldValue: res
          }
        }
      })
    }
    // 双击打开图形编辑
    window.top['drawio']['open'] = (cell, graph) => {
      this.graph = graph
      this.cell = cell
      const type = () => {
        delete this.currentSelect.quoteId
        if (this.cell.style.indexOf('fillColor=#d9d9d9') !== -1) {
          this.currentSelect.quoteId = 'quote_transition' + this.id
          return 'quote_transition'
        }
        if (this.cell.style.indexOf('user_transition') !== -1) return 'user_transition'
        if (this.cell.style.indexOf('start') !== -1) return 'start'
        if (this.cell.style.indexOf('end') !== -1) return 'end'
        if (this.cell.style.indexOf('gateway_explicit') !== -1) return 'gateway_explicit'
        if (this.cell.style.indexOf('edge') !== -1) {
          this.target = cell.target
          return 'link'
        }
      }
      this.currentSelect.type = type()
      this.name = cell.value
      this.id = cell.id
      this.currentSelect.id = cell.id
      if (this.currentSelect.type === 'user_transition') {
        const start = cell.value.indexOf(';">') + 3
        const end = cell.value.indexOf('&nbsp;')
        if (end !== -1) {
          this.currentSelect.nodeName = cell.value.slice(start, end)
        } else {
          this.currentSelect.nodeName = cell.value
        }
      } else {
        this.currentSelect.nodeName = cell.value
      }
      this.openDrawer()
    }
  },
  methods: {
    // 保存整个节点视图
    onSave (res) {
      if (this.lock) {
        this.$message.warning('编辑锁已启用，您不能提交数据')
        return
      }
      this.axios({
        url: '/admin/workflow/generate',
        data: {
          action: 'submit',
          flow: res,
          id: this.data.id,
          workflowId: this.workflowId
        }
      }).then(res => {
        if (!res.code) {
          this.$message.success(this.$t('保存成功'))
        } else {
          this.$message.error(this.$t('保存失败'))
        }
      })
    },

    // 打开节点编辑时载入数据
    openDrawer () {
      if (this.lock) {
        this.$message.warning('编辑锁已启用，您不能编辑')
        return
      }
      this.axios({
        url: 'admin/data/get',
        data: {
          tableName: 'admin_w_workflow_node',
          where: {
            fieldName: 'node_id',
            fieldValue: this.currentSelect.id
          }
        }
      }).then(res => {
        if (!res.code) {
          this.currentSelect = res.result.data.id ? { ...JSON.parse(res.result.data.setting)['currentSelect'], dbId: res.result.data.id } : { id: this.currentSelect.id, nodeName: this.currentSelect.nodeName, type: this.currentSelect.type }
          this.$refs.FlowAttr.show({ val: this.currentSelect })
        }
      })
    },
    // 提交节点数据后刷新视图
    handleOk (val) {
      const model = this.graph.getModel()
      model.beginUpdate()
      try {
        const cells = this.graph.getEditableCells(this.graph.getSelectionCells())
        const cell = cells[0]
        let label
        // 如果是变迁,要显示更多信息
        if (val.type === 'user_transition') {
          if (cell.value === '人工变迁') {
            label = `<div id="all" style="position:relative;width:160px;height:100px"><div style="width:160px;position:absolute;overflow:hidden;white-space:nowrap;text-overflow:ellipsis"> 条件：<span class="text">${val.conditionRemarks}</span></div>
        <div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">子状态：<span class="text">${val.processStatus}</span></div>
        <div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">事件：<span class="text">${val.remarks}</span></div>
        <hr style="border:1px dashed #969696"/><div id="nodeName" style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis;">${val.nodeName}&nbsp;</div>
        <div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">办理人：<span id="partuserRemarks">${val.partuserRemarks}</span></div></div>`
          } else {
            const node = cell.value
            const start = node.indexOf(`<div id="all"`)
            const end = node.indexOf(`<div id="nodeName"`)
            const newNode = node.slice(start, end)
            label = newNode + `<div id="nodeName" style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis;">${val.nodeName}&nbsp;</div>
        <div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">办理人：<span id="partuserRemarks">${val.partuserRemarks}</span></div></div>`
          }
        } else if (val.type === 'link') {
          if (this.target.type === 'user_transition') {
            const node = this.target.value
            const start = node.indexOf(`<div id="nodeName"`)
            const newNode = node.slice(start)
            label = ` <div id="all" style="position:relative;width:160px;height:100px"><div  style="width:160px;position:absolute;overflow:hidden;white-space:nowrap;text-overflow:ellipsis"> 条件：<span class="text">${val.remarks1}</span></div>
        <div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">子状态：<span class="text">${val.processSubStatus}</span></div>
        <div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">事件：<span class="text">${val.remarks2}</span></div>
        <hr style="border:1px dashed #969696"/>` + newNode
            model.setValue(this.target, label)
          }
          return
        } else {
          label = val.nodeName
        }
        model.setValue(cell, label)
      } finally {
        model.endUpdate()
        this.graph.cellEditor.stopEditing(false)
        this.graph.refresh()
      }
      this.visible = false
    },
    handleSubmit () {

    },
    rollback (record) {

    }
  }
}
</script>
