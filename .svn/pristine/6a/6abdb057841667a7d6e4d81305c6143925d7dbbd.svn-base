<template>
  <a-modal :title="config.title" :width="600" :visible="visible" :destroyOnClose="true" @cancel="visible = !visible">
    <a-spin :spinning="loading">
      <a-form :form="form">
        <a-form-item v-if="config.action === 'edit'" :label="$t('编号')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-input v-decorator="['tableId', { initialValue: data.tableId }]" :disabled="true" />
        </a-form-item>
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol">
          <span slot="label">
            {{ $t('显示名称') }}
            <a-tooltip :title="$t('同一模块下，不允许重复。输入范围：2-20个字符。')">
              <a-icon type="question-circle" />
            </a-tooltip>
          </span>
          <a-auto-complete
            v-decorator="[
              'info[name]',
              {
                initialValue: data.name,
                rules: [
                  { required: true, message: $t('请输入显示名称') },
                  { min: 2, message: $t('请输入至少两个字符') },
                  { validator: checkName }
                ]
              }
            ]"
            @focus="getNameList('focus')"
            @change="handleChangeName"
          >
            <template slot="dataSource">
              <a-select-option
                v-for="nameItem in nameList"
                :key="nameItem.id"
                :value="nameItem.langZhCn"
                @click="setAlias(nameItem)"
              >
                {{ nameItem.langZhCn }}
              </a-select-option>
              <a-select-option v-if="nameList.length >= 20" key="all" disabled>
                <div style="width: 100%; text-align: center">
                  <a v-if="!noMore" :disabled="nameLoading" @click="getMoreNameList">
                    --{{ nameLoading ? '加载中' : '加载更多' }}--
                  </a>
                  <span v-else>--没有更多数据--</span>
                </div>
              </a-select-option>
            </template>

            <a-input>
              <set-lang slot="addonAfter" />
            </a-input>
          </a-auto-complete>
        </a-form-item>
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol">
          <span slot="label">
            {{ $t('系统名称') }}
            <a-tooltip placement="top">
              <template slot="title">
                <span>
                  {{
                    $t(
                      '系统名称创建时由{显示名称}拼音全拼组成，使用小驼峰命名法。如：{显示名称}="我爱祖国"，自动生成的{系统名称}为"woAiZuGuo"。同一模块下，不允许重复。一旦创建，不允许修改。'
                    )
                  }}
                </span>
              </template>
              <a-icon type="question-circle" />
            </a-tooltip>
          </span>
          <a-input
            v-decorator="[
              'info[alias]',
              {
                initialValue: data.alias,
                rules: [
                  { required: true, message: $t('请输入系统名称') },
                  {
                    pattern: new RegExp(/^([a-z]+[A-Z]{0,1}[a-z]*)+$/),
                    message: $t('仅支持输入大小写字母，且首字母小写，驼峰形式，禁止出现连续大写字母')
                  }
                ]
              }
            ]"
            :disabled="aliasDisabled"
          ></a-input>
        </a-form-item>
        <a-form-item :label="$t('分类名称')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-auto-complete
            v-decorator="[
              'info[category]',
              {
                initialValue: data.category || '',
                rules: [{ required: true, message: $t('请输入分类名称') }]
              }
            ]"
            :data-source="typeList"
            @search="onSearch"
            @change="onSearch"
            @focus="clickCategory"
          ></a-auto-complete>
        </a-form-item>
        <a-form-item :label="$t('ES')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-switch
            v-decorator="['info[enableEs]', { initialValue: data.enableEs, valuePropName: 'checked' }]"
            :checkedChildren="$t('启用')"
            :unCheckedChildren="$t('禁用')"
          />
        </a-form-item>
        <a-form-item
          v-if="config.action === 'edit'"
          :label="$t('最后修改人')"
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
        >
          <a-input v-decorator="['updateUser', { initialValue: data.updateUser }]" :disabled="true" />
        </a-form-item>
        <a-form-item
          v-if="config.action === 'edit'"
          :label="$t('最后修改时间')"
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
        >
          <a-input v-decorator="['updateTime', { initialValue: data.updateTime }]" :disabled="true" />
        </a-form-item>
        <a-form-item v-if="userInfo.superAdmin" :label="$t('访问级别')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-radio-group v-decorator="['info[accessLevel]', { initialValue: data.accessLevel || 0 }]">
            <a-radio :value="0" style="width: 100%">{{ $t('可见可编可删') }}</a-radio>
            <a-radio :value="1" style="width: 100%">{{ $t('可见可编不可删') }}</a-radio>
            <a-radio :value="2" style="width: 100%">{{ $t('可见不可编不可删') }}</a-radio>
            <a-radio :value="3" style="width: 100%">{{ $t('不可见不可编不可删') }}</a-radio>
          </a-radio-group>
        </a-form-item>
        <a-form-item :label="$t('备注')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-textarea
            v-decorator="['info[description]', { initialValue: data.description }]"
            :autoSize="{ minRows: 3, maxRows: 6 }"
          />
        </a-form-item>
      </a-form>
    </a-spin>
    <div slot="footer" class="bbar">
      <a-spin :spinning="loading">
        <span slot="indicator"></span>
        <a-button type="primary" @click="handleSubmit">{{ $t('保存') }}</a-button>
        <a-button @click="visible = !visible">{{ $t('关闭') }}</a-button>
      </a-spin>
    </div>
  </a-modal>
</template>
<script>
import debounce from 'lodash/debounce'
import { mapGetters } from 'vuex'
export default {
  i18n: window.lang('admin'),
  components: {
    SetLang: () => import('@/components/SetLang')
  },
  data () {
    this.checkName = debounce(this.checkName, 500)
    this.handleChangeName = debounce(this.handleChangeName, 500)
    this.getNameList = debounce(this.getNameList, 500)
    return {
      config: {},
      labelCol: { span: 5 },
      wrapperCol: { span: 19 },
      visible: false,
      loading: false,
      aliasDisabled: false,
      data: {},
      form: this.$form.createForm(this),
      editable: false,
      typeList: [],
      categoryList: [],
      noMore: false,
      nameLoading: false,
      nameList: [],
      nameParams: {
        pageNo: 1,
        pageSize: 20
      },
      chooseAlias: false
    }
  },
  computed: {
    ...mapGetters(['userInfo'])
  },
  methods: {
    show (config) {
      this.visible = true
      this.loading = true
      this.config = config
      this.aliasDisabled = config.action === 'edit'
      this.nameList = []
      this.axios({
        url: this.config.url,
        data: Object.assign({ action: 'get', tableId: config.record ? config.record.tableId : 0 })
      }).then((res) => {
        this.loading = false
        this.data = res.result.data
      })
      this.axios({
        url: '/admin/table/searchCategory',
        data: {
          type: 'table',
          tableId: this.config.tableId,
          category: ''
        }
      }).then(res => {
        this.typeList = res.result.data.filter(item => item)
        this.categoryList = res.result.data
      })
    },
    // 自动完成搜索
    onSearch (val) {
      if (val) {
        this.typeList = this.categoryList.filter(item => item && item.includes(val))
      } else {
        this.typeList = JSON.parse(JSON.stringify(this.categoryList))
      }
    },
    clickCategory () {
      const val = this.$t(this.form.getFieldValue('info[category]'))
      this.typeList = this.categoryList.filter(item => item && item.includes(val))
    },
    getNameList (type) {
      const val = this.$t(this.form.getFieldValue('info[name]'))
      if (!type || !this.nameList.length) {
        this.nameLoading = true
        this.axios({
          url: '/admin/systemLibrary/searchNameList',
          data: {
            pageNo: this.nameParams.pageNo,
            pageSize: this.nameParams.pageSize,
            sortField: 'id',
            sortOrder: 'descend',
            init: 'true',
            langName: val
          }
        }).then(res => {
          this.nameLoading = false
          if (!res.code) {
            this.nameList = this.nameList.concat(res.result.data)
            this.noMore = res.result.data.length < this.nameParams.pageSize
          } else {
            this.setAlias({})
          }
        })
      }
    },
    setAlias (item) {
      if (this.config.action === 'add') {
        const { setFieldsValue } = this.form
        if (item.systemNumber) {
          setFieldsValue({ 'info[alias]': item.systemNumber })
        } else {
          const pinyin = require('js-pinyin')
          const reg = new RegExp(/^(?![0-9]|_)[a-zA-Z0-9_]+$/)
          const reg2 = new RegExp(/^[a-zA-Z0-9_]+$/)
          const string = item.langZhCn
          let val = ''
          if (string.length <= 1) {
            val = pinyin.getFullChars(string).toLowerCase()
          } else {
            const str1 = pinyin.getFullChars(string.substring(0, 1)).toLowerCase()
            const latterStr = string.substring(1, string.length)
            const str2Arr = latterStr.split('').map(item => {
              const itemPinyin = pinyin.getFullChars(item).toLowerCase()
              return itemPinyin[0].toUpperCase() + itemPinyin.substring(1, itemPinyin.length)
            })
            const str2 = str2Arr.join('')
            val = str1 + str2
          }
          val = val.split('')
          this.getVal(val, reg)
          if (val[0]) {
            val[0] = val[0].toLowerCase()
          }
          val = val.filter(item => {
            return reg2.test(item)
          })
          setFieldsValue({ 'info[alias]': val.join('') })
        }
        this.chooseAlias = true
      }
    },
    // 根据显示名称赋值系统名称
    handleChangeName (e) {
      this.nameParams = {
        pageNo: 1,
        pageSize: 20
      }
      this.nameList = []
      if (this.config.action === 'add' && !this.chooseAlias) {
        const { setFieldsValue, validateFields } = this.form
        const pinyin = require('js-pinyin')
        const reg = new RegExp(/^(?![0-9]|_)[a-zA-Z0-9]+$/)
        const reg2 = new RegExp(/^[a-zA-Z0-9]+$/)
        const string = e
        let val = ''
        if (string.length <= 1) {
          val = pinyin.getFullChars(string).toLowerCase()
        } else {
          const str1 = pinyin.getFullChars(string.substring(0, 1)).toLowerCase()
          const latterStr = string.substring(1, string.length)
          const str2Arr = latterStr.split('').map(item => {
            const itemPinyin = pinyin.getFullChars(item).toLowerCase()
            return itemPinyin[0].toUpperCase() + itemPinyin.substring(1, itemPinyin.length)
          })
          const str2 = str2Arr.join('')
          val = str1 + str2
        }
        val = val.split('')
        this.getVal(val, reg)
        if (val[0]) {
          val[0] = val[0].toLowerCase()
        }
        val = val.filter(item => {
          return reg2.test(item)
        })
        setFieldsValue({ 'info[alias]': val.join('') })
        this.$nextTick(() => {
          validateFields(['info[alias]'], { force: true })
        })
      }
      this.chooseAlias = false
      this.getNameList()
    },
    getMoreNameList () {
      this.nameParams.pageNo++
      this.getNameList()
    },
    // 递归判断是否首字不是数字
    getVal (val, reg) {
      if (!reg.test(val[0])) {
        val.shift()
        this.getVal(val, reg)
      }
    },
    // 显示名称验证是否重复
    checkName (rule, value, callback) {
      this.axios({
        url: '/admin/table/checkUnique',
        data: {
          id: this.config.record ? this.config.record.id : null,
          module: this.config.module,
          name: value
        }
      }).then(res => {
        if (res.code) {
          callback(res.message)
        } else {
          callback()
        }
      })
    },
    handleSubmit () {
      const { form: { validateFields } } = this
      validateFields((errors, values) => {
        if (!errors) {
          this.loading = true
          values.info.module = this.config.module
          values.info.category = values.info.category ? values.info.category.replace(/\s+/g, '') : ''
          this.axios({
            url: this.config.url,
            data: Object.assign(values, { action: 'submit', tableId: this.data.tableId })
          }).then((res) => {
            this.loading = false
            if (res.code) {
              this.$message.warning(res.message)
            } else {
              this.visible = false
              this.$emit('ok', values)
              this.$message.success(res.message)
            }
          })
        }
      })
    }
  }
}
</script>
