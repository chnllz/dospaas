<template>
  <div class="box">
    <a-spin :spinning="loading">
      <user-table-form-view
        ref="userTableFormView"
        :params="{
          tableName,
          template,
          fieldRule,
          parentParams: params,
          templateOther: template,
          action: 'edit',
          page: 'over'
        }"
        :formThis="formThis"
      />
      <div v-if="bbarshow" class="footer">
        <component :is="item.component" v-for="(item, index) in formViewButtons" v-show="item.visible" :key="index" />
      </div>
    </a-spin>
  </div>
</template>
<script>
import { mapActions, mapGetters } from 'vuex'
export default {
  i18n: window.lang('admin'),
  components: {
    UserTableFormView: () => import('@/views/admin/General/UserTableFormView')
  },
  data () {
    return {
      visible: false,
      loading: false,
      tableName: '',
      template: [],
      fieldRule: [],
      remarksRule: [],
      remarksMaxRows: 4,
      remarksMinRows: 2,
      handleFormRules: [],
      handleWayData: [],
      orderType: [],
      templateOther: [],
      params: {
        labelWidth: 100,
        url: '/admin/user/edit',
        templateId: '6885920450de450294d1a95b171bdcd7'
      },
      beforeSubmit: '',
      formViewButtons: [],
      templateInit: [],
      templateCom: {},
      formThis: this,
      bbarshow: false
    }
  },
  computed: {
    ...mapGetters(['setting'])
  },
  created () {
    this.show()
  },
  methods: {
    ...mapActions(['UserInfo', 'Logout']),
    show () {
      const _this = this
      this.visible = true
      this.loading = true
      this.UserInfo().then(res => {
        this.data = res.result
        this.params.record = this.data
        this.axios({
          url: '/admin/general/edit',
          data: {
            action: 'edit',
            id: this.data.id,
            listTemplateId: '38d5a04eab7043cd9b4b612200e5ab8b',
            templateId: '6885920450de450294d1a95b171bdcd7'
          }
        }).then(res => {
          this.loading = false
          this.tableName = res.result.tableName
          this.record = res.result.data
          this.beforeSubmit = res.result.templateScript && res.result.templateScript.beforeSubmit ? res.result.templateScript.beforeSubmit : ''
          this.templateInit = res.result.template
          this.templateInit.forEach(item => {
            if (item.type === 'component') {
              this.templateCom[item.value] = item
            }
          })
          this.formViewButtons = res.result.formViewButtons || []
          this.formViewButtons.forEach(item => {
            const funcStr = `return (_this) => {  return ${item.attribute} }`
            // eslint-disable-next-line no-new-func
            const func = new Function(funcStr)
            const obj = func()(_this)
            if (obj.template) {
              obj.template = obj.template.replace(/[\r\n]/g, '')
            }
            item.component = obj
          })
          this.bbarshow = !this.formViewButtons.every(item => !item.visible)
          this.template = JSON.parse(JSON.stringify(res.result.template)) || []
          this.templateOther = JSON.parse(JSON.stringify(res.result.template)) || []
          // 表单初始化loader
          if (res.result.templateScript && res.result.templateScript.afterInit) {
            var initAttribute = res.result.templateScript.afterInit
            var initTemplate = {
              type: 'component',
              attribute: initAttribute
            }
            this.template.push(initTemplate)
          }
          this.fieldRule = res.result.fieldRule
          const getComponent = (array) => {
            array.forEach((item, index) => {
              if (item.columns) {
                getComponent(item.columns)
              } else if (item.trs) {
                getComponent(item.trs)
              } else if (item.list) {
                getComponent(item.list)
              } else {
                if (item.type === 'component') {
                  const funcStr = `return (_this) => {  return ${item.attribute} }`
                  // eslint-disable-next-line no-new-func
                  const func = new Function(funcStr)
                  const obj = func()(_this)
                  if (obj.template) {
                    obj.template = obj.template.replace(/[\r\n]/g, '')
                  }
                  item.component = obj
                }
              }
            })
          }
          getComponent(this.template)
        })
      })
    },
    // 上传图片限制
    beforeUploadImage (file, fileList, item) {
      return new Promise((resolve, reject) => {
        const isImage = file.type
        if (!isImage.includes('image')) {
          this.$message.error(this.$t('上传的是非图片格式'))
          return reject(file)
        }
        return resolve(file)
      })
    },
    handleImageChange ({ fileList }) {
      this.imageFileList = fileList
    },
    handleImagePreview (file) {
      this.imagePreviewUrl = file.url || file.thumbUrl
      this.imagePreviewVisible = true
    },
    // 提交表单
    handleSubmit (data) {
      const beforeSubmit = this.beforeSubmit
      this.loading = true
      if (beforeSubmit) {
        const parent = this
        const str = 'return ' + beforeSubmit
        // eslint-disable-next-line no-new-func
        const func = new Function(str)
        const flag = func()(parent)
        if (flag) {
          this.$refs.userTableFormView.handleSubmit(data).then(res => {
            if (!res) {
              this.visible = false
            }
          }).finally(() => {
            this.loading = false
          })
        }
      } else {
        this.$refs.userTableFormView.handleSubmit(data).then(res => {
          if (!res) {
            this.visible = false
          }
        }).finally(() => {
          this.loading = false
        })
      }
    }
  }
}
</script>
<style lang="less" scoped>
.box {
  width: 600px;
  min-height: 600px;
}
.footer {
  margin-top: 12px;
}
</style>
