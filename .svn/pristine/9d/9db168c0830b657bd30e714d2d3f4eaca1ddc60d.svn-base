import request from '@/utils/request'
import { BasicLayout, RouteView, BlankLayout } from '@/layouts'
import store from '@/store'
import storage from '@/utils/storage'
import vueThis from '@/main'
import Vue from 'vue'
// 前端路由表
const constantRouterComponents = {
  // 基础页面 layout 必须引入
  BasicLayout: BasicLayout,
  BlankLayout: BlankLayout,
  RouteView: RouteView
}

const getComponent = (item) => {
  if (item.children) {
    return constantRouterComponents[item.component || item.key] || (() => import('@/views/' + item.dynamicComponent))
  }
  const innerComponent = constantRouterComponents[item.component || item.key] || (() => import('@/views/' + item.dynamicComponent))
  const outComponent = {
    name: item.name,
    template: '<div style="height: 100%; width: 100%; display: flex; flex-direction: column"><innerComponent/></div>'
  }
  const RouteExit = Vue.component(outComponent.name, {
    name: outComponent.name,
    components: { innerComponent },
    template: outComponent.template
  })
  return RouteExit
}

/**
 * 动态生成菜单
 * @param token
 * @returns {Promise<Router>}
 */
export const generatorDynamicRouter = token => {
  return new Promise((resolve, reject) => {
    request({
      url: '/admin/index/menu'
    })
      .then(res => {
        res.result = res.result.map(item => {
          const obj = {
            name: 'm' + item.id,
            id: item.menuId,
            parentId: item.parentMenuId,
            view: item.view,
            viewMode: item.viewMode,
            meta: {},
            query: {}
          }
          item.view = item.view ? [item.view] : []
          item.view.forEach(viewItem => {
            if (viewItem.type === 'dataWindow' || viewItem.type === 'configWindow') {
              // 数据窗口 参数配置
              const params = viewItem.params.split('?')
              const viewPathArray = params[0].split('/')
              const templateId = viewPathArray[viewPathArray.length - 1]
              viewItem.params = viewItem.type === 'dataWindow' ? 'admin/General/UserTable' : 'admin/ConfigManage/ConfigForm'
              item.param = params[1] ? `templateId=${templateId}&` + params[1] : `templateId=${templateId}`
              viewItem.query = {
                templateId: templateId
              }
            } else if (viewItem.type === 'componentView') {
              // 组合视图
              item.viewMode = 1
              viewItem.query = {}
            } else if (viewItem.type === 'redirectUrl') {
              // 外部链接
              viewItem.query = {}
              const params = viewItem.params.split('?')
              viewItem.params = 'admin/General/RedirectUrl'
              viewItem.query.url = params[0]
              let vars = []
              if (params[1]) {
                vars = params[1].split('&')
              }
              for (let i = 0; i < vars.length; i++) {
                const pair = vars[i].split('=')
                viewItem.query[pair[0]] = pair[1]
              }
            } else {
              viewItem.query = {}
              const params = viewItem.params ? viewItem.params.split('?') : []
              let vars = []
              item.param = params[1] ? params[1] : ''
              vars = item.param.split('&')
              for (let i = 0; i < item.param.length; i++) {
                const pair = vars[i].split('=')
                viewItem.query[pair[0]] = pair[1]
              }
            }
          })
          if (!item.viewMode) {
            if (item.view[0] && !item.view[0].params) {
              obj.component = 'RouteView'
            } else if (res.result.some(someItem => someItem.parentMenuId === item.menuId) && item.view[0] && item.view[0].params) {
              obj.component = 'RouteView'
              item.view[0].params = ''
            } else {
              obj.dynamicComponent = item.view[0] && item.view[0].params
            }
          } else {
            obj.dynamicComponent = 'admin/MenuTabs'
          }
          obj.meta = {
            icon: item.icon,
            show: !!item.display,
            title: vueThis.$t(item.menuName)
          }
          const vars = item.param ? item.param.split('&').filter(item => item) : []
          if (vars.length) {
            for (let i = 0; i < vars.length; i++) {
              const pair = vars[i].split('=')
              obj.query[pair[0]] = pair[1]
            }
          }
          return obj
        })
        sessionStorage.setItem('menuData', JSON.stringify(res.result))
        // 根级菜单
        const rootRouter = {
          name: 'index',
          path: '/',
          component: 'BasicLayout',
          redirect: store.getters.userInfo.defaultRoute,
          // redirect: { path: '/m_1039', query: { url: 'http://localhost/001.doscss/base/home/init' } },
          meta: {
            title: '首页'
          },
          children: []
        }
        const { result } = res
        result.forEach(item => {
          item.viewConfig = JSON.parse(JSON.stringify(item.view))
          item.view = item.view ? [item.view] : []
          if (item.view[0] && item.view[0].type === 'componentView') {
            item.view = []
          }
        })
        const menuNav = []
        const childrenNav = []
        // 后端数据, 根级树数组,  根级 PID
        listToTree(result, childrenNav, null, null, [])
        rootRouter.children = childrenNav
        menuNav.push(rootRouter)
        const routers = generator(menuNav)
        routers.push({
          // 前端未找到页面路由（固定不用改）
          path: '*',
          redirect: '/404',
          hidden: true
        })
        let topMenu
        const getTop = (array) => {
          if (array[0].children && array[0].children.length) {
            getTop(array[0].children)
          } else {
            topMenu = array[0]
          }
        }
        getTop(routers)
        const defaultRoute = {
          path: topMenu.path,
          query: topMenu.query
        }
        store.getters.userInfo.defaultRoute = routers[0].redirect = defaultRoute
        store.getters.userInfo.messageMenu = null
        store.getters.userInfo.misscallMenu = null
        store.getters.userInfo.userInfoMenu = null
        const getPath = (array) => {
          array.forEach(item => {
            if (item.children && item.children.length) {
              getPath(item.children)
            } else {
              if (item.meta && item.meta.component === 'admin/Message/Remind') {
                store.getters.userInfo.messageMenu = item.path
              } else if (item.meta && item.meta.component === 'statistic/CallrecordMisscall') {
                store.getters.userInfo.misscallMenu = item.path
              } else if (item.meta && item.meta.component && item.meta.view && item.meta.view.length > 0) {
                const dynamicComponentArr = item.meta.view.map(im => im.dynamicComponent)
                const dynamicComponentStr = dynamicComponentArr.join(',')
                if (dynamicComponentStr.indexOf('admin/User/UserInfo') !== -1) {
                  store.getters.userInfo.userInfoMenu = item.path // 个人中心
                }
              }
            }
          })
        }
        getPath(routers)
        resolve(routers)
      })
      .catch(err => {
        reject(err)
      })
  })
}
/**
 * 格式化树形结构数据 生成 vue-router 层级路由表
 *
 * @param routerMap
 * @param parent
 * @returns {*}
 */
export const generator = (routerMap, parent) => {
  return routerMap.map(item => {
    const { title, show, hideChildren, hiddenHeaderContent, target, icon } = item.meta || {}
    const reg = /\${?([\w+\s]+)}?/g
    for (const i in item.query) {
      if (reg.test(item.query[i])) {
        if (item.query[i].match(reg).length) {
          let str = item.query[i].match(reg)[0]
          str = str.split('${')[1]
          str = str.split('}')[0]
          const key = storage.get(str)
          item.query[i] = item.query[i].replace(/\${?([\w+\s]+)}?/g, key)
        }
      }
    }

    const currentRouter = {
      // 如果路由设置了 path，则作为默认 path，否则 路由地址 动态拼接生成如 /admin/workplace
      path: item.path || `${(parent && parent.path) || ''}/${item.key}`,
      // 路由名称，建议唯一
      name: item.name || item.key || '',
      // 该路由对应页面的 组件 :方案1
      // component: constantRouterComponents[item.component || item.key],
      // 该路由对应页面的 组件 :方案2 (动态加载)
      // component: constantRouterComponents[item.component || item.key] || () => import(`@/views/${item.component}`),
      // component: constantRouterComponents[item.component || item.key] || (() => import(`@/views/${item.dynamicComponent}`)),
      // component: constantRouterComponents[item.component || item.key] || (() => import('@/views/' + item.dynamicComponent)),
      component: getComponent(item),

      // meta: 页面标题, 菜单图标, 页面权限(供指令权限用，可去掉)
      meta: {
        title: title,
        icon: item.parentId ? undefined : icon,
        hiddenHeaderContent: hiddenHeaderContent,
        target: target,
        permission: item.name,
        component: item.dynamicComponent || item.component,
        view: item.view,
        viewMode: item.viewMode,
        viewConfig: item.viewConfig
      },
      // post参数
      params: item.params,
      // get参数
      query: item.query
    }
    // 是否设置了隐藏菜单
    if (show === false) {
      currentRouter.hidden = true
    }
    // 是否设置了隐藏子菜单
    if (hideChildren) {
      currentRouter.hideChildrenInMenu = true
    }
    // 为了防止出现后端返回结果不规范，处理有可能出现拼接出两个 反斜杠
    if (!currentRouter.path.startsWith('http')) {
      currentRouter.path = currentRouter.path.replace('//', '/')
    }
    // 重定向
    item.redirect && (currentRouter.redirect = item.redirect)
    // 是否有子菜单，并递归处理
    if (item.children && item.children.length > 0) {
      // Recursion
      currentRouter.children = generator(item.children, currentRouter)
    }
    return currentRouter
  })
}

/**
 * 数组转树形结构
 * @param list 源数组
 * @param tree 树
 * @param parentId 父ID
 */
const listToTree = (list, tree, parentId, type, viewList) => {
  list.forEach(item => {
    // 判断是否为父级菜单
    if (item.parentId === parentId) {
      if (type === 'componentView') {
        viewList.push(item)
      } else {
        const child = {
          ...item,
          key: item.key || item.name,
          children: []
        }
        const type = item.viewConfig ? item.viewConfig.type : null
        // 迭代 list， 找到当前菜单相符合的所有子菜单
        listToTree(list, child.children, item.id, type, item.view)
        // 删掉不存在 children 值的属性
        if (child.children.length <= 0) {
          delete child.children
        }
        // 加入到树中
        tree.push(child)
      }
    }
  })
}
