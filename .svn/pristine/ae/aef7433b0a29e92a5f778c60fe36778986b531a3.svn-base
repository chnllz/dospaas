<template>
  <a-drawer
    :title="config.action === 'add' ? $t('添加') : $t('编辑') + ':' + config.title"
    :width="600"
    :visible="visible"
    @close="visible = !visible"
  >
    <a-spin :spinning="loading">
      <a-form :form="form">
        <a-alert
          v-if="config.action === 'add'"
          showIcon
          :message="$t('如果没有修改表格的默认排序方案（按{排序}升序），新建的数据会展现在最后一页')"
          type="info"
          style="margin-bottom: 8px"
        />
        <a-form-item v-if="config.type === 'son'" :label="$t('上级字典')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-cascader
            v-decorator="['parentDictDataNumber', { initialValue: data.parentDictDataNumber || undefined }]"
            :show-search="true"
            option-filter-prop="children"
            :placeholder="$t('作为一级字典')"
            :options="dictTreeData"
            changeOnSelect
            @change="
              (e) => {
                config.parentDictDataNumber = e.length ? e[e.length - 1] : null
              }
            "
          />
        </a-form-item>
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol">
          <span slot="label">
            {{ $t('显示名称') }}
            <a-tooltip :title="$t('不允许重复。')">
              <a-icon type="question-circle" />
            </a-tooltip>
          </span>
          <a-textarea
            v-if="config.action === 'add'"
            v-decorator="[
              'dictDataName',
              {
                initialValue: data.dictDataName,
                rules: [{ required: true, message: $t('请输入字典名称') }, { validator: checkName }]
              }
            ]"
            :autoSize="{ minRows: 6 }"
            :placeholder="$t('一行一个，可以进行批量添加')"
            @change="changeName"
          />
          <a-input
            v-else
            v-decorator="[
              'dictDataName',
              {
                initialValue: data.dictDataName,
                rules: [{ required: true, message: $t('请输入字典名称') }, { validator: checkName }]
              }
            ]"
            @change="changeName"
          >
            <set-lang slot="addonAfter" />
          </a-input>
        </a-form-item>
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol">
          <span slot="label">
            {{ $t('系统名称') }}
            <a-tooltip placement="top">
              <template slot="title">
                <span>
                  {{
                    $t(
                      '系统名称创建时由{显示名称}拼音全拼组成，使用小驼峰命名法。如：{显示名称}="我爱祖国"，自动生成的{系统名称}为"woAiZuGuo"。同一模块下，不允许重复。'
                    )
                  }}
                </span>
              </template>
              <a-icon type="question-circle" />
            </a-tooltip>
          </span>
          <a-input
            v-if="config.action === 'edit'"
            v-decorator="[
              'dictDataNumber',
              {
                initialValue: data.dictDataNumber,
                rules: [
                  { required: true, message: $t('请输入字典系统名称') },
                  {
                    validator: checkSystemName
                  }
                ]
              }
            ]"
            :disabled="editable"
          >
            <template v-if="config.action === 'edit'">
              <a-icon v-if="editable" slot="addonAfter" type="edit" style="cursor: pointer" @click="handleEdit" />
              <a-icon v-else slot="addonAfter" type="edit" style="cursor: pointer" @click="editable = true" />
            </template>
          </a-input>
          <a-textarea
            v-else
            v-decorator="[
              'dictDataNumber',
              {
                initialValue: data.dictDataNumber,
                rules: [
                  { required: true, message: $t('请输入字典系统名称') },
                  {
                    validator: checkSystemName
                  }
                ]
              }
            ]"
            :autoSize="{ minRows: 6 }"
            :placeholder="$t('一行一个，可以进行批量添加')"
          />
        </a-form-item>
        <a-form-item :label="$t('状态')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-radio-group v-decorator="['status', { initialValue: data.status }]">
            <a-radio :value="1">{{ $t('启用') }}</a-radio>
            <a-radio :value="0">{{ $t('禁用') }}</a-radio>
          </a-radio-group>
        </a-form-item>
        <a-form-item hidden :label="$t('字典类型')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-radio-group v-decorator="['dictMode', { initialValue: data.dictMode }]">
            <a-radio :value="0">{{ $t('平面字典') }}</a-radio>
            <a-radio :value="1">{{ $t('树形字典') }}</a-radio>
          </a-radio-group>
        </a-form-item>
        <a-form-item v-if="userInfo.superAdmin" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <span slot="label">
            {{ $t('访问级别') }}
            <a-tooltip placement="top">
              <template slot="title">
                <span>
                  {{
                    $t(
                      '请慎重修改。访问级别是为了保护系统重要配置项而设计的，防止因修改系统必须的某些配置内容，而导致系统错误。'
                    )
                  }}
                </span>
              </template>
              <a-icon type="question-circle" />
            </a-tooltip>
          </span>
          <a-select v-decorator="['accessLevel', { initialValue: data.accessLevel || 0 }]">
            <a-select-option :key="0" :value="0">{{ $t('可见可编可删') }}</a-select-option>
            <a-select-option :key="1" :value="1">{{ $t('可见可编不可删') }}</a-select-option>
            <a-select-option :key="2" :value="2">{{ $t('可见不可编不可删') }}</a-select-option>
            <a-select-option :key="3" :value="3">{{ $t('不可见不可编不可删') }}</a-select-option>
          </a-select>
        </a-form-item>
        <a-form-item :label="$t('备注')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-textarea v-decorator="['remarks', { initialValue: data.remarks }]" :autoSize="{ minRows: 6 }" />
        </a-form-item>
      </a-form>
      <div class="bbar">
        <a-button type="primary" @click="handleSubmit">
          {{ $t('保存') }}
        </a-button>
        <a-button @click="visible = !visible">{{ $t('关闭') }}</a-button>
      </div>
    </a-spin>
  </a-drawer>
</template>
<script>
import debounce from 'lodash/debounce'
import { mapGetters } from 'vuex'
export default {
  i18n: window.lang('admin'),
  components: {
    SetLang: () => import('@/components/SetLang')
  },
  data () {
    this.checkName = debounce(this.checkName, 1000)
    this.checkSystemName = debounce(this.checkSystemName, 500)
    this.setField = debounce(this.setField, 2000)
    return {
      config: {},
      labelCol: { span: 5 },
      wrapperCol: { span: 19 },
      visible: false,
      loading: false,
      form: this.$form.createForm(this),
      dictTreeData: [],
      fieldList: {}, // 保存数据
      fieldArr: [], // 根据数据表获取相应字段数组
      tableList: [],
      tableName: [],
      data: {},
      editable: false
    }
  },
  computed: {
    ...mapGetters(['userInfo'])
  },
  methods: {
    showAdd (config) {
      this.visible = true
      this.loading = true
      this.config = config
      this.axios({
        url: 'admin/dict/getData',
        data: {
          dictCategoryNumber: config.dictCategoryNumber,
          parentDictDataNumber: config.parentDictDataNumber
        }
      }).then((res) => {
        this.loading = false
        this.form.resetFields()
        this.data = {
          parentDictDataNumber: null,
          // dictMode: config.record.dictMode,
          status: 1
        }
        this.dictTreeData = res.result.dictTreeData || []
        this.getDictTreeData(this.dictTreeData)
        this.editable = false
      })
    },
    showEdit (config) {
      this.visible = true
      this.loading = true
      this.config = config
      this.axios({
        url: 'admin/dict/getData',
        data: {
          dictCategoryNumber: config.dictCategoryNumber,
          parentDictDataNumber: config.parentDictDataNumber,
          id: config.record.id
        }
      }).then((res) => {
        this.loading = false
        this.form.resetFields()
        this.data = config.record
        this.data.parentDictDataNumber = res.result.fullDictDataNumberList
        this.dictTreeData = res.result.dictTreeData || []
        this.getDictTreeData(this.dictTreeData)
        console.log('this.dictTreeData', this.dictTreeData)
        console.log('this.data', this.data)
        this.editable = true
      })
    },
    // 对 a-cascader 的数据源进行处理
    getDictTreeData (array) {
      array.forEach(item => {
        item.value = item.dictDataNumber
        item.label = item.dictDataName
        if (item.children && item.children.length) {
          this.getDictTreeData(item.children)
        } else {
          delete item.children
        }
      })
    },
    // 系统名称校验
    checkSystemName (rule, nameStr, callback) {
      const values = nameStr.split('\n')
      if (!nameStr) {
        callback()
      }
      let errorStr = ''
      for (let i = 0; i < values.length; i++) {
        const value = values[i]
        const reg = new RegExp(/^[_\-\w]{1,}$/)
        const reg1 = new RegExp(/(?<=[_-])([-_])/)
        if (!(!reg1.test(value) && reg.test(value))) {
          errorStr = this.$t('请输入至少两位数，且不允许连续出现-或_')
        }
      }
      if (errorStr) {
        callback(errorStr)
      } else {
        callback()
      }
    },
    // 显示名称验证是否重复
    checkName (rule, value, callback) {
      if (value) {
        this.axios({
          url: '/admin/dict/checkData',
          data: {
            dictDataName: value,
            // checkType: 'data',
            // action: this.config.action,
            id: this.config.record && this.config.action === 'edit' ? this.config.record.id : undefined,
            dictCategoryNumber: this.config.dictCategoryNumber,
            parentDictDataNumber: this.config.parentDictDataNumber
          }
        }).then(res => {
          if (res.code) {
            callback(res.message)
          } else {
            callback()
          }
        })
      } else {
        callback()
      }
    },
    setField (val) {
      const { setFieldsValue, getFieldsValue } = this.form
      this.$nextTick(() => {
        if (val !== getFieldsValue()['dictDataName']) {
          setFieldsValue({ 'dictDataName': val })
        }
        if (!val) {
          setFieldsValue({ 'dictDataNumber': '' })
          return
        }
        this.axios({
          url: 'admin/general/getPinYin',
          params: {
            content: val,
            retainWord: true
          }
        }).then(res => {
          setFieldsValue({
            'dictDataNumber': res.result.pinYin
            // 'dictDataName': res.result.content
          })
        })
      })
    },
    // 自动生成系统名称
    changeName (e) {
      console.log('e', e, this.editable)
      if (!this.editable || this.config.action === 'add') {
        let val = e.target.value
        val = val.replace(/\s{2,}/, '\n')
        this.setField(val)
      }
    },
    // // 递归判断是否首字不是数字
    getVal (val, reg) {
      if (!reg.test(val[0])) {
        val.shift()
        this.getVal(val, reg)
      }
    },
    handleEdit () {
      const that = this
      this.$confirm({
        title: this.$t('您确认要修改系统名称吗？'),
        content: this.$t('修改系统名称会造成系统未知错误，强烈建议不要修改'),
        onOk () {
          that.editable = false
        }
      })
    },
    // 表单提交
    handleSubmit () {
      const { form: { validateFields } } = this
      validateFields((errors, values) => {
        if (!errors) {
          const data = {
            parentDictDataNumber: values.parentDictDataNumber && values.parentDictDataNumber.length ? values.parentDictDataNumber[values.parentDictDataNumber.length - 1] : null,
            dictDataName: values.dictDataName,
            dictDataNumber: values.dictDataNumber,
            status: values.status,
            remarks: values.remarks
          }
          if (this.config.action === 'edit') {
            data.id = this.config.record.id
          } else {
            data.dictCategoryNumber = this.config.record.dictCategoryNumber
          }
          this.loading = true
          this.axios({
            url: this.config.url,
            data
          }).then((res) => {
            this.loading = false
            if (res.code === 0) {
              this.visible = false
              this.$emit('ok', values)
              this.form.resetFields()
              this.$message.success(res.message)
            } else {
              this.$message.error(res.message)
            }
          })
        }
      })
    }
  }
}
</script>
