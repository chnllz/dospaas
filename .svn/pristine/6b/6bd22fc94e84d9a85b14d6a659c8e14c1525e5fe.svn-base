<template>
  <div>
    <iframe
      id="iframeMapViewComponent"
      ref="frame"
      name="iframeMap"
      :src="pageUrl"
      width="100%"
      height="800px"
      frameborder="0"
      scrolling="no"
      allow="payment"
    ></iframe>
    <a-modal v-model="visible" title="Basic Modal" @ok="handleOk">
      <a-form-item label="id">
        <a-input :value="id"></a-input>
      </a-form-item>
      <a-form-item label="名称">
        <a-input v-model="name"></a-input>
      </a-form-item>
    </a-modal>
    <flow-attr ref="FlowAttr" :workflowId="workflowId" :flowData="flowData" :select="currentSelect" @ok="handleOk" />
  </div>
</template>

<script>
export default {
  components: {
    FlowAttr: () => import('../admin/Flow/modules/FlowAttr')
  },
  props: {
    workflowId: {
      type: String,
      default: null
    }
  },
  data () {
    return {
      pageUrl: 'http://localhost:8080/drawio/src/main/webapp/index.html?dev=1',
      visible: false,
      graph: null,
      id: 0,
      name: '',
      cell: {},
      flowData: { params: { tableId: '07b66955d18b4dd286d2fdacb2dc4e71' } },
      currentSelect: { type: null, id: this.id, nodeName: this.name },
      data: {}
    }
  },
  deactivated () {
    if (this.$parent.$parent.$parent.$parent.$el.innerText.indexOf('流程管理') === -1) {
      this.$emit('hide')
      // this.$el.parentNode.removeChild(this.$el)
    }
  },
  mounted () {
    // 整个视图的信息
    this.axios({
      url: '/admin/workflow/generate',
      data: { workflowId: this.workflowId, action: 'get' }
    }).then(res => {
      if (!res.code) {
        this.data = res.result.data
      }
    })
    window.top['drawio'] = {}
    // 载入视图信息
    window.top['drawio']['fileInit'] = () => {
      return {
        title: '测试',
        data: this.data.flow
      }
    }
    // 保存修改
    window.top['drawio']['save'] = (res) => {
      this.onSave(res)
    }
    // 退出drawio
    window.top['drawio']['exit'] = (res) => {
      this.$emit('hide')
    }
    // 删除节点信息
    window.top['drawio']['delete'] = (res) => {
      this.axios({
        url: 'admin/data/delete',
        data: {
          tableName: 'admin_w_workflow_node',
          where: {
            fieldName: 'node_id',
            fieldValue: res
          }
        }
      })
    }
    // 双击打开图形编辑
    window.top['drawio']['open'] = (cell, graph) => {
      this.graph = graph
      this.cell = cell
      const type = () => {
        delete this.currentSelect.quoteId
        if (this.cell.style.indexOf('fillColor=#d9d9d9') !== -1) {
          this.currentSelect.quoteId = 'quote_transition' + this.id
          return 'quote_transition'
        }
        if (this.cell.style.indexOf('user_transition') !== -1) return 'user_transition'
        if (this.cell.style.indexOf('start') !== -1) return 'start'
        if (this.cell.style.indexOf('end') !== -1) return 'end'
        if (this.cell.style.indexOf('gateway_explicit') !== -1) return 'gateway_explicit'
        if (this.cell.style.indexOf('edge') !== -1) return 'link'
      }
      this.currentSelect.type = type()
      this.name = cell.value
      this.id = cell.id
      this.currentSelect.id = cell.id
      if (this.currentSelect.type === 'user_transition') {
        const start = cell.value.indexOf(';">') + 3
        const end = cell.value.indexOf('&nbsp;')
        if (end !== -1) {
          this.currentSelect.nodeName = cell.value.slice(start, end)
        } else {
          this.currentSelect.nodeName = cell.value
        }
      } else {
        this.currentSelect.nodeName = cell.value
      }
      this.openDrawer()
    }
  },
  methods: {
    // 保存整个节点视图
    onSave (res) {
      this.axios({
        url: '/admin/workflow/generate',
        data: {
          action: 'submit',
          flow: res,
          id: this.data.id,
          workflowId: this.workflowId
        }
      }).then(res => {
        if (!res.code) {
          this.$message.success(this.$t('保存成功'))
        } else {
          this.$message.error(this.$t('保存失败'))
        }
      })
    },
    // 打开节点编辑时载入数据
    openDrawer () {
      this.axios({
        url: 'admin/data/get',
        data: {
          tableName: 'admin_w_workflow_node',
          where: {
            fieldName: 'node_id',
            fieldValue: this.currentSelect.id
          }
        }
      }).then(res => {
        if (!res.code) {
          this.currentSelect = res.result.data.id ? { ...JSON.parse(res.result.data.setting)['currentSelect'], dbId: res.result.data.id } : { id: this.currentSelect.id, nodeName: this.currentSelect.nodeName, type: this.currentSelect.type }
          this.$refs.FlowAttr.show({ val: this.currentSelect })
        }
      })
    },
    // 提交节点数据后刷新视图
    handleOk (val) {
      const model = this.graph.getModel()
      model.beginUpdate()
      try {
        const cells = this.graph.getEditableCells(this.graph.getSelectionCells())
        const cell = cells[0]
        let label
        // 如果是变迁,要显示更多信息
        if (val.type === 'user_transition') {
          label = ` <div class="" style="position:relative;width:160px;height:100px"><div class="text" style="width:160px;position:absolute;overflow:hidden;white-space:nowrap;text-overflow:ellipsis"> 条件：${val.conditionRemarks}</div>
        <div class="text" style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">子状态：${val.processStatus}</div>
        <div class="text" style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">事件：${val.remarks}</div>
        <hr style="border:1px dashed #969696"/><div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis;">${val.nodeName}&nbsp;</div>
        <div style="width:160px;overflow:hidden;position:absolute;white-space:nowrap;text-overflow:ellipsis">办理人：${val.partuserRemarks}</div></div>`
        } else {
          label = val.nodeName
        }
        model.setValue(cell, label)
      } finally {
        model.endUpdate()
        this.graph.cellEditor.stopEditing(false)
        this.graph.refresh()
      }
      this.visible = false
      // this.cell.value.setAttribute('label', 'hahah')
      // //   this.cell.value.attributes.setNamedItem()
      // window.top['drawio']['handleOk'](this.cell)
      // this.visible = false
    }

  }
}
</script>
