<template>
  <a-config-provider :locale="locale">
    <div class="form-designer-container-9136076486841529">
      <k-header v-if="showHead" :title="title" />
      <!-- 操作区域 start -->
      <operatingArea
        v-if="toolbarsTop"
        :showToolbarsText="showToolbarsText"
        :toolbars="toolbars"
        :recordList="recordList"
        :redoList="redoList"
        @handlePreview="handlePreview"
        @handleOpenImportJsonModal="handleOpenImportJsonModal"
        @handleOpenCodeModal="handleOpenCodeModal"
        @handleOpenJsonModal="handleOpenJsonModal"
        @handleReset="handleReset"
        @handleUndo="handleUndo"
        @handleRedo="handleRedo"
      >
        <template slot="left-action">
          <slot name="left-action"></slot>
        </template>

        <template slot="right-action">
          <slot name="right-action"></slot>
        </template>
      </operatingArea>
      <!-- 操作区域 end -->
      <div
        class="content"
        :class="{
          'show-head': showHead,
          'toolbars-top': toolbarsTop,
          'show-head-and-toolbars-top': toolbarsTop && showHead
        }"
      >
        <!-- 左侧控件区域 start -->
        <aside class="left">
          <div v-if="entranceType === 'appPageDesign'" class="global-set-bar">
            <a-space size="small">
              <!-- <a-button>{{ $t('全局设置') }}</a-button> -->
              <a-button
                @click="
                  () => {
                    setTabbarKey = setTabbarKey === 'setTabbar_1' ? 'setTabbar_0' : 'setTabbar_1'
                    $nextTick(() => {
                      $refs.setTabbar.show()
                    })
                  }
                "
              >
                {{ $t('底部导航栏设置') }}
              </a-button>
              <a-button type="primary" @click="handleSubmitPage">{{ $t('保存') }}</a-button>
            </a-space>
          </div>
          <div v-if="entranceType === 'appPageDesign'" class="global-set-page">
            <handlePage ref="handlePage" @templateChange="templateChange" @handleSetSelectItem="handleSetSelectItem" />
          </div>
          <div class="com-layout-bar">
            <a-tabs class="tabs-flex">
              <a-tab-pane key="1" tab="组件">
                <div style="flex-grow: 1; overflow-y: auto; height: 100%">
                  <h3>
                    <tag-icon />
                    {{ $t('布局控件') }}
                  </h3>
                  <collapseItem
                    :list="layoutArray"
                    @generateKey="generateKey"
                    @handleListPush="handleListPush"
                    @start="handleStart"
                  />
                  <h3>
                    <tag-icon />
                    {{ $t('系统组件') }}
                  </h3>
                  <collapseItem
                    :list="basicsArray"
                    @generateKey="generateKey"
                    @handleListPush="handleListPush"
                    @start="handleStart"
                  />
                </div>
              </a-tab-pane>
              <a-tab-pane v-if="myArray.length > 0" key="2" tab="字段">
                <fields-table
                  :list="myArray"
                  @generateKey="generateKey"
                  @handleListPush="handleListPush"
                  @start="handleStart"
                />
              </a-tab-pane>
            </a-tabs>
          </div>
        </aside>
        <!-- 左侧控件区域 end -->

        <!-- 中间面板区域 start -->
        <section style="height: 100%">
          <!-- 操作区域 start -->
          <operatingArea
            v-if="!toolbarsTop"
            :showToolbarsText="showToolbarsText"
            :toolbars="toolbars"
            :tableType="tableType"
            :recordList="recordList"
            :redoList="redoList"
            :entranceType="entranceType"
            @handlePreview="handlePreview"
            @changeAllStatus="changeAllStatus"
            @saveAs="saveAsvisible = true"
            @querierFormRule="querierFormRule"
            @helpText="getHelpText"
            @formSetting="getFormSetting"
            @handleOpenImportJsonModal="handleOpenImportJsonModal"
            @handleOpenCodeModal="handleOpenCodeModal"
            @handleOpenJsonModal="handleOpenJsonModal"
            @handleReset="handleReset"
            @handleUndo="handleUndo"
            @handleRedo="handleRedo"
            @setFloatBtn="setFloatBtn"
          >
            <template slot="left-action">
              <slot name="left-action"></slot>
            </template>
            <template slot="right-action">
              <slot name="right-action"></slot>
            </template>
          </operatingArea>
          <!-- 操作区域 end -->
          <k-form-component-panel
            ref="KFCP"
            :class="{ 'no-toolbars-top': !toolbarsTop }"
            :data="data"
            :selectItem="selectItem"
            :params="params"
            :noModel="noModel"
            :startType="startType"
            :headerOptionsProps="headerOptions"
            :conditionSetProps="conditionSet"
            :fieldColumns="fieldColumns"
            :fieldCategory="fieldCategory"
            :entranceType="entranceType"
            @handleSetSelectItem="handleSetSelectItem"
            @setHeaderOptions="setHeaderOptions"
            @setCondition="setCondition"
          />
          <!-- 操作区域 start -->
          <k-json-modal ref="jsonModal" />
          <k-code-modal ref="codeModal" />
          <importJsonModal ref="importJsonModal" />
          <previewModal ref="previewModal" />
          <querier-form-rule ref="querierFormRule" @ok="getRule" @func="getCode" />
          <a-modal
            :title="$t('另存为组件命名')"
            :visible="saveAsvisible"
            @ok="saveAs"
            @cancel="saveAsvisible = !saveAsvisible"
          >
            <a-form :form="form">
              <a-form-item :label="$t('组件名称')" :labelCol="{ span: 4 }" :wrapperCol="{ span: 20 }">
                <a-input
                  v-decorator="[
                    'info[name]',
                    {
                      rules: [
                        { required: true, message: $t('请输入组件名称') },
                        { min: 2, message: $t('请输入至少两个字符') },
                        { max: 6, message: $t('最多请输入六个字符') }
                      ],
                      initialValue: ''
                    }
                  ]"
                  @change="handleChangeName"
                />
              </a-form-item>
              <a-form-item :label="$t('系统名称')" :labelCol="{ span: 4 }" :wrapperCol="{ span: 20 }">
                <a-input
                  v-decorator="[
                    'info[alias]',
                    { rules: [{ required: true, message: $t('请输入组件名称') }], initialValue: '' }
                  ]"
                  :disabled="true"
                />
              </a-form-item>
            </a-form>
          </a-modal>
        </section>
        <!-- 中间面板区域 end -->

        <!-- 右侧控件属性区域 start -->
        <aside class="right">
          <formItemProperties
            :class="{ 'show-properties': showPropertie }"
            class="form-item-properties"
            :selectItem="selectItem"
            :params="params"
            :basicsArray="basicsArray"
            :myArray="allMyArray"
            :nowArray="myArray"
            :tableType="tableType"
            :fieldColumns="fieldColumns"
            :dataWindowButtons="dataWindowButtons"
            :entranceType="entranceType"
          />
        </aside>
        <!-- 右侧控件属性区域 end -->
      </div>
      <!-- <k-footer /> -->
      <a-modal
        :title="$t('帮助说明设置')"
        :visible="visible"
        :width="900"
        :destroyOnClose="true"
        @cancel="visible = !visible"
      >
        <a-spin :spinning="loading">
          <a-form :form="helpForm" :labelCol="{ span: 4 }" :wrapperCol="{ span: 20 }">
            <a-form-item :label="$t('帮助说明')">
              <a-switch
                v-decorator="['status', { initialValue: setting.helpText, valuePropName: 'checked' }]"
                @change="
                  (e) => {
                    setting.helpText = e
                  }
                "
              />
            </a-form-item>
            <template v-if="setting.helpText">
              <a-form-item>
                <span slot="label">
                  {{ $t('帮助展开形式') }}
                  <a-tooltip placement="top">
                    <template slot="title">
                      <div>点击展开：帮助说明以弹层形式展开，富文本内容展示。</div>
                      <div>鼠标停留时气泡框展开：帮助说明以气泡框形式展开，强制文本格式，并自动剔除图片。</div>
                    </template>
                    <a-icon type="question-circle" />
                  </a-tooltip>
                </span>
                <a-radio-group
                  v-decorator="['displayMode', { initialValue: helpText.displayMode || 'drawer' }]"
                  name="radioGroup"
                >
                  <a-radio value="drawer">{{ $t('左侧抽屉打开') }}</a-radio>
                  <a-radio value="popover">{{ $t('气泡框打开') }}</a-radio>
                </a-radio-group>
              </a-form-item>
              <a-form-item label="帮助内容">
                <tiny-mce v-decorator="['content', { initialValue: helpText.content }]" />
              </a-form-item>
            </template>
          </a-form>
        </a-spin>
        <div slot="footer">
          <a-spin :spinning="loading">
            <span slot="indicator" />
            <a-button type="primary" @click="handleSubmit">{{ $t('保存') }}</a-button>
            <a-button @click="visible = !visible">{{ $t('关闭') }}</a-button>
          </a-spin>
        </div>
      </a-modal>
      <a-modal
        :title="$t('表单属性')"
        :visible="settingVisible"
        :width="700"
        :destroyOnClose="true"
        @cancel="settingVisible = !settingVisible"
      >
        <a-form :form="settingForm" :labelCol="{ span: 4 }" :wrapperCol="{ span: 20 }">
          <a-form-item v-if="!data.config.tableType" :label="$t('表单名称')">
            <a-input
              v-decorator="[
                'info[name]',
                { initialValue: formdata.name || '', rules: [{ required: true, message: $t('请输入表单名称') }] }
              ]"
            >
              <set-lang slot="addonAfter" />
            </a-input>
          </a-form-item>
          <a-form-item :label="$t('预览模态框宽度')">
            <a-input-number v-model="previewOptions.width" style="width: 100%" />
          </a-form-item>
          <a-form-item v-if="!data.config.tableType" :label="$t('表单备注')">
            <a-textarea
              v-decorator="['remarks', { initialValue: formdata.remarks || '' }]"
              :autoSize="{ minRows: 3, maxRows: 5 }"
            />
          </a-form-item>
          <a-form-item v-if="userInfo.superAdmin" :label="$t('访问级别')">
            <a-radio-group v-decorator="['info[accessLevel]', { initialValue: formdata.accessLevel || 0 }]">
              <a-radio :value="0" style="width: 100%">{{ $t('可见可编可删') }}</a-radio>
              <a-radio :value="1" style="width: 100%">{{ $t('可见可编不可删') }}</a-radio>
              <a-radio :value="2" style="width: 100%">{{ $t('可见不可编不可删') }}</a-radio>
              <a-radio :value="3" style="width: 100%">{{ $t('不可见不可编不可删') }}</a-radio>
            </a-radio-group>
          </a-form-item>
          <a-form-item :label="$t('提示')">{{ $t('实际预览效果请点击预览查看') }}</a-form-item>
        </a-form>
        <div slot="footer">
          <span slot="indicator"></span>
          <a-button type="primary" @click="handleSettingSubmit">{{ $t('保存') }}</a-button>
          <a-button @click="settingVisible = !settingVisible">{{ $t('关闭') }}</a-button>
        </div>
      </a-modal>
      <setFloatButton
        ref="setFloatButton"
        :key="setFloatButtonKey"
        :dataWindowButtons="dataWindowButtons"
        @handleFloatBtn="handleFloatBtn"
      ></setFloatButton>
      <setTabbar ref="setTabbar" :key="setTabbarKey" />
    </div>
  </a-config-provider>
</template>
<script>
/*
 * author kcz
 * date 2019-11-20
 * description 表单设计器
 */
// import draggable from "vuedraggable";
import cloneDeep from 'lodash.clonedeep'
import zhCN from 'ant-design-vue/lib/locale-provider/zh_CN'
import { mapGetters, mapMutations, mapState } from 'vuex'
// import debounce from 'lodash/debounce'
import {
  basicsList,
  // highList,
  layoutList,
  customComponents
} from './config/formItemsConfig'
import { Collapse } from 'ant-design-vue'
import { Revoke } from '../core/revoke'
import storage from '@/utils/storage'
import Vue from 'vue'
Vue.use(Collapse)
export default {
  name: 'AFormDesign',
  i18n: window.lang('admin'),
  components: {
    kHeader: () => import('./module/header'),
    // kFooter,
    operatingArea: () => import('./module/operatingArea'),
    collapseItem: () => import('./module/collapseItem'),
    FieldsTable: () => import('./module/FieldsTable'),
    kJsonModal: () => import('./module/jsonModal'),
    kCodeModal: () => import('./module/codeModal'),
    importJsonModal: () => import('./module/importJsonModal'),
    previewModal: () => import('../KFormPreview/index.vue'),
    kFormComponentPanel: () => import('./module/formComponentPanel'),
    formItemProperties: () => import('./module/formItemProperties'),
    QuerierFormRule: () => import('@/views/admin/Table/QuerierFormRule'),
    TinyMce: () => import('@/components/Editor/TinyMce'),
    SetLang: () => import('@/components/SetLang'),
    setTabbar: () => import('./module/setTabbar'),
    handlePage: () => import('./module/handlePage'),
    setFloatButton: () => import('./module/setFloatButton')
    // draggable
  },
  props: {
    title: {
      type: String,
      default () {
        return this.$t('表单设计器')
      }
    },
    showHead: {
      type: Boolean,
      default: false
    },
    toolbarsTop: {
      type: Boolean,
      default: false
    },
    toolbars: {
      type: Array,
      default: () => [
        // 'save',
        'preview',
        'importJson',
        'exportJson',
        // 'exportCode',
        'reset',
        'undo',
        'redo'
        // 'close'
      ]
    },
    showToolbarsText: {
      type: Boolean,
      default: false
    },
    fields: {
      type: Array,
      default: () => [
        'grid',
        'card',
        'divider',
        'button',
        'text',
        'uploadImg',
        'html',
        'virtualField',
        'component',
        'alert',
        'placeholder',
        'floatButton',
        'gap',
        'tabs',
        'steps',
        'square',
        'swiper',
        'collapse',
        'subform',
        'work',
        'workRemark',
        'groupSearch',
        'groupBtn',
        'externalPage'
      ]
    },
    fieldColumns: {
      type: Array,
      default: () => [],
      required: false
    },
    fieldCategory: {
      type: Array,
      default: () => []
    },
    myTemplate: {
      type: Array,
      default () {
        return []
      }
    },
    headerOptionsProps: {
      type: Object,
      default () {
        return {}
      }
    },
    conditionSetProps: {
      type: Object,
      default () {
        return {}
      }
    },
    formdata: {
      type: Object,
      default () {
        return {}
      },
      required: true
    },
    setting: {
      type: Object,
      default () {
        return {}
      },
      required: true
    },
    afterInit: {
      type: String,
      default: ''
    },
    beforeSubmit: {
      type: String,
      default: ''
    },
    params: {
      type: Object,
      default () {
        return {}
      },
      required: false
    },
    tableType: {
      type: String,
      default () {
        return ''
      }
    },
    entranceType: {
      type: String,
      default: 'appPageDesign' // 默认页面设计为入口
    },
    floatButton: {
      type: Object,
      default: () => { }
    },
    dataWindowButtons: {
      type: Array,
      default: () => []
    }
  },
  data () {
    // this.checkTemplateChange = debounce(this.checkTemplateChange, 800)
    return {
      visible: false,
      loading: false,
      settingVisible: false,
      setFloatBtnVisible: false,
      saveAsvisible: false,
      locale: zhCN,
      customComponents,
      updateTime: 0,
      updateRecordTime: 0,
      showPropertie: true,
      revoke: null,
      recordList: [],
      redoList: [],
      startType: '',
      form: this.$form.createForm(this),
      helpForm: this.$form.createForm(this),
      helpText: {},
      settingForm: this.$form.createForm(this),
      noModel: [
        'button',
        'divider',
        'dividerTag',
        'card',
        'grid',
        'table',
        'alert',
        'text',
        'placeholder',
        'html',
        'formmark',
        'work',
        'workRemark',
        'component'
      ],
      myArray: [],
      allMyArray: [],
      data: {
        list: [],
        config: {
          layout: 'horizontal',
          labelCol: { xs: 4, sm: 4, md: 4, lg: 4, xl: 4, xxl: 4 },
          wrapperCol: { xs: 18, sm: 18, md: 18, lg: 18, xl: 18, xxl: 18 },
          hideRequiredMark: false,
          customStyle: ''
        }
      },
      // 页面标题设置对象
      headerOptions: {
        showTitle: true,
        title: '页面标题',
        returnBtn: true
      },
      // 排序筛选设置对象
      conditionSet: {
        text: '',
        allowClear: false, // 清除按钮
        sortAndSearch: false, // 开启排序与筛选
        layout: true, // true 单行  false 下一行
        sortAndSearchList: [], // 排序与筛选配置
        searchFields: [], // 搜索框字段
        sortData: { // 筛选
          list: [],
          config: {}
        }
      },
      // basePageSet: [], // 发生修改的基础页面配置集合
      previewOptions: {
        width: this.tableType ? 400 : 1200
      },
      selectItem: {
        key: ''
      },
      setTabbarKey: 'setTabbar_1',
      setFloatButtonKey: 'setFloatButtonKey_1',
      floatBtnConfig: {
        options: {
          enable: false,
          icon: 'uicon-home',
          direction: 'horizontal', // 展开方向
          popMenu: false, // 是否使用弹出菜单（组合按钮）
          horizontal: 'left', // 水平对齐方式 left right
          vertical: 'bottom' // 垂直对齐方式 bottom top
        },
        list: [
          {
            text: '按钮名称',
            active: false,
            icon: 'uicon-home',
            buttonEvent: 'system', // system  specific selfDef
            systemFunc: '',
            specificFunc: 0, // 1复制  2地址位置  3电话
            selfDefFunc: ''
          }
        ]
      }
    }
  },
  provide () {
    return {
      getSelectItem: () => this.selectItem
    }
  },
  computed: {
    ...mapGetters(['userInfo']),
    ...mapState('appStore', {
      selectPageStore: state => state.selectPageStore,
      selectPageInfo: state => state.selectPageInfo
    }),
    basicsArray () {
      // 计算需要显示的基础字段
      return basicsList.filter(item => this.fields.includes(item.type) || this.fields.includes(item.getType))
    },
    layoutArray () {
      // 计算需要显示的布局字段
      return layoutList.filter(item => this.tableType ? this.fields.includes(item.type) : this.fields.includes(item.type))
    },
    collapseDefaultActiveKey () {
      // 计算当前展开的控件列表
      if (storage.get('collapseDefaultActiveKey')) {
        return storage.get('collapseDefaultActiveKey')
      } else {
        return ['1']
      }
    }
  },
  watch: {
    afterInit (newValue) {
      this.initJs = newValue
    },
    myTemplate: {
      handler (newValue) {
        this.templateChange(newValue)
      },
      immediate: true
    },
    conditionSetProps: {
      handler (val) {
        if (val && Object.keys(val).length > 0) {
          this.conditionSet = val
        }
      }
    },
    headerOptionsProps: {
      handler (val) {
        if (val && Object.keys(val).length > 0) {
          this.headerOptions = val
        }
      }
    },
    floatButton: {
      handler (val) {
        if (val && Object.keys(val).length > 0) {
          this.floatBtnConfig = val
        }
      }
    },
    data: {
      handler (newValue, oldValue) {
        if (this.selectPageInfo.templateId) {
          const index = this.selectPageStore.findIndex(item => item.templateId === this.selectPageInfo.templateId)
          if (index !== -1) {
            this.selectPageStore[index].newList = newValue.list
            if (!this.selectPageStore[index].result) {
              this.selectPageStore[index].oldList = cloneDeep(newValue.list)
            }
            if (this.selectPageStore[index].result) {
              this.selectPageStore[index].result = cloneDeep(this.selectPageInfo)
            }
          }
        }
        this.$nextTick(() => {
          this.revoke.push(newValue)
        })
        this.myArray = JSON.parse(JSON.stringify(this.allMyArray))
        if (!this.tableType) {
          const getList = (array) => {
            array.forEach(item => {
              if (item.columns) {
                getList(item.columns)
              } else if (item.trs) {
                getList(item.trs)
              } else if (item.tds) {
                getList(item.tds)
              } else if (item.list) {
                getList(item.list)
              } else {
                this.myArray = this.myArray.filter(arrItem => arrItem.value !== item.value)
              }
            })
          }
          getList(newValue.list)
        } else {
          const getList = (array) => {
            array.forEach(item => {
              if (item.columns) {
                getList(item.columns)
              } else if (item.tds) {
                getList(item.tds)
              } else if (item.trs) {
                getList(item.trs)
              } else if (item.list) {
                getList(item.list)
              } else {
                this.myArray = this.myArray.filter(arrItem => arrItem.alias !== item.alias)
              }
            })
          }
          getList(newValue.list)
        }
      },
      immediate: true,
      deep: true
    },
    selectPageStore: {
      handler (newVal) {
        newVal.forEach(item => {
          const oldStr = JSON.stringify(item.oldList)
          const newStr = JSON.stringify(item.newList)
          if (oldStr !== newStr || item.oldParentTemplateId !== item.parentTemplateId) {
            item.change = true
            item.result && (item.result.setting.template.list = item.newList)
            item.result && (item.result.setting.template.parentTemplateId = item.parentTemplateId)
          } else {
            item.change = false
          }
        })
      },
      immediate: true,
      deep: true
    },
    fieldColumns (newValue) {
      if (this.tableType) {
        this.myArray = newValue
        this.allMyArray = JSON.parse(JSON.stringify(newValue))
      }
    },
    setting (val) {
      if (val && val.templatePreviewWidth) {
        this.previewOptions.width = val.templatePreviewWidth
      }
    }
  },
  created () {
    this.revoke = new Revoke()
    this.recordList = this.revoke.recordList
    this.redoList = this.revoke.redoList
    this.data.config.tableType = this.tableType
    if (this.tableType) {
      this.myArray = this.fieldColumns
      this.allMyArray = JSON.parse(JSON.stringify(this.fieldColumns))
    }
  },
  methods: {
    ...mapMutations('appStore', ['SET_PUSHPAGE', 'SET_PAGEINFO']),
    generateKey (list, index) {
      // 生成key值
      const key = (list[index].formType || list[index].type) + '_' + new Date().getTime()
      this.$set(list, index, {
        ...list[index],
        key,
        model: key
      })
      if (this.noModel.includes(list[index].type)) {
        // 删除不需要的model属性
        delete list[index].model
      }
    },
    handleListPush (item) {
      // 双击控件按钮push到list
      // 生成key值
      if (!this.selectItem.key) {
        // 在没有选择表单时，将数据push到this.data.list
        const key = item.key ?? (item.formType || item.type) + '_' + new Date().getTime()
        item = {
          ...item,
          key,
          model: key
        }
        if (this.noModel.includes(item.formType || item.type)) {
          // 删除不需要的model属性
          delete item.model
        }
        // const itemString = JSON.stringify(item)
        const record = JSON.parse(JSON.stringify(item))
        // 删除icon及compoent属性
        delete record.icon
        delete record.component
        this.data.list.push(record)
        this.handleSetSelectItem(record)
        return false
      }
      this.$refs.KFCP.handleCopy(false, item)
    },
    handleOpenJsonModal () {
      // 打开json预览模态框
      this.$refs.jsonModal.jsonData = this.data
      this.$refs.jsonModal.visible = true
    },
    handleOpenCodeModal () {
      // 打开代码预览模态框
      this.$refs.codeModal.jsonData = this.data
      this.$refs.codeModal.visible = true
    },
    handleOpenImportJsonModal () {
      // 打开json预览模态框
      this.$refs.importJsonModal.jsonData = this.data
      this.$refs.importJsonModal.handleSetSelectItem = this.handleSetSelectItem
      this.$refs.importJsonModal.visible = true
    },
    handlePreview () {
      // 打开预览模态框
      this.$refs.previewModal.jsonData = this.data
      this.$refs.previewModal.previewWidth = this.previewOptions.width
      this.$refs.previewModal.visible = true
    },
    querierFormRule () {
      this.$refs.querierFormRule.show({
        title: this.$t('表单规则'),
        page: 'viewForm',
        valueinit: this.initJs,
        value: this.verifStr
      })
    },
    // 打开帮助说明编辑页面
    getHelpText () {
      this.visible = true
      this.loading = true
      this.axios({
        url: '/admin/document/edit',
        data: {
          action: 'get',
          number: this.formdata.templateId
        }
      }).then(res => {
        this.loading = false
        if (!res.code) {
          this.helpText = res.result || {}
        } else {
          this.$message.warning(res.message)
          this.visible = false
        }
      })
    },
    // 帮助说明内容提交
    handleSubmit () {
      this.helpForm.validateFields((errors, values) => {
        if (!errors) {
          this.loaidng = true
          this.axios({
            url: '/admin/document/edit',
            data: Object.assign({
              number: this.formdata.templateId,
              action: 'submit'
            }, values)
          }).then(res => {
            this.loaidng = true
            if (!res.code) {
              this.visible = false
            } else {
              this.$message.warning(res.message)
            }
          })
        }
      })
    },
    getFormSetting () {
      this.settingVisible = true
    },
    handleSettingSubmit () {
      this.settingForm.validateFields((errors, values) => {
        if (!errors) {
          Object.assign(this.setting, values.setting, {
            templatePreviewWidth: this.previewOptions.width
          })
          Object.assign(this.formdata, values.info)
          this.settingVisible = false
        }
      })
    },
    // 表单规则内容
    getRule (value) {
      this.fieldRule = value
    },
    // 获取加载前后事件
    getCode (value, type) {
      if (type === 'init') {
        this.initJs = value
      } else if (type === 'verif') {
        this.verifStr = value
      }
    },
    changeAllStatus (e) {
      this.allStatus(this.data.list, e.key)
    },
    saveAs () {
      this.form.validateFields((err, val) => {
        if (!err) {
          console.log(this.form.getFieldsValue())
        }
      })
    },
    // 根据显示名称赋值系统名称
    handleChangeName (e) {
      this.data.name = e.target.value
      if (this.aliasDisabled) {
        return false
      }
      const pinyin = require('js-pinyin')
      const reg = new RegExp(/^(?![0-9]|_)[a-z0-9_]+$/)
      const reg2 = new RegExp(/^[a-z0-9_]+$/)
      var val = pinyin.getCamelChars(e.target.value)
      val = val.toLowerCase()
      val = val.split('')
      this.getVal(val, reg)
      val = val.filter(item => {
        return reg2.test(item)
      })
      const { setFieldsValue } = this.form
      setFieldsValue({ 'info[alias]': val.join('') })
    },
    // 递归判断是否首字不是数字
    getVal (val, reg) {
      if (!reg.test(val[0])) {
        val.shift()
        this.getVal(val, reg)
      }
    },
    allStatus (array, type) {
      array.forEach((item, index) => {
        if (item.columns) {
          this.allStatus(item.columns, type)
        } else if (item.trs) {
          this.allStatus(item.trs, type)
        } else if (item.tds) {
          this.allStatus(item.tds, type)
        } else if (item.list) {
          this.allStatus(item.list, type)
        } else {
          if (type === '1' && item.type === 'field') {
            this.$set(item, 'fieldRule', 'allow')
          } else if (type === '0' && item.type === 'field') {
            this.$set(item, 'fieldRule', 'readonly')
          }
        }
      })
    },
    handleReset () {
      // 清空
      this.$confirm({
        title: this.$t('警告'),
        content: this.$t('是否确认清空内容?'),
        okText: this.$t('是'),
        okType: 'danger',
        cancelText: this.$t('否'),
        onOk: () => {
          this.data.list = []
          this.handleSetSelectItem({ key: '' })
          this.$message.success(this.$t('已清空'))
        }
      })
    },
    handleSetSelectItem (record) {
      // 操作间隔不能低于100毫秒
      const newTime = new Date().getTime()
      if (newTime - this.updateTime < 100) {
        return false
      }
      this.updateTime = newTime
      // 设置selectItem的值
      this.selectItem = record
      // 判断是否选中控件，如果选中则弹出属性面板，否则关闭属性面板
      if (record.key) {
        this.startType = record.formType || record.type
      }
      this.$nextTick(() => {
        this.$set(this.data.config, 'show', !this.data.config['show'])
      })
    },
    handleSetData (data) {
      // 用于父组件赋值
      try {
        if (typeof data !== 'object') {
          return false
        } else {
          this.data = data
          // 导入json数据后，需要清除已选择key
          this.handleSetSelectItem({ key: '' })
        }
        return true
      } catch (error) {
        return false
      }
    },
    collapseChange (val) {
      // 点击collapse时，保存当前collapse状态
      storage.set('collapseDefaultActiveKey', val)
    },
    handleStart (type, index) {
      this.startType = type
    },
    templateChange (myTemplate) {
      if (!this.tableType) {
        myTemplate.forEach((temItem, temIndex) => {
          temItem.key = temItem.key ?? (temItem.alias || temItem.type) + '_' + new Date().getTime() + temIndex
          this.fieldColumns.forEach(fieldItem => {
            if (temItem.value === fieldItem.alias) {
              temItem.name = fieldItem.name
              temItem.formType = fieldItem.formType
              temItem.fieldId = fieldItem.fieldId
            }
          })
        })
        this.data.list = myTemplate
        this.fieldColumns.forEach(item => {
          const obj = {
            type: 'field',
            name: item.name,
            // labelShow: item.labelShow,
            fieldId: item.fieldId,
            value: item.alias,
            formType: item.formType,
            changeTitle: item.changeTitle,
            placeholder: '0',
            fieldRule: item.setting && item.setting.rule ? item.setting.rule : 'allow',
            attribute: '',
            componentName: '',
            validationType: null,
            labelStyle: item.labelStyle || 'label',
            fontSize: item.fontSize || 'default',
            color: item.color || '#000000',
            backgroundColor: item.backgroundColor || '#ffffff',
            size: item.size || 'default',
            tagType: item.tagType || 'success',
            shape: item.shape || 'circle',
            mode: item.mode || 'dark'
          }
          const string = JSON.stringify(myTemplate)
          if (string.indexOf(item.alias) === -1) {
            this.myArray.push(obj)
          }
          this.allMyArray.push(obj)
        })
        this.initJs = this.afterInit
        this.verifStr = this.beforeSubmit
      } else {
        this.data.list = myTemplate
      }
      if (this.selectPageInfo.templateId) {
        const index = this.selectPageStore.findIndex(item => item.templateId === this.selectPageInfo.templateId)
        if (index === -1) {
          this.SET_PUSHPAGE({
            name: this.selectPageInfo.name,
            oldList: cloneDeep(myTemplate),
            newList: cloneDeep(myTemplate),
            templateId: this.selectPageInfo.templateId,
            change: false,
            parentTemplateId: this.selectPageInfo.parentTemplateId,
            oldParentTemplateId: this.selectPageInfo.parentTemplateId,
            result: cloneDeep(this.selectPageInfo)
          })
        }
      }
    },
    async handleSubmitPage () {
      const data = cloneDeep(this.selectPageStore.filter(item => item.change))
      const promiseList = data.filter(item => !item.result).map(item => {
        return new Promise((resolve, reject) => {
          this.axios({
            url: '/admin/modeling/getAppBasePage',
            params: {
              templateId: item.templateId
            }
          }).then(res => {
            resolve(res)
          })
        })
      })
      await Promise.all(promiseList).then(list => {
        list.forEach(listItem => {
          data.forEach(item => {
            if (!item.result && item.templateId === listItem.result.templateId) {
              item.name = listItem.result.name
              item.result = listItem.result
            }
          })
        })
        const payload = data.map(item => {
          return {
            templateId: item.templateId,
            parentTemplateId: item.parentTemplateId,
            name: item.name,
            setting: item.result.setting ? item.result.setting : {},
            accessLevel: item.result.accessLevel,
            remarks: item.result.remarks
          }
        })
        this.axios({
          url: '/admin/modeling/editAppBasePage',
          data: payload
        }).then(res => {
          if (!res.code) {
            this.$message.success(res.message)
            this.selectPageStore.map(item => {
              item.change = false
              item.oldList = cloneDeep(item.newList)
              item.oldParentTemplateId = item.parentTemplateId
            })
          }
        })
      })
    },
    setFloatBtn () {
      this.setFloatButtonKey = this.setFloatButtonKey === 'setFloatButtonKey_1' ? 'setFloatButtonKey_2' : 'setFloatButtonKey_1'
      this.$nextTick(() => {
        const config = cloneDeep(this.floatBtnConfig)
        this.$refs.setFloatButton.show(config)
      })
    },
    handleFloatBtn (config) {
      this.floatBtnConfig = config
    },
    /**
     * @description: 撤销
     * @param {*}
     * @return {*}
     */
    handleUndo () {
      const record = this.revoke.undo()
      if (!record) {
        return false
      }
      this.data = record

      this.handleSetSelectItem({ key: '' })
    },

    /**
     * @description: 重做
     * @param {*}
     * @return {*}
     */
    handleRedo () {
      const record = this.revoke.redo()
      if (!record) {
        return false
      }
      this.data = record
    },
    /**
     * 设置标题对象
     */
    setHeaderOptions (headerOptions) {
      this.headerOptions = headerOptions
    },
    /**
     * 设置排序筛选对象
     */
    setCondition (conditionSet) {
      this.conditionSet = conditionSet
    }
  }
}
</script>
