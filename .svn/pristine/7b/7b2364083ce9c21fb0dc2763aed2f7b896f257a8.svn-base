<template>
  <a-drawer :title="config.title" :width="600" :visible="visible" :destroyOnClose="true" @close="visible = !visible">
    <a-spin :spinning="loading">
      <a-form :form="form">
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol">
          <span slot="label">
            {{ $t('头像') }}
            <a-tooltip :title="$t('选中默认头像时，系统会根据性别自动设置头像。选中自定义上传时，需按要求上传头像。')">
              <a-icon type="question-circle" />
            </a-tooltip>
          </span>
          <a-radio-group v-model="headType">
            <a-radio :value="0">默认头像</a-radio>
            <a-radio :value="1">自定义上传</a-radio>
          </a-radio-group>
          <template v-if="headType == 1">
            <a-upload
              v-decorator="[
                'headImage',
                { initialValue: imageFileList, rules: [{ required: true, message: $t('请上传头像') }] }
              ]"
              :action="`${$store.state.env.VUE_APP_API_BASE_URL}admin/attachment/upload/?uploadName=upload`"
              :headers="{ 'Access-Token': $store.getters.userInfo.accessToken }"
              name="upload"
              listType="picture-card"
              :multiple="true"
              accept="image/*"
              :fileList="imageFileList"
              :beforeUpload="beforeHeadUpload"
              @preview="handleImagePreview"
              @change="handleImageChange"
            >
              <div v-if="imageFileList.length < 1">
                <a-icon type="plus" />
                <div>Upload</div>
              </div>
            </a-upload>
            <span>
              {{ $t('图片尺寸为 100 X 100') }}
            </span>
            <a-modal :visible="imagePreviewVisible" :footer="null" @cancel="imagePreviewVisible = !imagePreviewVisible">
              <img alt="example" style="width: 100%" :src="imagePreviewUrl" />
            </a-modal>
          </template>
        </a-form-item>
        <a-form-item :labelCol="labelCol" :wrapperCol="wrapperCol">
          <span slot="label">
            {{ $t('用户名') }}
            <a-tooltip
              v-if="config.action === 'add'"
              :title="$t('用户名只能包含中文 、数字、大小写英文字母，英文横线 -、下划线 _')"
            >
              <a-icon type="question-circle" />
            </a-tooltip>
          </span>
          <a-input
            v-decorator="[
              'info[username]',
              {
                initialValue: data.username,
                rules: [{ required: true, message: $t('请输入用户名') }, { validator: checkName }]
              }
            ]"
            :disabled="config.action === 'edit'"
          />
        </a-form-item>
        <a-form-item :label="$t('真实姓名')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-input
            v-decorator="[
              'info[realName]',
              { initialValue: data.realName, rules: [{ required: true, message: $t('请输入真实姓名') }] }
            ]"
          />
        </a-form-item>
        <a-form-item
          :label="$t('密码')"
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          :validateStatus="passwordStatus"
          :help="passwordHelp"
        >
          <a-input-password
            v-decorator="['password', { rules: [{ required: config.action === 'add', message: $t('请输入密码') }] }]"
            :visibility-toggle="true"
            @change="changePassword"
          />
        </a-form-item>
        <a-form-item :label="$t('所属角色')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-select
            v-decorator="[
              'info[roleId]',
              { rules: [{ required: true, message: $t('请选择角色') }], initialValue: data.roleId || undefined }
            ]"
            :placeholder="$t('请选择角色')"
            showSearch
            option-filter-prop="children"
            :disabled="data.username === 'admin'"
          >
            <a-select-option v-for="(value, key) in role" :key="key" :value="key">{{ value }}</a-select-option>
          </a-select>
        </a-form-item>
        <a-form-item :label="$t('所属部门')" :labelCol="labelCol" :wrapperCol="wrapperCol" :required="true">
          <data-picker
            :placeholder="$t('请选择部门')"
            name="info[departmentId]"
            parentId="parentDepartmentId"
            displayType="tree"
            url="/admin/department/init"
            searchUrl="/admin/search/departmentSearch"
            :required="true"
            :action="config.action"
            :value="data.option"
            :scope="scope"
            :optionsConversion="optionsConversion"
          />
        </a-form-item>
        <a-form-item :label="$t('状态')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-select v-decorator="['info[status]', { initialValue: data.status }]">
            <a-select-option :value="1">{{ $t('启用') }}</a-select-option>
            <a-select-option :value="0">{{ $t('禁用') }}</a-select-option>
          </a-select>
        </a-form-item>
        <a-form-item :label="$t('部门负责人')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-select v-decorator="['info[isLeader]', { initialValue: data.isLeader }]">
            <a-select-option :value="1">{{ $t('是') }}</a-select-option>
            <a-select-option :value="0">{{ $t('否') }}</a-select-option>
          </a-select>
        </a-form-item>
        <a-form-item :label="$t('性别')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-select v-decorator="['info[gender]', { initialValue: data.gender }]" @change="sexChange">
            <a-select-option value="男">{{ $t('男') }}</a-select-option>
            <a-select-option value="女">{{ $t('女') }}</a-select-option>
          </a-select>
        </a-form-item>
        <a-form-item :label="$t('手机号码')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-input v-decorator="['info[phone]', { initialValue: data.phone }]" />
        </a-form-item>
        <a-form-item :label="$t('分机号码')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-input-number v-decorator="['info[extension]', { initialValue: data.extension }]" :min="1" />
        </a-form-item>
        <a-form-item :label="$t('观察者')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-input v-decorator="['info[observer]', { initialValue: data.observer }]" />
        </a-form-item>
        <a-form-item label="Email" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-input v-decorator="['info[email]', { initialValue: data.email }]" />
        </a-form-item>
        <a-form-item :label="$t('新消息通知')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-switch
            v-decorator="[
              'info[notice]',
              { initialValue: data.notice == '1' ? true : false, valuePropName: 'checked' }
            ]"
          />
        </a-form-item>
        <a-form-item :label="$t('访问范围')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-button size="small" @click="handlePriv">
            <a-badge v-if="privFlag" status="success" :text="$t('设置')" />
            <a-badge v-else status="default" :text="$t('设置')" />
          </a-button>
        </a-form-item>
        <a-form-item :label="$t('备注')" :labelCol="labelCol" :wrapperCol="wrapperCol">
          <a-textarea
            v-decorator="['info[remarks]', { initialValue: data.remarks }]"
            :autoSize="{ minRows: 2, maxRows: 6 }"
          />
        </a-form-item>
      </a-form>
      <div class="bbar">
        <a-button type="primary" @click="handleSubmit">{{ $t('保存') }}</a-button>
        <a-button @click="visible = !visible">{{ $t('关闭') }}</a-button>
      </div>
      <priv-range ref="privRange" :key="privKey" :setting="priv" @ok="getPriv" />
    </a-spin>
  </a-drawer>
</template>
<script>
import { mapGetters } from 'vuex'
export default {
  i18n: window.lang('admin'),
  components: {
    PrivRange: () => import('../PrivRange/PrivRange')
  },
  data () {
    return {
      config: {},
      imageFileList: [],
      imageDefaultList: [],
      imagePreviewVisible: false,
      imagePreviewUrl: '',
      headType: 0,
      labelCol: { span: 6 },
      wrapperCol: { span: 18 },
      visible: false,
      loading: false,
      scrollStats: true,
      searchData: '',
      data: {},
      form: this.$form.createForm(this),
      passwordStatus: 'success',
      passwordHelp: '',
      role: [],
      privKey: 'privKey',
      priv: {},
      privFlag: false,
      page: {
        pageNo: 1,
        pageSize: 20,
        sortField: 'id',
        sortOrder: 'descend'
      },
      scope: this
    }
  },
  computed: {
    ...mapGetters(['setting'])
  },
  methods: {
    show (config) {
      this.visible = true
      this.loading = true
      this.config = config
      this.axios({
        url: this.config.url,
        data: Object.assign({ action: 'get', id: config.record ? config.record.id : 0 })
      }).then((res) => {
        this.loading = false
        this.data = res.result.data
        if (config.action === 'edit') {
          this.data.option = [{
            key: this.data.departmentId,
            label: this.data.fullDepartmentName
          }]
          this.headType = (this.$store.getters.setting.maleHeadImage.includes(this.data.setting.headImage) || this.$store.getters.setting.femaleHeadImage.includes(this.data.setting.headImage)) ? 0 : 1
          if (this.data.setting.headImage) {
            this.imageFileList = [{
              uid: '-1',
              name: this.data.setting.headImage,
              status: 'done',
              url: this.$store.state.env.VUE_APP_API_BASE_URL + 'admin/api/download/?filePath=' + this.data.setting.headImage,
              response: { result: { filePath: this.data.setting.headImage } }
            }]
          }
        }
        const image = this.$store.getters.setting.maleHeadImage
        const floor = Math.floor(Math.random() * ((image.length - 1) + 1))
        this.imageDefaultList = [{
          uid: '-1',
          name: image[floor],
          status: 'done',
          url: this.$store.state.env.VUE_APP_API_BASE_URL + 'admin/api/download/?filePath=' + image[floor],
          response: { result: { filePath: image[floor] } }
        }]
        if (res.result.priv && res.result.priv.list && res.result.priv.list.length) {
          this.priv = res.result.priv
        } else {
          this.priv = {}
        }
        if (this.priv) {
          this.privFlag = Object.keys(this.priv).length !== 0
        } else {
          this.privFlag = false
        }
        this.role = res.result.option.role
      })
    },
    checkName (rule, value, callback) {
      const string = this.$t('用户名只能包含中文 、数字、大小写英文字母，英文横线 -、下划线 _')
      const reg = /[a-zA-Z0-9_\u4e00-\u9fa5-]$/
      if (!reg.test(value)) {
        callback(string)
      }
      callback()
    },
    // 组织结构options转换
    optionsConversion (list, displayType, searchType) {
      if (searchType) {
        return list.map(item => {
          const obj = item
          obj.key = item.departmentId
          obj.label = item.fullDepartmentName
          return obj
        })
      } else {
        return list.map(item => {
          const obj = item
          obj.key = item.departmentId
          obj.label = item.departmentName
          return obj
        })
      }
    },
    // 打开访问范围
    handlePriv () {
      this.privKey = this.privKey === 'privKey' ? 'privKey_1' : 'privKey'
      this.$nextTick(() => {
        this.$refs.privRange.show({
          page: 'user'
        })
      })
    },
    // 获取访问范围
    getPriv (val) {
      this.priv = val
      this.privFlag = Object.keys(this.priv).length !== 0
    },
    handleImageChange ({ fileList }) {
      this.imageFileList = fileList
    },
    handleImagePreview (file) {
      this.imagePreviewUrl = file.url || file.thumbUrl
      this.imagePreviewVisible = true
    },
    sexChange (e) {
      if (this.headType === 0) {
        const image = e === '男' ? this.$store.getters.setting.maleHeadImage : this.$store.getters.setting.femaleHeadImage
        const floor = Math.floor(Math.random() * ((image.length - 1) + 1))
        this.imageDefaultList = [{
          uid: '-1',
          name: image[floor],
          status: 'done',
          url: this.$store.state.env.VUE_APP_API_BASE_URL + 'admin/api/download/?filePath=' + image[floor],
          response: { result: { filePath: image[floor] } }
        }]
      }
    },
    beforeHeadUpload (file) {
      return new Promise((resolve, reject) => {
        const fileType = '.png,.jpg,.jpeg,.gif,.bmp'
        const suffix = file.name.substring(file.name.lastIndexOf('.'), file.name.length)
        if (!fileType.includes(suffix)) {
          this.$message.error('上传文件格式错误')
          return reject(file)
        }
        const isLt2M = file.size / 1024 / 1024 < 2
        if (!isLt2M) {
          this.$message.error('上传文件大小超过2M')
          return reject(file)
        }
        return resolve(file)
      })
    },
    // 获取密码
    changePassword (e) {
      const value = e.target.value
      const flag = value.indexOf(' ') !== -1
      const passwordRule = this.setting.passwordRule || ['number']
      const passwordLength = this.setting.passwordLength || [6, 12]
      const capitalLetterEnable = this.setting.capitalLetterEnable
      // eslint-disable-next-line no-useless-escape
      let chat = `!"#$%&'\\(\\)\\*+\\,-\\./:;<=>\\?@\\[\\]\\^_\\{\\|\\}~`
      chat = chat + '`'
      let string = this.$t('密码长度为{0}-{1}位字符，且必须包含数字', { 0: passwordLength[0], 1: passwordLength[1] })
      let passwordReg = ''
      if (passwordRule.includes('number')) {
        passwordReg = passwordReg + '(?=.*[0-9])'
      }
      if (passwordRule.includes('letter')) {
        passwordReg = passwordReg + capitalLetterEnable ? '(?=.*[a-z])(?=.*[A-Z])' : '(?=.*[a-z])'
        string = string + `、${capitalLetterEnable ? this.$t('大小写字母') : this.$t('字母')}`
      }
      if (passwordRule.includes('special')) {
        passwordReg = passwordReg + `(?=.*[${chat}])`
        string = string + `、${this.$t('特殊字符')}`
      }
      const regString = `^${passwordReg}.{${passwordLength[0]},${passwordLength[1]}}$`
      const reg = new RegExp(regString, capitalLetterEnable ? '' : 'i')
      if (flag) {
        this.passwordStatus = 'error'
        this.passwordHelp = this.$t('密码不能包含空格，请重新输入')
      } else if (value && value.length < 6) {
        this.passwordStatus = 'error'
        this.passwordHelp = this.$t('请输入至少六个字符')
      } else if (value && !reg.test(value)) {
        this.passwordStatus = 'error'
        this.passwordHelp = string
      } else {
        this.passwordStatus = 'success'
        this.passwordHelp = ''
      }
    },
    handleSubmit () {
      this.form.validateFields((errors, values) => {
        if (this.config.action === 'add' && !values.password) {
          this.passwordStatus = 'error'
          this.passwordHelp = this.$t('请输入密码')
          return
        }
        if (this.passwordStatus === 'error') {
          return
        }
        if (!errors) {
          this.loading = true
          const headImage = this.headType === 0 ? this.imageDefaultList[0].response.result.filePath : this.imageFileList[0].response.result.filePath
          values.info.setting = { headImage: headImage }
          values.info.priv = this.priv
          values.info.notice = values.info.notice ? '1' : '0'
          values.headImage = undefined
          this.axios({
            url: this.config.url,
            data: Object.assign(values, { action: 'submit', id: this.data.id })
          }).then((res) => {
            this.loading = false
            this.$emit('ok', values)
            if (res.code) {
              this.$message.warning(res.message)
            } else {
              this.visible = false
              this.$message.success(res.message)
            }
          })
        }
      })
    }
  }
}
</script>
